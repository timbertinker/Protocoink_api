{"version":3,"file":"sdk.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/constants.ts","../src/helpers/misc.ts","../src/methods/swap/spender.ts","../src/helpers/approve.ts","../src/methods/swap/approve.ts","../src/helpers/token.ts","../src/methods/swap/balance.ts","../src/methods/swap/adapters.ts","../src/methods/swap/helpers/normalizeRateOptions.ts","../src/methods/swap/rates.ts","../src/methods/swap/swapTx.ts","../src/methods/swap/token.ts","../src/methods/common/orders/buildOrderData.ts","../src/methods/common/orders/misc.ts","../src/methods/limitOrders/helpers/misc.ts","../src/methods/nftOrders/helpers/buildOrderData.ts","../src/methods/nftOrders/helpers/misc.ts","../src/methods/swap/transaction.ts","../src/methods/limitOrders/helpers/buildOrderData.ts","../src/methods/limitOrders/buildOrder.ts","../src/methods/limitOrders/signOrder.ts","../src/methods/limitOrders/cancelOrder.ts","../src/methods/limitOrders/fillOrderDirectly.ts","../src/methods/limitOrders/getOrders.ts","../src/methods/limitOrders/postOrder.ts","../src/methods/limitOrders/approveForOrder.ts","../src/methods/limitOrders/getOrdersContract.ts","../src/methods/limitOrders/transaction.ts","../src/methods/nftOrders/buildOrder.ts","../src/methods/nftOrders/signOrder.ts","../src/methods/nftOrders/cancelOrder.ts","../src/methods/nftOrders/getOrders.ts","../src/methods/nftOrders/postOrder.ts","../src/methods/nftOrders/getOrdersContract.ts","../src/methods/nftOrders/approveForOrder.ts","../src/methods/nftOrders/transaction.ts","../src/helpers/fetchers/axios.ts","../src/helpers/fetchers/fetch.ts","../src/helpers/providers/ethers.ts","../src/helpers/providers/web3.ts","../src/sdk/partial.ts","../src/methods/swap/index.ts","../src/methods/limitOrders/index.ts","../src/methods/nftOrders/index.ts","../src/sdk/full.ts","../src/sdk/simple.ts","../src/legacy/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { ParaSwapVersionUnion } from './types';\n\nexport {\n  SwapSide,\n  ContractMethod,\n  ContractMethodV5,\n  ContractMethodV6,\n} from '@paraswap/core';\n\nexport const API_URL = 'https://api.paraswap.io';\nexport const DEFAULT_VERSION: ParaSwapVersionUnion = '5';\n","import type {\n  Contract as EthersContract,\n  ContractFunction as EthersContractFunction,\n  PopulatedTransaction as EthersPopulatedTransaction,\n  BigNumber as EthersBigNumber,\n} from 'ethers';\nimport type {\n  ContractSendMethod as Web3ContractSendMethod,\n  Contract as Web3Contract,\n} from 'web3-eth-contract';\nimport { assert, Primitive } from 'ts-essentials';\n\nimport type { AxiosError } from 'axios';\n\nexport type EthersContractWithMethod<T extends string> = EthersContract & {\n  readonly [method in T]: EthersContractFunction;\n} & {\n  readonly functions: { [method in T]: EthersContractFunction };\n\n  readonly callStatic: { [method in T]: EthersContractFunction };\n  readonly estimateGas: {\n    [method in T]: EthersContractFunction<EthersBigNumber>;\n  };\n  readonly populateTransaction: {\n    [method in T]: EthersContractFunction<EthersPopulatedTransaction>;\n  };\n};\n\nexport function ethersContractHasMethods<T extends string>(\n  contract: EthersContract,\n  ...methods: T[]\n): contract is EthersContractWithMethod<T> {\n  return methods.every((method) => typeof contract[method] === 'function');\n}\n\nexport function assertEthersContractHasMethods<T extends string>(\n  contract: EthersContract,\n  ...methods: T[]\n): asserts contract is EthersContractWithMethod<T> {\n  assert(\n    ethersContractHasMethods(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n\nexport type Web3ContractWithMethod<T extends string> = Web3Contract & {\n  methods: { [method in T]: Web3ContractSendMethod };\n};\n\nexport function web3ContractHasMethods<T extends string>(\n  contract: Web3Contract,\n  ...methods: T[]\n): contract is Web3ContractWithMethod<T> {\n  return methods.every(\n    (method) => typeof contract.methods[method] === 'function'\n  );\n}\n\nexport function assertWeb3ContractHasMethods<T extends string>(\n  contract: Web3Contract,\n  ...methods: T[]\n): asserts contract is Web3ContractWithMethod<T> {\n  assert(\n    web3ContractHasMethods(contract, ...methods),\n    `Contract must have methods: ${methods.join(', ')}`\n  );\n}\n\nexport const objectToFilledEntries = <T extends Record<string, unknown>>(\n  object: T\n): [string, string][] => {\n  return (\n    Object.entries(object)\n      // removes keys with undefined values\n      .filter(([, value]) => value !== undefined)\n      .map(([key, value]) => [key, String(value)])\n  );\n};\n\n//                                                            not arrays or mappings\nexport const constructSearchString = <\n  U extends Record<string, Exclude<Primitive, symbol>>\n>(\n  queryOptions: U\n): `?${string}` | '' => {\n  const queryEntries = objectToFilledEntries(queryOptions);\n\n  const queryString = new URLSearchParams(queryEntries).toString();\n\n  // returns empty string or `?${string}`\n  return queryString && `?${queryString}`;\n};\n\ntype FetcherErrorConstructorInput = Pick<\n  AxiosError,\n  'code' | 'request' | 'response' | 'isAxiosError' | 'message'\n>;\n\nexport interface FetcherErrorInterface extends FetcherErrorConstructorInput {\n  status?: number;\n  code?: string;\n}\n\nexport const isFetcherError = (error: unknown): error is FetcherError => {\n  return error instanceof FetcherError;\n};\n\nexport class FetcherError extends Error implements FetcherErrorInterface {\n  code;\n  status;\n  request;\n  response;\n  isAxiosError = false;\n\n  public constructor({\n    code,\n    request,\n    response,\n    isAxiosError,\n    message,\n  }: FetcherErrorConstructorInput) {\n    super();\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetcherError);\n    }\n\n    this.name = this.constructor.name;\n    this.code = code;\n    this.request = request;\n    this.isAxiosError = isAxiosError;\n\n    // no response on AxiosError\n    if (!response) {\n      this.message = message;\n      return;\n    }\n\n    this.response = response;\n\n    const { data, status } = response;\n    this.status = status;\n    this.message = isDataWithError(data) ? data.error : message;\n  }\n}\n// to turn `object -> Record` for indexed variable access\nfunction isObject(obj: unknown): obj is Record<string | symbol, any> {\n  return !!obj && typeof obj === 'object';\n}\n\nexport function isDataWithError(data: unknown): data is { error: string } {\n  return isObject(data) && typeof data['error'] === 'string';\n}\n\nexport type ExtractAbiMethodNames<T extends readonly { name: string }[]> =\n  T[number]['name'];\n\n// reduce element[] to Object{key: prop, val?: element}\n// for example\n// gatherObjectsByProp(Token[], token => token.address) => Record<address, Token|undefined>\nexport function gatherObjectsByProp<T>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string\n): Record<string, T>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transfrom: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, U>;\nexport function gatherObjectsByProp<T, U>(\n  elements: T[],\n  pickProp: (elem: T, index: number) => string,\n  transform?: (elem: T, accumElem: U | undefined, index: number) => U\n): Record<string, T> | Record<string, U> {\n  return elements.reduce<Record<string, T> | Record<string, U>>(\n    (accum, element, index) => {\n      const key = pickProp(element, index);\n\n      const accumElem: T | U | undefined = accum[key];\n      const transformedElement = transform\n        ? //                       if transform is available, can only be U | undefined\n          transform(element, accumElem as U | undefined, index)\n        : element;\n\n      accum[key] = transformedElement;\n\n      return accum;\n    },\n    {}\n  );\n}\n\n// checks that array has at least one element\nexport const isFilledArray = <T>(array: T[]): array is [T, ...T[]] => {\n  return array.length > 0;\n};\n\nexport function getRandomInt(): number {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nexport function runOnceAndCache<T, Args extends any[]>(\n  // can pass `(...any[]) => any but null | undefined`\n  func: (...args: Args) => NonNullable<T>\n): (...args: Args) => NonNullable<T> {\n  let result: NonNullable<T>;\n\n  return (...args) => {\n    return result ?? (result = func(...args));\n  };\n}\n","import { API_URL, DEFAULT_VERSION } from '../../constants';\nimport { constructSearchString, runOnceAndCache } from '../../helpers/misc';\nimport type { ConstructFetchInput, Address } from '../../types';\n\nexport type GetSpender = (signal?: AbortSignal) => Promise<Address>;\ntype GetContracts = (signal?: AbortSignal) => Promise<AdaptersContractsResult>;\n\nexport type GetSpenderFunctions = {\n  getSpender: GetSpender;\n  getAugustusSwapper: GetSpender;\n  getAugustusRFQ: GetSpender;\n  getContracts: GetContracts;\n};\n\ninterface AdaptersContractsResult {\n  AugustusSwapper: string;\n  TokenTransferProxy: string;\n  AugustusRFQ: string;\n}\n\nexport const constructGetSpender = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSpenderFunctions => {\n  const search = constructSearchString<{ network: number; version: string }>({\n    network: chainId,\n    version,\n  });\n\n  const fetchURL = `${apiURL}/adapters/contracts${search}` as const;\n\n  const _getContracts: GetContracts = async (signal) => {\n    const data = await fetcher<AdaptersContractsResult>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data;\n  };\n\n  // cached for the same instance of `{getContracts, getSpender, getAugustusSwapper, getAugustusRFQ} = constructGetSpender()`\n  // so should persist across same apiUrl & network\n  const getContracts = runOnceAndCache(_getContracts);\n\n  const getSpender: GetSpender = async (signal) => {\n    const { TokenTransferProxy } = await getContracts(signal);\n    return TokenTransferProxy;\n  };\n\n  const getAugustusSwapper: GetSpender = async (signal) => {\n    const { AugustusSwapper } = await getContracts(signal);\n    return AugustusSwapper;\n  };\n\n  const getAugustusRFQ: GetSpender = async (signal) => {\n    const { AugustusRFQ } = await getContracts(signal);\n    return AugustusRFQ;\n  };\n\n  return { getContracts, getSpender, getAugustusSwapper, getAugustusRFQ };\n};\n","import type { ConstructProviderFetchInput, TxSendOverrides } from '../types';\nimport type { ExtractAbiMethodNames } from '../helpers/misc';\nimport type { Address, PriceString } from './token';\n\n// much smaller than the whole ERC20_ABI\nconst MinERC20Abi = [\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinERC20Abi>;\n\ntype ApproveContractCaller<T> = ConstructProviderFetchInput<\n  T,\n  'transactCall'\n>['contractCaller'];\n\nexport type ApproveToken<T> = (\n  amount: PriceString,\n  tokenAddress: Address,\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\nexport type GetSpenderAsyncOrSync = (\n  signal?: AbortSignal\n) => Address | Promise<Address>;\n\nexport function approveTokenMethodFactory<T>(\n  contractCaller: ApproveContractCaller<T>,\n  getSpender: GetSpenderAsyncOrSync\n): ApproveToken<T> {\n  return async (amount, tokenAddress, overrides = {}, signal) => {\n    const spender = await getSpender(signal);\n\n    const res = await contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinERC20Abi,\n      contractMethod: 'approve',\n      args: [spender, amount],\n      overrides,\n    });\n\n    return res;\n  };\n}\n","import { constructGetSpender } from './spender';\nimport type {\n  ConstructProviderFetchInput,\n  TxSendOverrides,\n  Address,\n  PriceString,\n} from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\n\ntype ApproveTokenBulk<T> = (\n  amount: PriceString,\n  tokenAddresses: Address[],\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<Awaited<T>[]>;\n\nexport type ApproveTokenFunctions<T> = {\n  approveToken: ApproveToken<T>;\n  approveTokenBulk: ApproveTokenBulk<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveToken = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenFunctions<T> => {\n  // getSpender is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getSpender } = constructGetSpender(options);\n\n  const approveToken: ApproveToken<T> = approveTokenMethodFactory<T>(\n    options.contractCaller,\n    getSpender\n  );\n\n  const approveTokenBulk: ApproveTokenBulk<T> = async (\n    amount,\n    tokenAddresses,\n    overrides,\n    signal\n  ) => {\n    return Promise.all(\n      tokenAddresses.map((tokenAddress) =>\n        approveToken(amount, tokenAddress, overrides, signal)\n      )\n    );\n  };\n\n  return { approveToken, approveTokenBulk };\n};\n","import type { MarkOptional } from 'ts-essentials';\n\n/**\n * @type hex token or account address\n */\nexport type Address = string;\n/**\n * @type hex token address or token symbol\n */\nexport type AddressOrSymbol = string;\n/**\n * @type number in string form\n */\nexport type PriceString = string;\n/**\n * @type transaction hash\n */\nexport type TxHash = string;\n\n// @TODO sync with what it actually is\nexport type LendingToken =\n  | 'cToken'\n  | 'iToken'\n  | 'aToken'\n  | 'aToken2'\n  | 'idleToken'\n  | 'Chai'\n  | 'bDAI';\n\nexport type TokenType = 'ETH' | 'ERC20' | 'SYNTH';\n\n/**\n * @type Token object returned from API used internally in API\n */\n// consider if need the old class Token for backwards compatipility\n// otherwise no real need\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol?: string | undefined;\n  tokenType: LendingToken | TokenType;\n  mainConnector: string;\n  connectors: string[];\n  network: number;\n  img?: string | undefined;\n  allowance?: string | undefined;\n  balance?: string | undefined;\n};\n\ntype ConstructTokenInput = MarkOptional<\n  Token,\n  // these props are constructed from other, required props\n  'tokenType' | 'mainConnector' | 'connectors' | 'network'\n>;\n\nexport const constructToken = (tokenProps: ConstructTokenInput): Token => {\n  const {\n    tokenType = 'ERC20',\n    mainConnector = 'ETH',\n    connectors: connectorsInput = [],\n    network = 1,\n    ...rest\n  } = tokenProps;\n\n  const connectors: Token['connectors'] =\n    connectorsInput.length > 0 ? connectorsInput : [mainConnector];\n\n  return {\n    tokenType,\n    connectors,\n    mainConnector,\n    network,\n    ...rest,\n  };\n};\n","import { API_URL } from '../../constants';\nimport {\n  Token,\n  Address,\n  constructToken,\n  AddressOrSymbol,\n} from '../../helpers/token';\nimport type {\n  ConstructFetchInput,\n  TokenApiResponse,\n  TokensApiResponse,\n} from '../../types';\n\ntype GetBalances = (\n  userAddress: Address,\n  signal?: AbortSignal\n) => Promise<Token[]>;\ntype GetBalance = (\n  userAddress: Address,\n  tokenAddressOrSymbol: AddressOrSymbol,\n  signal?: AbortSignal\n) => Promise<Token | typeof NOT_FOUND_RESPONSE>;\n\nexport interface Allowance {\n  tokenAddress: Address;\n  allowance: string;\n}\n\ntype GetAllowances = (\n  userAddress: Address,\n  tokenAddresses: Address[],\n  signal?: AbortSignal\n) => Promise<Allowance[]>;\ntype GetAllowance = (\n  userAddress: Address,\n  tokenAddress: Address,\n  signal?: AbortSignal\n) => Promise<Allowance | typeof NOT_FOUND_RESPONSE>;\n\nexport const isAllowance = (\n  arg: Awaited<ReturnType<GetAllowance>>\n): arg is Allowance => {\n  return 'allowance' in arg;\n};\n\nexport type GetBalancesFunctions = {\n  getBalance: GetBalance;\n  getBalances: GetBalances;\n  getAllowance: GetAllowance;\n  getAllowances: GetAllowances;\n};\n\nconst NOT_FOUND_RESPONSE = { message: 'Not Found' } as const;\n\nexport const constructGetBalances = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetBalancesFunctions => {\n  const tokensUrl = `${apiURL}/users/tokens/${chainId}` as const;\n\n  const getBalances: GetBalances = async (userAddress, signal) => {\n    const fetchURL = `${tokensUrl}/${userAddress}` as const;\n\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n\n    return tokens;\n  };\n\n  const getBalance: GetBalance = async (\n    userAddress,\n    tokenAddressOrSymbol,\n    signal\n  ) => {\n    const fetchURL =\n      `${tokensUrl}/${userAddress}/${tokenAddressOrSymbol}` as const;\n\n    const data = await fetcher<TokenApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    if (!data.token) {\n      return NOT_FOUND_RESPONSE;\n    }\n\n    return constructToken(data.token);\n  };\n\n  const getAllowances: GetAllowances = async (\n    userAddress,\n    tokenAddresses,\n    signal\n  ) => {\n    const tokenAddressesLowercaseSet = new Set(\n      tokenAddresses.map((address) => address.toLowerCase())\n    );\n\n    const balances = await getBalances(userAddress, signal);\n\n    const allowances: Allowance[] = balances\n      .filter((token) =>\n        tokenAddressesLowercaseSet.has(token.address.toLowerCase())\n      )\n      .map(({ address, allowance = '0' }) => ({\n        tokenAddress: address,\n        allowance,\n      }));\n\n    return allowances;\n  };\n\n  const getAllowance: GetAllowance = async (\n    userAddress,\n    tokenAddress,\n    signal\n  ) => {\n    const balanceOrNotFound = await getBalance(\n      userAddress,\n      tokenAddress,\n      signal\n    );\n\n    if ('message' in balanceOrNotFound) {\n      return balanceOrNotFound;\n    }\n\n    const { address, allowance = '0' } = balanceOrNotFound;\n\n    return { tokenAddress: address, allowance };\n  };\n\n  return {\n    getBalance,\n    getBalances,\n    getAllowance,\n    getAllowances,\n  };\n};\n","import type { ConstructFetchInput, ParaSwapVersionUnion } from '../../types';\nimport { constructSearchString } from '../../helpers/misc';\nimport { API_URL, DEFAULT_VERSION } from '../../constants';\n\ntype AdaptersAsStrings = string[];\n\nexport type GetAdaptersFunctions = {\n  getAdapters: (signal?: AbortSignal) => Promise<AdaptersAsStrings>;\n};\n\ntype SearchStringParams = {\n  network: number;\n  version?: ParaSwapVersionUnion;\n};\n\nexport const constructGetAdapters = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetAdaptersFunctions => {\n  const getAdapters: GetAdaptersFunctions['getAdapters'] = async (\n    signal?: AbortSignal\n  ): Promise<AdaptersAsStrings> => {\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const query = constructSearchString<SearchStringParams>({\n      network: chainId,\n      version,\n    });\n\n    const fetchURL = `${apiURL}/adapters/list${query}` as const;\n\n    const data = await fetcher<AdaptersAsStrings>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data;\n  };\n\n  return { getAdapters };\n};\n","import type { PickKeys } from 'ts-essentials';\nimport type { RateOptions } from '../rates';\n\ntype StringArrKeys = PickKeys<RateOptions, string[] | undefined>;\n\ntype MinRateOptionsInput = Pick<RateOptions, StringArrKeys> &\n  Pick<RateOptions, 'partner'>;\n\ntype NormalizedRateOptions<\n  O extends MinRateOptionsInput,\n  T extends { options?: Partial<O> }\n> = Partial<Record<StringArrKeys | 'partner', string>> &\n  Partial<Omit<O, StringArrKeys | 'partner'>> &\n  Omit<T, 'options'>;\n\nconst DEFAULT_PARTNER = 'paraswap.io';\n\nexport function normalizeRateOptions<\n  O extends MinRateOptionsInput,\n  T extends { options?: Partial<O> }\n>({ options = {}, ...restInput }: T): NormalizedRateOptions<O, T> {\n  const {\n    excludePricingMethods,\n    excludeContractMethods,\n    includeContractMethods,\n    partner = DEFAULT_PARTNER,\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    ...restOptions\n  } = options;\n\n  const [\n    _includeDEXS,\n    _excludeDEXS,\n    _excludePools,\n    _excludePricingMethods,\n    _excludeContractMethods,\n    _includeContractMethods,\n  ] = [\n    includeDEXS,\n    excludeDEXS,\n    excludePools,\n    excludePricingMethods,\n    excludeContractMethods,\n    includeContractMethods,\n    //                                                                                              no \"\" empty string\n  ].map((array) => array?.join(',') || undefined);\n\n  const transformed: Partial<Record<StringArrKeys | 'partner', string>> = {\n    excludePricingMethods: _excludePricingMethods,\n    excludeContractMethods: _excludeContractMethods,\n    includeContractMethods: _includeContractMethods,\n    partner,\n    includeDEXS: _includeDEXS,\n    excludeDEXS: _excludeDEXS,\n    excludePools: _excludePools,\n  };\n\n  return { ...transformed, ...restOptions, ...restInput };\n}\n","import { ContractMethod, API_URL, DEFAULT_VERSION } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type {\n  ConstructFetchInput,\n  PriceRouteApiResponse,\n  Address,\n  AddressOrSymbol,\n  PriceString,\n  OptimalRate,\n} from '../../types';\nimport { normalizeRateOptions } from './helpers/normalizeRateOptions';\n\n// TODO: This is legacy and can be removed\nexport enum PricingMethod {\n  megapath = 'megapath',\n  multipath = 'multipath',\n  simplepath = 'simplepath',\n}\n\ntype RateQueryParams = {\n  /**\n   * @description Source Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  srcToken: string;\n\n  /**\n   * @description Source Token Decimals. (Can be omitted if Token Symbol is used in `srcToken`).\n   */\n  srcDecimals?: number;\n\n  /**\n   * @description Destination Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  destToken: string;\n\n  /**\n   * @description srcToken amount (in case of SELL) or destToken amount (in case of BUY). The amount should be in **WEI/Raw units** (eg. 1WBTC -> 100000000).\n   */\n  amount: string;\n\n  /**\n   * @description **SELL** or **BUY**. Default: `SELL`.\n   */\n  side?: 'SELL' | 'BUY';\n\n  /**\n   * @description Network ID. (Mainnet - 1, Optimism - 10, BSC - 56, Polygon - 137, Fantom - 250, zkEVM - 1101, Base - 8453, Arbitrum - 42161, Avalanche - 43114). Default: `1`.\n   */\n  network?: number;\n\n  /**\n   * @description If provided, **others** object is filled in the response with price quotes from other exchanges _(if available for comparison)_. Default: `false`.\n   */\n  otherExchangePrices?: boolean;\n\n  /**\n   * @description Comma Separated List of DEXs to include. **Supported DEXs:** UniswapV2, UniswapV3, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, Balancer, MakerDAO, Chai, Aave, Aave2 and more. You can view all currently supported dexes filtered by chain [here](https://api.paraswap.io/adapters/list/1) eg: `UniswapV3,MakerDAO`.\n   */\n  includeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to include in pricing (without spaces). View the list of the supported methods for [V5](https://developers.paraswap.network/api/master/api-v5#supported-methods) and [V6](https://developers.paraswap.network/api/master/api-v6.2#supported-methods) eg: `swapExactAmountIn,swapExactAmountInOnUniswapV2`.\n   */\n  includeContractMethods?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to exclude from pricing (without spaces). View the list of the supported methods for [V5](https://developers.paraswap.network/api/master/api-v5#supported-methods) and [V6](https://developers.paraswap.network/api/master/api-v6.2#supported-methods).\n   */\n  excludeContractMethods?: string;\n\n  /**\n   * @description User's Wallet Address.\n   */\n  userAddress?: string;\n\n  /**\n   * @description Dash (-) separated list of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string;\n\n  /**\n   * @description Partner string.\n   */\n  partner?: string;\n\n  /**\n   * @description Destination Token Decimals. (Can be omitted if Token Symbol is used in `destToken`).\n   */\n  destDecimals?: number;\n\n  /**\n   * @description In %. It's a way to bypass the API price impact check (default = 15%).\n   */\n  maxImpact?: number;\n\n  /**\n   * @description Receiver's Wallet address. (Can be omitted if swapping tokens from and to same account).\n   */\n  receiver?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  srcTokenTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  destTokenTransferFee?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.\n   */\n  srcTokenDexTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs, not on ordinary transfers.\n   */\n  destTokenDexTransferFee?: string;\n\n  /**\n   * @description To specify the protocol version. **Values:** 5 or 6.2 **Default**: 5.\n   */\n  version?: number | string;\n\n  /**\n   * @description Specify that methods without fee support should be excluded from the price route. Default: `false`.\n   */\n  excludeContractMethodsWithoutFeeModel?: boolean;\n\n  /**\n   * @description If tokens USD prices are not available, `Bad USD Price` error will be thrown. Use this param to skip this check. Default: `false`.\n   */\n  ignoreBadUsdPrice?: boolean;\n  /**\n   * @description \tExclude all RFQs from pricing, e.g.: AugustusRFQ, Hashflow. Default: false\n   */\n  excludeRFQ?: boolean;\n};\n\n// more details in the docs https://developers.paraswap.network/api/get-rate-for-a-token-pair#query-parameters\nexport type RateOptions = {\n  excludeDEXS?: string[];\n  includeDEXS?: string[];\n  excludePools?: string[];\n  excludePricingMethods?: PricingMethod[];\n  excludeContractMethods?: ContractMethod[];\n  includeContractMethods?: ContractMethod[];\n  partner?: string;\n  /** @description In %. It's a way to bypass the API price impact check (default = 15%) */\n  maxImpact?: number;\n  maxUSDImpact?: number;\n  otherExchangePrices?: boolean;\n  /** @description proceed with priceRoute building even when tokens don't have USD price. Default: false */\n  ignoreBadUsdPrice?: boolean;\n  /** @description Exclude all RFQs from pricing, e.g.: AugustusRFQ, Hashflow. Default: false */\n  excludeRFQ?: boolean;\n  /** @description \tSpecify that methods without fee support should be excluded from the price route. Default: false */\n  excludeContractMethodsWithoutFeeModel?: boolean;\n  /** @description If the source token is a tax token, you should specify the tax amount in BPS.  */\n  srcTokenTransferFee?: string;\n  /** @description If the destination token is a tax token, you should specify the tax amount in BPS.  */\n  destTokenTransferFee?: string;\n  /** @description Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.  */\n  srcTokenDexTransferFee?: string;\n  /** @description Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.  */\n  destTokenDexTransferFee?: string;\n};\n\ntype CommonGetRateInput = {\n  amount: PriceString;\n  userAddress?: Address;\n  side?: 'SELL' | 'BUY';\n  options?: RateOptions;\n  srcDecimals?: number;\n  destDecimals?: number;\n};\n\nexport type GetRateInput = CommonGetRateInput & {\n  srcToken: AddressOrSymbol;\n  destToken: AddressOrSymbol;\n};\n\nexport type GetRate = (\n  options: GetRateInput,\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\ntype GetRateByRouteInput = CommonGetRateInput & {\n  route: AddressOrSymbol[];\n};\n\ntype GetRateByRoute = (\n  options: GetRateByRouteInput,\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\nexport type GetRateFunctions = {\n  getRate: GetRate;\n  getRateByRoute: GetRateByRoute;\n};\nconst INVALID_ROUTE = 'Invalid Route';\n\nexport const constructGetRate = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetRateFunctions => {\n  const pricesUrl = `${apiURL}/prices` as const;\n\n  const getRate: GetRate = async ({ srcToken, destToken, ...rest }, signal) => {\n    const parsedOptions = normalizeRateOptions(rest);\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<Omit<RateQueryParams, 'route'>>({\n      srcToken,\n      destToken,\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data.priceRoute;\n  };\n\n  const getRateByRoute: GetRateByRoute = async ({ route, ...rest }, signal) => {\n    if (route.length < 2) {\n      throw new Error(INVALID_ROUTE);\n    }\n\n    const parsedOptions = normalizeRateOptions(rest);\n\n    const _route = route.join('-');\n\n    const search = constructSearchString<\n      Omit<RateQueryParams, 'srcToken' | 'destToken'>\n    >({\n      route: _route, // route can be used in place of srcToken+destToken\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<PriceRouteApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data.priceRoute;\n  };\n\n  return {\n    getRate,\n    getRateByRoute,\n  };\n};\n","import { ContractMethod, API_URL, DEFAULT_VERSION } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { ConstructFetchInput, SwapApiResponse } from '../../types';\nimport { normalizeRateOptions } from './helpers/normalizeRateOptions';\n\n/**\n * Types for transaction parameters.\n */\ntype SwapQueryParams = {\n  /**\n   * @description Source Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  srcToken: string;\n\n  /**\n   * @description Source Token Decimals. (Can be omitted if Token Symbol is used in `srcToken`).\n   */\n  srcDecimals?: number;\n\n  /**\n   * @description Destination Token Address. Instead, **Token Symbol** could be used for tokens listed in the `/tokens` endpoint.\n   */\n  destToken: string;\n\n  /**\n   * @description srcToken amount (in case of SELL) or destToken amount (in case of BUY). The amount should be in **WEI/Raw units** (eg. 1WBTC -> 100000000).\n   */\n  amount: string;\n\n  /**\n   * @description **SELL** or **BUY**. Default: `SELL`.\n   */\n  side: 'SELL' | 'BUY';\n\n  /**\n   * @description Network ID. (Mainnet - 1, Optimism - 10, BSC - 56, Polygon - 137, Fantom - 250, zkEVM - 1101, Base - 8453, Arbitrum - 42161, Avalanche - 43114). Default: `1`.\n   */\n  network?: number;\n\n  /**\n   * @description Comma Separated List of DEXs to include. **Supported DEXs:** Uniswap, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, 0x, MakerDAO, Chai, Aave, Aave2, MultiPath, MegaPath, Curve, Curve3, Saddle, IronV2, BDai, idle, Weth, Beth, UniswapV2, Balancer, 0xRFQt, SushiSwap, LINKSWAP, Synthetix, DefiSwap, Swerve, CoFiX, Shell, DODOV1, DODOV2, OnChainPricing, PancakeSwap, PancakeSwapV2, ApeSwap, Wbnb, acryptos, streetswap, bakeryswap, julswap, vswap, vpegswap, beltfi, ellipsis, QuickSwap, COMETH, Wmatic, Nerve, Dfyn, UniswapV3, Smoothy, PantherSwap, OMM1, OneInchLP, CurveV2, mStable, WaultFinance, MDEX, ShibaSwap, CoinSwap, SakeSwap, JetSwap, Biswap, BProtocol eg: `UniswapV3,0x`.\n   */\n  includeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to include without spaces. **Available values:** swapOnUniswap, buyOnUniswap, swapOnUniswapFork, buyOnUniswapFork, swapOnUniswapV2Fork, buyOnUniswapV2Fork, simpleBuy, simpleSwap, multiSwap, megaSwap, protectedMultiSwap, protectedMegaSwap, protectedSimpleSwap, protectedSimpleBuy, swapOnZeroXv2, swapOnZeroXv4, buy. eg: `simpleSwap,multiSwap`.\n   */\n  includeContractMethods?: string;\n\n  /**\n   * @description Comma Separated List of Contract Methods to exclude without spaces. (from the list of contract methods mentioned above).\n   */\n  excludeContractMethods?: string;\n\n  /**\n   * @description User's Wallet Address.\n   */\n  userAddress: string;\n\n  /**\n   * @description Dash (-) separated list of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string;\n\n  /**\n   * @description Partner string.\n   */\n  partner?: string;\n\n  /**\n   * @description If provided it is used together with `partnerAddress`. Should be in basis points percentage. Look at `slippage` parameter description for understanding better. Eg: `200` (for 2% fee percent). Fees have to be claimed from the Fee Claimer contract unless `_isSurplusToUser_` or `_isDirectFeeTransfer_` are used.\n   */\n  partnerFeeBps?: string;\n\n  /**\n   * @description Address that will be entitled to claim fees or surplus. Fees have to be claimed from the Fee Claimer contract unless `_isSurplusToUser_` or `_isDirectFeeTransfer_` are used.\n   */\n  partnerAddress?: string;\n\n  /**\n   * @description Allowed slippage percentage represented in basis points. _Eg:_ for **2.5%** slippage, set the value to **2.5 \\* 100 = 250**; for 10% = 1000.\n   */\n  slippage: number;\n\n  /**\n   * @description Destination Token Decimals. (Can be omitted if Token Symbol is used in `destToken`).\n   */\n  destDecimals?: number;\n\n  /**\n   * @description In %. It's a way to bypass the API price impact check (default = 15%).\n   */\n  maxImpact?: number;\n\n  /**\n   * @description Receiver's Wallet address. (Can be omitted if swapping tokens from and to same account).\n   */\n  receiver?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  srcTokenTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. For example: for a token with a 5% tax, you should set it to 500 as `[(500/10000)*100=5%]`. Note: not all DEXs and contract methods support trading tax tokens, so we will filter those that don't.\n   */\n  destTokenTransferFee?: string;\n\n  /**\n   * @description If the source token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs and not on ordinary transfers.\n   */\n  srcTokenDexTransferFee?: string;\n\n  /**\n   * @description If the destination token is a tax token, you should specify the tax amount in BPS. Some tokens only charge tax when swapped in/out DEXs, not on ordinary transfers.\n   */\n  destTokenDexTransferFee?: string;\n\n  /**\n   * @description To specify the protocol version. **Values:** 5 or 6.2 **Default**: 5.\n   */\n  version?: number | string;\n\n  /**\n   * @description If tokens USD prices are not available, `Bad USD Price` error will be thrown. Use this param to skip this check. Default: `false`.\n   */\n  ignoreBadUsdPrice?: boolean;\n\n  /**\n   * @description Specify if user should receive surplus instead of partner. Default: `false`.\n   */\n  isSurplusToUser?: boolean;\n\n  /**\n   * @description Specify if fees should be sent directly to the partner instead of registering them on FeeClaimer. Default: `false`.\n   */\n  isDirectFeeTransfer?: boolean;\n\n  /**\n   * @description Allows for capping the surplus at 1% maximum. Default: `true`.\n   */\n  isCapSurplus?: boolean;\n\n  /**\n   * @description Allows to collect surplus. Works with `partnerAddress`. Default: `false`.\n   */\n  takeSurplus?: boolean;\n};\n\ntype SwapTxInputFields =\n  | 'srcToken'\n  | 'destToken'\n  | 'amount'\n  | 'side'\n  | 'srcDecimals'\n  | 'destDecimals'\n  | 'userAddress'\n  | 'slippage';\ntype SwapTxInputListFields =\n  | 'includeDEXS'\n  | 'excludeDEXS'\n  | 'includeContractMethods'\n  | 'excludeContractMethods'\n  | 'route';\n\ntype SwapRateOptions = Omit<\n  SwapQueryParams,\n  SwapTxInputFields | SwapTxInputListFields | 'network' | 'version'\n> & {\n  /**\n   * @description List of DEXs to include. **Supported DEXs:** Uniswap, Kyber, Bancor, AugustusRFQ, Oasis, Compound, Fulcrum, 0x, MakerDAO, Chai, Aave, Aave2, MultiPath, MegaPath, Curve, Curve3, Saddle, IronV2, BDai, idle, Weth, Beth, UniswapV2, Balancer, 0xRFQt, SushiSwap, LINKSWAP, Synthetix, DefiSwap, Swerve, CoFiX, Shell, DODOV1, DODOV2, OnChainPricing, PancakeSwap, PancakeSwapV2, ApeSwap, Wbnb, acryptos, streetswap, bakeryswap, julswap, vswap, vpegswap, beltfi, ellipsis, QuickSwap, COMETH, Wmatic, Nerve, Dfyn, UniswapV3, Smoothy, PantherSwap, OMM1, OneInchLP, CurveV2, mStable, WaultFinance, MDEX, ShibaSwap, CoinSwap, SakeSwap, JetSwap, Biswap, BProtocol eg: `UniswapV3,0x`.\n   */\n  includeDEXS?: string[];\n\n  /**\n   * @description List of DEXs to exclude. (from the list of DEXs mentioned above).\n   */\n  excludeDEXS?: string[];\n\n  /**\n   * @description List of Contract Methods to include without spaces. **Available values:** swapOnUniswap, buyOnUniswap, swapOnUniswapFork, buyOnUniswapFork, swapOnUniswapV2Fork, buyOnUniswapV2Fork, simpleBuy, simpleSwap, multiSwap, megaSwap, protectedMultiSwap, protectedMegaSwap, protectedSimpleSwap, protectedSimpleBuy, swapOnZeroXv2, swapOnZeroXv4, buy. eg: `simpleSwap,multiSwap`.\n   */\n  includeContractMethods?: ContractMethod[];\n\n  /**\n   * @description List of Contract Methods to exclude without spaces. (from the list of contract methods mentioned above).\n   */\n  excludeContractMethods?: ContractMethod[];\n};\n\ntype SwapTxInput = Pick<SwapQueryParams, SwapTxInputFields> & {\n  /**\n   * @description List of tokens (addresses or symbols from `/tokens`) to comprise the price route. _Max 4 tokens._ _**\\*Note:**_ _If_ `_route_` _is specified, the response will only comprise of the route specified which might not be the optimal route._\n   */\n  route?: string[];\n\n  options?: SwapRateOptions;\n};\n\nexport type SwapTxResult = SwapApiResponse;\n\nexport type GetSwapTxData = (\n  options: SwapTxInput,\n  signal?: AbortSignal\n) => Promise<SwapTxResult>;\n\nexport type GetSwapTxFunctions = {\n  getSwapTxData: GetSwapTxData;\n};\n\nexport const constructSwapTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetSwapTxFunctions => {\n  const pricesUrl = `${apiURL}/swap` as const;\n\n  const getSwapTxData: GetSwapTxData = async (\n    { srcToken, destToken, amount, route, ...rest },\n    signal\n  ) => {\n    const parsedOptions = normalizeRateOptions(rest);\n\n    const _route = route?.join('-');\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SwapQueryParams>({\n      amount,\n      srcToken,\n      destToken,\n      route: _route,\n      network: chainId,\n      version,\n      ...parsedOptions,\n    });\n\n    const fetchURL = `${pricesUrl}/${search}` as const;\n\n    const data = await fetcher<SwapApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return data;\n  };\n\n  return {\n    getSwapTxData,\n  };\n};\n","import { API_URL } from '../../constants';\nimport { constructToken } from '../../helpers/token';\nimport type {\n  ConstructFetchInput,\n  Token,\n  TokensApiResponse,\n} from '../../types';\n\ntype GetTokens = (signal?: AbortSignal) => Promise<Token[]>;\n\nexport type GetTokensFunctions = {\n  getTokens: GetTokens;\n};\n\nexport const constructGetTokens = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetTokensFunctions => {\n  const fetchURL = `${apiURL}/tokens/${chainId}` as const;\n\n  const getTokens: GetTokens = async (signal) => {\n    const data = await fetcher<TokensApiResponse>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    const tokens = data.tokens.map(constructToken);\n    return tokens;\n  };\n\n  return { getTokens };\n};\n","import type {\n  TypedDataDomain as EthersTypedDataDomain,\n  TypedDataField,\n} from '@ethersproject/abstract-signer';\n\nexport const name = 'AUGUSTUS RFQ';\nexport const version = '1';\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\ntype TypedDataDomain = Omit<EthersTypedDataDomain, 'chainId'> & {\n  chainId: number;\n};\n\nexport type SignableTypedData = {\n  types: Record<string, TypedDataField[]>;\n  domain: TypedDataDomain;\n  data: Record<string, any>;\n};\n\nexport type Domain = {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n};\n","import type { LimitOrderFromApi } from '../../limitOrders/helpers/types';\nimport { ZERO_ADDRESS } from './buildOrderData';\nimport type { OrderType } from './types';\n\ntype GetBaseFetchUrlInput = {\n  apiURL: string;\n  chainId: number;\n};\n\nexport type BaseFetchUrlInputConstructor<Kind extends OrderKind> = (\n  params: GetBaseFetchUrlInput\n) => UrlByTypeFunction<Kind>;\n\ntype OrderType2URLPart = {\n  LIMIT: 'orders';\n  P2P: 'p2p';\n};\n\ntype OrderKind = 'nft' | 'ft';\n\nexport type BaseFetchUrl<\n  Kind extends OrderKind,\n  Type extends OrderType = OrderType\n> = `${string}/${Kind}/${OrderType2URLPart[Type]}/${number}`;\n\nexport type MinFetchUrl<Kind extends OrderKind> = `${string}/${Kind}/order`;\nexport type OrderFillableBalanceFetchUrl<Kind extends OrderKind> =\n  `${string}/${Kind}/fillablebalance/${number}`;\n\ninterface UrlByTypeFunction<Kind extends OrderKind> {\n  (): MinFetchUrl<Kind>;\n  (type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n  (type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n  (type: OrderType): BaseFetchUrl<Kind>;\n  (type: 'fillablebalance'): OrderFillableBalanceFetchUrl<Kind>;\n  (type?: OrderType | 'fillablebalance'):\n    | BaseFetchUrl<Kind>\n    | MinFetchUrl<Kind>\n    | OrderFillableBalanceFetchUrl<Kind>;\n}\n\nexport function baseFetchUrlGetterFactory<Kind extends OrderKind>(\n  orderKind: Kind\n): BaseFetchUrlInputConstructor<Kind> {\n  return function constructBaseFetchUrlGetter({\n    chainId,\n    apiURL,\n  }: GetBaseFetchUrlInput): UrlByTypeFunction<Kind> {\n    function urlGetter(type: 'LIMIT'): BaseFetchUrl<Kind, 'LIMIT'>;\n    function urlGetter(type: 'P2P'): BaseFetchUrl<Kind, 'P2P'>;\n    function urlGetter(type: OrderType): BaseFetchUrl<Kind>;\n    function urlGetter(\n      type: 'fillablebalance'\n    ): OrderFillableBalanceFetchUrl<Kind>;\n    function urlGetter(): MinFetchUrl<Kind>;\n    function urlGetter(\n      type?: OrderType | 'fillablebalance'\n    ):\n      | BaseFetchUrl<Kind>\n      | MinFetchUrl<Kind>\n      | OrderFillableBalanceFetchUrl<Kind> {\n      if (!type) return `${apiURL}/${orderKind}/order` as const;\n\n      if (type === 'fillablebalance')\n        return `${apiURL}/${orderKind}/fillablebalance/${chainId}` as const;\n\n      const orderURLpart = type === 'LIMIT' ? 'orders' : 'p2p';\n      return `${apiURL}/${orderKind}/${orderURLpart}/${chainId}` as const;\n    }\n\n    return urlGetter;\n  };\n}\n\n// orders with taker = EOA address\n// that can't be filled through AugustusSwapper,\n// only through AugustusRFQ\nexport function isOrderFillableDirectlyOnRFQOnly(\n  order: Pick<LimitOrderFromApi, 'taker' | 'takerFromMeta'>\n): boolean {\n  // with 0x taker fillable by anyone\n  if (order.taker === ZERO_ADDRESS) return false;\n\n  // same intended EOA taker and msg.sender taker\n  return order.taker.toLowerCase() === order.takerFromMeta.toLowerCase();\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n  OrderFillableBalanceFetchUrl,\n} from '../../common/orders/misc';\nimport type { OrderData } from './buildOrderData';\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset,\n  takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n}: OrderData & Record<string, any>): OrderData {\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n}\n\n/* \nGET\n/ft/orders/:chainId/maker/:walletAddress\n/ft/orders/:chainId/taker/:walletAddress\n/ft/p2p/:chainId/maker/:walletAddress\n/ft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'ft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/ft/fillablebalance/:chainId/:walletAddress/:makerAsset?\n*/\nexport type GetRequiredAllowanceURL =\n  `${OrderFillableBalanceFetchUrl<'ft'>}/${string}${`/${string}` | ''}`;\n\n/*\nGET\n/ft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'ft'>}/${string}`;\n\n/* \nPOST create order\n/ft/orders/:chainId/\n/ft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'ft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'ft'> =\n  baseFetchUrlGetterFactory('ft');\n","import type { Address } from '../../../types';\nimport type { AssetTypeVariant } from './types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\nimport { getRandomInt } from '../../../helpers/misc';\n\nconst OrderNFT = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'uint256' },\n  { name: 'makerAssetId', type: 'uint256' },\n  { name: 'takerAsset', type: 'uint256' },\n  { name: 'takerAssetId', type: 'uint256' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildNFTOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  makerAssetId: string; // required when BUYing NFT\n  /** @description NFT Token id, will default to 0 (ERC20), provide for NFT */\n  takerAssetId?: string;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  makerAssetType: AssetTypeVariant;\n  /** @description Token type: ERC20 = 0, ERC1155 = 1, ERC721 = 2 */\n  takerAssetType: AssetTypeVariant;\n  maker: Address;\n  // OrderData.taker must be Augustus for p2p limitOrders to involve swap through Augustus\n  // this is the actual user taker which will go into nonceAndMeta\n  taker?: Address;\n  AugustusAddress: Address;\n}\n\nexport type SignableNFTOrderData = {\n  types: { OrderNFT: typeof OrderNFT };\n  domain: Domain;\n  data: NFTOrderData;\n};\n\nexport type BigIntAsString = string;\n\nexport type NFTOrderData = {\n  expiry: number;\n  // '1' when trading 1 NFT token\n  makerAmount: BigIntAsString;\n  makerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  makerAssetId: BigIntAsString;\n  // '1' when trading 1 NFT token\n  takerAmount: BigIntAsString;\n  takerAsset: BigIntAsString;\n  // '0' indicates ERC20\n  takerAssetId: BigIntAsString;\n  nonceAndMeta: BigIntAsString;\n  maker: Address;\n  taker: Address;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset: _makerAssetAddress,\n  takerAsset: _takerAssetAddress,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId = '0',\n  makerAssetType,\n  takerAssetType,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus -- taker = Augustus, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus -- taker = Augustus, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS, //@TODO allow Orders outside of AugustusRFQ\n}: BuildNFTOrderDataInput): SignableNFTOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  const makerAsset = assetAddressToUint(_makerAssetAddress, makerAssetType);\n\n  const takerAsset = assetAddressToUint(_takerAssetAddress, takerAssetType);\n\n  const orderNFT: NFTOrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker: AugustusAddress,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n\n  return {\n    types: { OrderNFT },\n    domain: { name, version, chainId, verifyingContract },\n    data: orderNFT,\n  };\n}\n\n// create a packed number that contains assetAddress and AssetType\nexport function assetAddressToUint(\n  assetAddress: Address,\n  assetType: AssetTypeVariant\n): BigIntAsString {\n  return (BigInt(assetAddress) + (BigInt(assetType) << BigInt(160))).toString(\n    10\n  );\n}\n","import {\n  BaseFetchUrl,\n  baseFetchUrlGetterFactory,\n  BaseFetchUrlInputConstructor,\n  MinFetchUrl,\n} from '../../common/orders/misc';\nimport {\n  assetAddressToUint,\n  BuildNFTOrderDataInput,\n  NFTOrderData,\n} from './buildOrderData';\n\n// any number can be assigned to AssetType enum\n// https://github.com/Microsoft/TypeScript/issues/22311\n// export enum AssetType {\n//   ERC20 = 0,\n//   ERC1155 = 1,\n//   ERC721 = 2,\n// }\n\nexport const AssetType = {\n  ERC20: 0,\n  ERC1155: 1,\n  ERC721: 2,\n} as const;\n\nexport function sanitizeOrderData({\n  nonceAndMeta,\n  expiry,\n  makerAsset: _makerAsset,\n  takerAsset: _takerAsset,\n  maker,\n  taker,\n  makerAmount,\n  takerAmount,\n  makerAssetId,\n  takerAssetId,\n  // asset types provided when Order has them ,e.g. got Order by hash from API\n  makerAssetType,\n  takerAssetType,\n}: NFTOrderData &\n  Partial<Pick<BuildNFTOrderDataInput, 'makerAssetType' | 'takerAssetType'>> &\n  Record<string, any>): NFTOrderData {\n  const makerAsset =\n    makerAssetType !== undefined && _makerAsset.startsWith('0x')\n      ? assetAddressToUint(_makerAsset, makerAssetType)\n      : _makerAsset;\n  const takerAsset =\n    takerAssetType !== undefined && _takerAsset.startsWith('0x')\n      ? assetAddressToUint(_takerAsset, takerAssetType)\n      : _takerAsset;\n\n  return {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n    makerAssetId,\n    takerAssetId,\n  };\n}\n\n/* \nGET\n/nft/orders/:chainId/maker/:walletAddress\n/nft/orders/:chainId/taker/:walletAddress\n/nft/p2p/:chainId/maker/:walletAddress\n/nft/p2p/:chainId/taker/:walletAddress\n*/\nexport type GetOrdersURLs = `${BaseFetchUrl<'nft'>}/${\n  | 'taker'\n  | 'maker'}/${string}`;\n\n/*\nGET\n/nft/order/:orderHash (get you p2p or orders)\n*/\nexport type GetOrderURL = `${MinFetchUrl<'nft'>}/${string}`;\n\n/* \nPOST create order\n/nft/orders/:chainId/\n/nft/p2p/:chainId/\n*/\nexport type PostOrderURLs = BaseFetchUrl<'nft'>;\n\nexport const constructBaseFetchUrlGetter: BaseFetchUrlInputConstructor<'nft'> =\n  baseFetchUrlGetterFactory('nft');\n","import type { WithGasPrice, WithMaxFee } from '../../gas';\nimport type {\n  ConstructFetchInput,\n  Address,\n  FetcherPostInput,\n  PriceString,\n  OptimalRate,\n} from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport { API_URL, SwapSide } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { OrderData } from '../limitOrders/buildOrder';\nimport { sanitizeOrderData as sanitizeLimitOrderData } from '../limitOrders/helpers/misc';\nimport { sanitizeOrderData as sanitizeNFTOrderData } from '../nftOrders/helpers/misc';\nimport { AssetTypeVariant } from '../nftOrders/helpers/types';\n\nexport interface TransactionParams {\n  to: string;\n  from: string;\n  value: string;\n  data: string;\n  gasPrice: string;\n  gas?: string;\n  chainId: number;\n}\n\nexport type SwappableOrder = OrderData & {\n  permitMakerAsset?: string;\n  signature: string;\n};\n\nexport type SwappableNFTOrder = SwappableOrder & {\n  makerAssetId: string;\n  takerAssetId: string;\n  makerAssetType: AssetTypeVariant;\n  takerAssetType: AssetTypeVariant;\n};\n\n// when priceRoute with side=SELL, slippage can replace destAmount\nexport type TxInputAmountsPartSell = {\n  slippage: number;\n  srcAmount: PriceString;\n  destAmount?: never; // disallowed\n};\n// when priceRoute with side=BUY, slippage can replace srcAmount\nexport type TxInputAmountsPartBuy = {\n  slippage: number;\n  srcAmount?: never; // disallowed\n  destAmount: PriceString;\n};\n// both srcAmount and destAmount can be present in absence of slippage\nexport type TxInputAmountsPartBuyOrSell = {\n  slippage?: never; // disallowed\n  srcAmount: PriceString;\n  destAmount: PriceString;\n};\n\n// more details in the docs https://developers.paraswap.network/api/build-parameters-for-transaction#request-body\nexport type BuildTxInputBase = {\n  srcToken: Address;\n  destToken: Address;\n  userAddress: Address;\n  /** @description Whenever msg.sender (`userAddress`) i.e. address calling the ParaSwap contract is different than the address sending the transaction, `txOrigin` must be passed along with `userAddress` */\n  txOrigin?: string;\n  /** @description used with referral link */\n  referrer?: string;\n  partner?: string;\n  partnerAddress?: string;\n  partnerFeeBps?: number;\n  /** @description If user should receive surplus instead of partner. Default: false */\n  isSurplusToUser?: boolean;\n  /** @description If fees should be sent directly to the partner instead of registering them on FeeClaimer. v6 only. Default: false */\n  isDirectFeeTransfer?: boolean;\n  /** @deprecated Use \"takeSurplus\" instead. Positive slippage goes to user, true by default */\n  positiveSlippageToUser?: boolean;\n  /** @description Set to true to take positive slippage. Works with partnerAddress. Default: false */\n  takeSurplus?: boolean;\n  /** @description Cap the surplus at 1% maximum. Default: true */\n  isCapSurplus?: boolean;\n  receiver?: Address;\n  srcDecimals?: number;\n  destDecimals?: number;\n  permit?: string;\n  deadline?: string;\n};\n\n// for Swap transaction\nexport type BuildSwapTxInput = BuildTxInputBase & {\n  priceRoute: OptimalRate;\n} & (\n    | TxInputAmountsPartSell\n    | TxInputAmountsPartBuy\n    | TxInputAmountsPartBuyOrSell\n  ); // this union doesn't allow to mix srcAmount & destAmount & slippage together\n\n// building block for LimitOrders and NFT Orders swaps\n// can only use priceRoute.side=BUY and related TxInputAmountsPart*\ntype BuildTxInputBaseBUYForOrders<\n  // to Omit extra keys\n  // can't do Omit<> around union, breaks discriminated union\n  K extends keyof TxInputAmountsPartBuy | keyof BuildTxInputBase = never\n> = Omit<BuildTxInputBase, K> &\n  // destAmount is sum(orders[].makerAmount)\n  (| Omit<TxInputAmountsPartBuy, 'destAmount' | K>\n    | Omit<TxInputAmountsPartBuyOrSell, 'destAmount' | K>\n  );\n\n// for LimitOrder Fill, without swap\nexport type BuildLimitOrderTxInput = BuildTxInputBaseBUYForOrders & {\n  orders: SwappableOrder[];\n  srcDecimals: number;\n  destDecimals: number;\n};\n\n// for NFT Order Fill, without swap\nexport type BuildNFTOrderTxInput =\n  // @TODO if NFT can ever be srcToken, change logic\n  //                           for NFT token destDecimals = 0 is acceptable\n  BuildTxInputBaseBUYForOrders<'destDecimals'> & {\n    orders: SwappableNFTOrder[];\n    srcDecimals: number;\n  };\n\nexport interface BuildSwapAndLimitOrderTxInput0\n  // destAmount is sum(orders[].makerAmount)\n  extends Omit<BuildTxInputBase, 'destAmount'> {\n  priceRoute: OptimalRate; // priceRoute.side=BUY\n  orders: SwappableOrder[];\n  destDecimals: number;\n}\n// for Swap + LimitOrder, priceRoute must have side=BUY\nexport type BuildSwapAndLimitOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableOrder[];\n    destDecimals: number;\n  };\n\n// with slippage for a swap and fill - p2p - order, without to fill a p2p order directly with the intended taker asset\n\n// for Swap + NFT Order, priceRoute must have side=BUY\nexport type BuildSwapAndNFTOrderTxInput =\n  // destAmount is sum(orders[].makerAmount)\n  BuildTxInputBaseBUYForOrders & {\n    priceRoute: OptimalRate; // priceRoute.side=BUY & priceRoute.contractMethod=simpleBuy\n    orders: SwappableNFTOrder[];\n  };\n\nexport type BuildTxInput =\n  | BuildSwapTxInput\n  | BuildLimitOrderTxInput\n  | BuildNFTOrderTxInput\n  | BuildSwapAndLimitOrderTxInput\n  | BuildSwapAndNFTOrderTxInput;\n\nexport type BuildOptionsBase = {\n  /** @description Allows the API to skip performing onchain checks such as balances, allowances, as well as transaction simulations. The response does not contain `gas` parameter when set to `true` */\n  ignoreChecks?: boolean;\n  /** @description Allows the API to skip gas checks. The response does not contain `gas` parameter when set to `true` */\n  ignoreGasEstimate?: boolean;\n  /** @description Allows the API to skip performing onchain allowance checks. */\n  ignoreAllowance?: boolean;\n  /** @description Allows the API to return the contract parameters only. */\n  onlyParams?: boolean;\n};\n\nexport type BuildOptionsWithGasPrice = BuildOptionsBase & Partial<WithGasPrice>;\nexport type BuildOptionsWitWithMaxFee = BuildOptionsBase & Partial<WithMaxFee>;\n\nexport type BuildOptions = BuildOptionsWithGasPrice | BuildOptionsWitWithMaxFee;\n\ntype BuildTx = (\n  params: BuildTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\nexport type BuildTxFunctions = {\n  buildTx: BuildTx;\n};\n\ntype SearchStringParams = BuildOptions;\n\nexport const constructBuildTx = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildTxFunctions => {\n  const transactionsURL = `${apiURL}/transactions/${chainId}` as const;\n\n  const buildTx: BuildTx = async (params, options = {}, signal) => {\n    if (\n      'priceRoute' in params &&\n      'destAmount' in params && // isn't provided together with `orders`\n      !('orders' in params) // when present, destAmount becomes sum(orders[].makerAmount)\n    ) {\n      const {\n        priceRoute,\n        priceRoute: { side },\n      } = params;\n      const AmountMismatchError =\n        side === SwapSide.SELL\n          ? 'Source Amount Mismatch'\n          : 'Destination Amount Mismatch';\n\n      // user provides srcAmount or slippage but not both. so we only validate accordingly.\n      assert(\n        areAmountsCorrect({\n          queryParams: params,\n          side,\n          priceRoute,\n        }),\n        AmountMismatchError\n      );\n    }\n\n    // always pass explicit type to make sure UrlSearchParams are correct\n    const search = constructSearchString<SearchStringParams>(options);\n\n    const fetchURL = `${transactionsURL}/${search}` as const;\n\n    const sanitizedParams =\n      'orders' in params && params.orders.length > 0\n        ? {\n            ...params,\n            //  make sure we don't pass more with orders than API expects\n            orders: params.orders.map((order) => {\n              const sanitizedOrderData =\n                'makerAssetId' in order\n                  ? sanitizeNFTOrderData(order) // assetType is provided here, because Order.*Asset may be address\n                  : // if Order received from API by hash\n                    sanitizeLimitOrderData(order);\n\n              const sanitizedOrder: SwappableOrder = {\n                ...sanitizedOrderData,\n                signature: order.signature,\n              };\n\n              if (order.permitMakerAsset) {\n                sanitizedOrder.permitMakerAsset = order.permitMakerAsset;\n              }\n\n              return sanitizedOrder;\n            }),\n          }\n        : params;\n\n    const takeSurplus =\n      params.takeSurplus ??\n      (params.positiveSlippageToUser !== undefined\n        ? !params.positiveSlippageToUser\n        : undefined);\n\n    if ('positiveSlippageToUser' in sanitizedParams) {\n      // positiveSlippageToUser & takeSurplus together will Error in API\n      delete sanitizedParams.positiveSlippageToUser;\n    }\n    if (takeSurplus !== undefined) {\n      sanitizedParams.takeSurplus = takeSurplus;\n    }\n\n    const fetchParams: FetcherPostInput = {\n      url: fetchURL,\n      method: 'POST',\n      data: sanitizedParams,\n      signal,\n    };\n\n    const builtTx = await fetcher<TransactionParams>(fetchParams);\n\n    return builtTx;\n  };\n\n  return { buildTx };\n};\n\ninterface AreAmountsCorrectInput {\n  queryParams: { srcAmount?: string; destAmount?: string; slippage?: number };\n  side: SwapSide;\n  priceRoute: OptimalRate;\n}\n\nfunction areAmountsCorrect({\n  queryParams,\n  side,\n  priceRoute,\n}: AreAmountsCorrectInput): boolean {\n  // return early after a simpler check if the user was swapping before filling\n  if (queryParams.slippage) {\n    return (\n      (side === SwapSide.BUY &&\n        queryParams.destAmount === priceRoute.destAmount) ||\n      (side === SwapSide.SELL && queryParams.srcAmount === priceRoute.srcAmount)\n    );\n  }\n\n  // provided amounts match the previously queried price route\n  const [inputAmount, priceRouteAmount] =\n    side === SwapSide.SELL\n      ? [queryParams.srcAmount, priceRoute.srcAmount]\n      : [queryParams.destAmount, priceRoute.destAmount];\n\n  return inputAmount === priceRouteAmount;\n}\n","import { getRandomInt } from '../../../helpers/misc';\nimport type { Address, ParaSwapVersionUnion } from '../../../types';\nimport {\n  Domain,\n  name,\n  version,\n  ZERO_ADDRESS,\n} from '../../common/orders/buildOrderData';\n\nconst Order = [\n  { name: 'nonceAndMeta', type: 'uint256' },\n  { name: 'expiry', type: 'uint128' },\n  { name: 'makerAsset', type: 'address' },\n  { name: 'takerAsset', type: 'address' },\n  { name: 'maker', type: 'address' },\n  { name: 'taker', type: 'address' },\n  { name: 'makerAmount', type: 'uint256' },\n  { name: 'takerAmount', type: 'uint256' },\n];\n\nexport interface BuildOrderDataInput {\n  chainId: number;\n  verifyingContract: Address;\n  nonce?: number;\n  expiry: number;\n  makerAsset: Address;\n  takerAsset: Address;\n  makerAmount: string;\n  takerAmount: string;\n  maker: Address;\n  // OrderData.taker must be Augustus (or other Executor) for p2p limitOrders to involve swap through Augustus\n  /** @description actual user taker which will go into nonceAndMeta */\n  taker?: Address;\n  /** @description contract executor (Augustus or similar) that is allowed to execute the order, gois in Order.taker */\n  contractTaker?: Address;\n\n  AugustusAddress: Address;\n  AppVersion: ParaSwapVersionUnion;\n}\n\nexport type SignableOrderData = {\n  types: { Order: typeof Order };\n  domain: Domain;\n  data: OrderData;\n};\n\nexport type OrderData = {\n  nonceAndMeta: string;\n  expiry: number;\n  makerAsset: string;\n  takerAsset: string;\n  maker: string;\n  taker: string;\n  makerAmount: string;\n  takerAmount: string;\n};\n\nexport function buildOrderData({\n  chainId,\n  verifyingContract,\n  nonce = getRandomInt(),\n  expiry,\n  makerAsset,\n  takerAsset,\n  makerAmount,\n  takerAmount,\n  maker,\n  AugustusAddress,\n  // if taker is specified -- p2p order for that taker only to fill through Augustus (v5) or direcly (v6)-- taker = Augustus | _taker, takerInNonce = _taker\n  // if taker is not specified -- limitOrder for anyone to fill through Augustus or not -- taker = Zero, takerInNonce = Zero\n  taker: takerInNonce = ZERO_ADDRESS,\n  // if given, overrides the above choices made based on `taker`\n  contractTaker,\n  // for v6 only support taker=_taker for OTC orders\n  AppVersion,\n}: BuildOrderDataInput): SignableOrderData {\n  // first 160 bits is taker address (for p2p orders),\n  // or 0 for limitOrders, so that anyone can be the taker of the Order\n  const nonceAndMeta = (\n    BigInt(takerInNonce) +\n    (BigInt(nonce) << BigInt(160))\n  ).toString(10);\n\n  let taker: string;\n  // contractTaker overrides always\n  if (contractTaker) {\n    taker = contractTaker;\n  } else if (takerInNonce === ZERO_ADDRESS) {\n    // no takerInNonce -> not p2p order -> allow anyone to fill (not only Augustus)\n    taker = ZERO_ADDRESS;\n  } else {\n    // otherwise for p2p order ->\n    if (AppVersion.startsWith('6.')) {\n      //support 6.1+ versions\n\n      // limit taker to EOA for v6 version (no Arbitrary Token Swaps + OTC Fill, or OTC Fill through AugustusSwapper)\n      taker = takerInNonce;\n    } else {\n      // on v5\n      // -> fill through Augustus only\n      taker = AugustusAddress;\n    }\n  }\n\n  const order: OrderData = {\n    nonceAndMeta,\n    expiry,\n    makerAsset,\n    takerAsset,\n    maker,\n    taker,\n    makerAmount,\n    takerAmount,\n  };\n\n  return {\n    types: { Order },\n    domain: { name, version, chainId, verifyingContract },\n    data: order,\n  };\n}\n","import { DEFAULT_VERSION } from '../../constants';\nimport type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildOrderDataInput,\n  SignableOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildLimitOrderInput = Omit<\n  BuildOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress' | 'AppVersion'\n>;\n\ntype BuildLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  signal?: AbortSignal\n) => Promise<SignableOrderData>;\n\nexport type BuildLimitOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildLimitOrder: BuildLimitOrder;\n};\n\nexport const constructBuildLimitOrder = (\n  options: ConstructFetchInput\n): BuildLimitOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildLimitOrder: BuildLimitOrder = async (\n    buildLimitOrderParams,\n    signal\n  ) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(signal);\n\n    const AppVersion = options.version ?? DEFAULT_VERSION;\n\n    return buildOrderData({\n      ...buildLimitOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n      AppVersion,\n    });\n  };\n\n  return {\n    buildLimitOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignLimitOrderFunctions = {\n  signLimitOrder: (signableOrderData: SignableOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignLimitOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignLimitOrderFunctions => {\n  const signLimitOrder: SignLimitOrderFunctions['signLimitOrder'] = (\n    typedData\n  ) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableOrderData = {\n      ...typedData,\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signLimitOrder };\n};\n","import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type { ConstructProviderFetchInput, TxSendOverrides } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\n\ntype CancelOrder<T> = (\n  orderHash: string,\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\ntype CancelOrderBulk<T> = (\n  orderHashes: string[],\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\nexport type CancelLimitOrderFunctions<T> = {\n  cancelLimitOrder: CancelOrder<T>;\n  cancelLimitOrderBulk: CancelOrderBulk<T>;\n};\n\n// much smaller than the whole AugustusRFQ_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'orderHash',\n        type: 'bytes32',\n      },\n    ],\n    name: 'cancelOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'orderHashes',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'cancelOrders',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype AvailableMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructCancelLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const cancelLimitOrder: CancelOrder<T> = async (\n    orderHash,\n    overrides = {},\n    signal\n  ) => {\n    const verifyingContract = await getAugustusRFQ(signal);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrder',\n      args: [orderHash],\n      overrides,\n    });\n\n    return res;\n  };\n\n  const cancelLimitOrderBulk: CancelOrderBulk<T> = async (\n    orderHashes,\n    overrides = {},\n    signal\n  ) => {\n    const verifyingContract = await getAugustusRFQ(signal);\n\n    const res = await options.contractCaller.transactCall<AvailableMethods>({\n      // @CHECK if verifyingContract is the one we need to approve\n      // maybe a Proxy in-between\n      address: verifyingContract,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'cancelOrders',\n      args: [orderHashes],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return {\n    cancelLimitOrder,\n    cancelLimitOrderBulk,\n  };\n};\n","import type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type { ConstructProviderFetchInput, TxSendOverrides } from '../../types';\nimport type { OrderData } from './buildOrder';\nimport { constructGetSpender } from '../swap/spender';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type FillOrderDirectlyFunctions<T> = {\n  fillOrderDirectly: FillOrderDirectly<T>;\n};\n\nexport type FillOrderDirectly<T> = (\n  order: OrderData,\n  signature: string,\n  overrides?: TxSendOverrides,\n  signal?: AbortSignal\n) => Promise<T>;\n\n// much smaller than the whole AugustusRFQ_ABI\nconst MinAugustusRFQAbi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint256',\n            name: 'nonceAndMeta',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint128',\n            name: 'expiry',\n            type: 'uint128',\n          },\n          {\n            internalType: 'address',\n            name: 'makerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'takerAsset',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'maker',\n            type: 'address',\n          },\n          {\n            internalType: 'address',\n            name: 'taker',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'makerAmount',\n            type: 'uint256',\n          },\n          {\n            internalType: 'uint256',\n            name: 'takerAmount',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct AugustusRFQ.Order',\n        name: 'order',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes',\n        name: 'signature',\n        type: 'bytes',\n      },\n    ],\n    name: 'fillOrder',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype FillOrderMethods = ExtractAbiMethodNames<typeof MinAugustusRFQAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport function constructFillOrderDirectly<T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): FillOrderDirectlyFunctions<T> {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const fillOrderDirectly: FillOrderDirectly<T> = async (\n    order,\n    signature,\n    overrides = {},\n    signal\n  ) => {\n    const AugustusRFQ = await getAugustusRFQ(signal);\n\n    const sanitizedOrder = sanitizeOrderData(order);\n\n    const res = await options.contractCaller.transactCall<FillOrderMethods>({\n      address: AugustusRFQ,\n      abi: MinAugustusRFQAbi,\n      contractMethod: 'fillOrder',\n      args: [sanitizedOrder, signature],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { fillOrderDirectly };\n}\n","// @TODO getOrder, getOrders from API\n// onchain from contract can't distinguish between filled or cancelled\nimport { API_URL } from '../../constants';\nimport { constructSearchString } from '../../helpers/misc';\nimport type { Address, ConstructFetchInput } from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n  GetRequiredAllowanceURL as GetRequiredBalanceURL,\n} from './helpers/misc';\nimport type {\n  LimitOrderFromApi,\n  LimitOrdersApiResponse,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PaginationParams = {\n  limit?: number;\n  offset?: number;\n  hideSmallBalances?: boolean;\n  orderBy?: 'createdAt' | 'updatedAt' | 'expiry';\n};\n\n//                     get orders by `maker` or `taker`\nexport type LimitOrdersUserParams = (\n  | { maker: Address; type: LimitOrderType }\n  | { taker: Address; type: LimitOrderType }\n) &\n  PaginationParams;\n\nexport type GetRequiredAllowanceParams = {\n  maker: Address;\n  token?: Address;\n};\n\ntype GetLimitOrderByHash = (\n  orderHash: string,\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\ntype GetLimitOrders = (\n  userParams: LimitOrdersUserParams,\n  signal?: AbortSignal\n) => Promise<LimitOrdersApiResponse>;\n\ntype GetRequiredBalance = (\n  userParams: GetRequiredAllowanceParams,\n  singal?: AbortSignal\n) => Promise<Record<string, string>>;\n\nexport type GetLimitOrdersFunctions = {\n  getLimitOrders: GetLimitOrders;\n  getLimitOrderByHash: GetLimitOrderByHash;\n  /**\n   * Gets fillableBalance for tokens from user's active orders.\n   * User needs to have enough balance & allowance to cover active orders before creating new orders.\n   * @param userParams - parameters to get allowance for active orders\n   * @param {string} userParams.maker - user to get required allowances for\n   * @param {string=} userParams.token - if given `token`, the mapping will contain that token address only\n   * @param {AbortSignal=} signal - AbortSignal passed to fetcher\n   * @returns `{Lowercase<Address> => wei number as string}` mapping of token to fillableBalance\n   */\n  getRequiredBalance: GetRequiredBalance;\n};\n\nexport const constructGetLimitOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetLimitOrdersFunctions => {\n  const getBaseFetchURLByEntityType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getLimitOrders: GetLimitOrders = async (userParams, signal) => {\n    const baseFetchURL = getBaseFetchURLByEntityType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n\n    const { offset, limit, hideSmallBalances, orderBy } = userParams;\n    const search = constructSearchString<PaginationParams>({\n      offset,\n      limit,\n      hideSmallBalances,\n      orderBy,\n    });\n\n    const fetchURL = `${baseFetchURL}/${userURL}${search}` as const;\n\n    const response = await fetcher<LimitOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getRequiredBalance: GetRequiredBalance = async (userParams, signal) => {\n    const baseFetchURL = getBaseFetchURLByEntityType('fillablebalance');\n    const userURL = `${baseFetchURL}/${userParams.maker}` as const;\n    const fetchURL = userParams.token\n      ? (`${userURL}/${userParams.token}` as const)\n      : userURL;\n\n    const response = await fetcher<\n      Record<string, string>,\n      GetRequiredBalanceURL\n    >({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getLimitOrderByHash: GetLimitOrderByHash = async (\n    orderHash,\n    signal\n  ) => {\n    const baseFetchURL = getBaseFetchURLByEntityType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<LimitOrderFromApi, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return order;\n  };\n\n  return {\n    getLimitOrders,\n    getLimitOrderByHash,\n    getRequiredBalance,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  LimitOrderApiResponse,\n  LimitOrderToSend,\n  LimitOrderFromApi,\n  LimitOrderType,\n} from './helpers/types';\n\ntype PostLimitOrder = (\n  limitOrderWithSignatureAndPermit: LimitOrderToSend,\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\n\nexport type PostLimitOrderFunctions = {\n  postLimitOrder: PostLimitOrder;\n  postP2POrder: PostLimitOrder;\n};\n\nexport const constructPostLimitOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostLimitOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    limitOrderWithSignatureAndPermit: LimitOrderToSend,\n    type: LimitOrderType,\n    signal?: AbortSignal\n  ): Promise<LimitOrderFromApi> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    const { order: newOrder } = await fetcher<\n      LimitOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: limitOrderWithSignatureAndPermit,\n      signal,\n    });\n\n    return newOrder;\n  };\n\n  const postLimitOrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(limitOrderWithSignatureAndPermit, 'LIMIT', signal);\n  };\n\n  const postP2POrder: PostLimitOrder = (\n    limitOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(limitOrderWithSignatureAndPermit, 'P2P', signal);\n  };\n\n  return { postLimitOrder, postP2POrder };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport { ApproveToken, approveTokenMethodFactory } from '../../helpers/approve';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetSpender } from '../swap/spender';\n\nexport type ApproveTokenForLimitOrderFunctions<T> = {\n  /** @description approving AugustusRFQ as spender for makerAsset */\n  approveMakerTokenForLimitOrder: ApproveToken<T>;\n  /** @description approving AugustusSwapper as spender for takerAsset for Limit Orders that will be executed through it */\n  approveTakerTokenForLimitOrder: ApproveToken<T>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForLimitOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForLimitOrderFunctions<T> => {\n  // getAugustusRFQ is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getAugustusRFQ } = constructGetSpender(options);\n\n  const approveMakerTokenForLimitOrder: ApproveToken<T> =\n    approveTokenMethodFactory<T>(options.contractCaller, getAugustusRFQ);\n\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveTakerTokenForLimitOrder } =\n    constructApproveToken(options);\n\n  return {\n    approveMakerTokenForLimitOrder,\n    approveTakerTokenForLimitOrder,\n  };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetLimitOrdersContractFunctions = {\n  getLimitOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\nexport const constructGetLimitOrdersContract = (\n  options: ConstructFetchInput\n): GetLimitOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getLimitOrdersContract,\n  } = constructGetSpender(options);\n\n  return { getLimitOrdersContract, getTokenTransferProxy };\n};\n","import type { ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport {\n  API_URL,\n  SwapSide,\n  ContractMethod,\n  DEFAULT_VERSION,\n} from '../../constants';\nimport {\n  BuildLimitOrderTxInput,\n  BuildOptions,\n  BuildSwapAndLimitOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { OrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\n\ntype MinBuildSwapAndLimitOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndLimitOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndLimitOrdersTx = (\n  params: MinBuildSwapAndLimitOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\ntype MinBuildLimitOrderTxInput = Omit<\n  BuildLimitOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildLimitOrdersTx = (\n  params: MinBuildLimitOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\nexport type BuildLimitOrdersTxFunctions = {\n  getLimitOrdersRate: GetLimitOrdersRate;\n  buildLimitOrderTx: BuildLimitOrdersTx;\n  buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx;\n};\n\ntype GetLimitOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\nexport const constructBuildLimitOrderTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildLimitOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    chainId,\n    fetcher,\n    version,\n  });\n\n  const { getRate: getSwapAndLimitOrderRate } = constructGetRate({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow to swap from srcToken to destToken(=order.takerAsset) followed by filling limit orders\n  const getLimitOrdersRate: GetLimitOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    signal\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndLimitOrderRate(rateInput, signal);\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildLimitOrderTx: BuildLimitOrdersTx = (params, options, signal) => {\n    const { makerAsset, takerAsset, totalTakerAmount } = checkAndParseOrders(\n      params.orders\n    );\n\n    const fillParams: BuildLimitOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      // no `slippage` in `params`\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: makerAsset,\n    };\n\n    return buildSwapTx(fillParams, options, signal);\n  };\n\n  const buildSwapAndLimitOrderTx: BuildSwapAndLimitOrdersTx = (\n    params,\n    options,\n    signal\n  ) => {\n    const { makerAsset } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndLimitOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // which is swapped for makerAsset, that would go towards filling the orders\n      destToken: makerAsset,\n      destDecimals: params.priceRoute.destDecimals,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n    };\n\n    return buildSwapTx(fillParams, options, signal);\n  };\n\n  return {\n    getLimitOrdersRate,\n    buildLimitOrderTx,\n    buildSwapAndLimitOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  OrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: OrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset,\n    takerAsset,\n  };\n}\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender } from '../swap/spender';\nimport {\n  buildOrderData,\n  BuildNFTOrderDataInput,\n  SignableNFTOrderData,\n} from './helpers/buildOrderData';\nexport * from './helpers/buildOrderData';\n\nexport type BuildNFTOrderInput = Omit<\n  BuildNFTOrderDataInput,\n  'chainId' | 'verifyingContract' | 'AugustusAddress'\n>;\n\ntype BuildNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  signal?: AbortSignal\n) => Promise<SignableNFTOrderData>;\n\nexport type BuildNFTOrderFunctions = {\n  /** @description Build Orders that will be excuted through AugustusSwapper */\n  buildNFTOrder: BuildNFTOrder;\n};\n\nexport const constructBuildNFTOrder = (\n  options: ConstructFetchInput\n): BuildNFTOrderFunctions => {\n  const { chainId } = options;\n\n  // getContracts is cached internally for the same instance of SDK\n  // so should persist across same apiUrl & network\n  const { getContracts } = constructGetSpender(options);\n\n  const buildNFTOrder: BuildNFTOrder = async (buildNFTOrderParams, signal) => {\n    const { AugustusSwapper: AugustusAddress, AugustusRFQ: verifyingContract } =\n      await getContracts(signal);\n\n    return buildOrderData({\n      ...buildNFTOrderParams,\n      chainId,\n      verifyingContract,\n      AugustusAddress,\n    });\n  };\n\n  return {\n    buildNFTOrder,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { SignableNFTOrderData } from './buildOrder';\nimport { sanitizeOrderData } from './helpers/misc';\n\nexport type SignNFTOrderFunctions = {\n  signNFTOrder: (signableOrderData: SignableNFTOrderData) => Promise<string>;\n};\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructSignNFTOrder = (\n  options: Pick<\n    ConstructProviderFetchInput<any, 'signTypedDataCall'>,\n    'contractCaller'\n  >\n): SignNFTOrderFunctions => {\n  const signNFTOrder: SignNFTOrderFunctions['signNFTOrder'] = (typedData) => {\n    // types allow to pass OrderData & extra_stuff, but tx will break like that\n    const typedDataOnly: SignableNFTOrderData = {\n      ...typedData,\n      // here assetType isn't provided, SignableData must already have corrent BigIntAsString\n      // @TODO consider using `template_${types}` for Address, likely bad idea when considering 3rd-party code\n      data: sanitizeOrderData(typedData.data),\n    };\n    return options.contractCaller.signTypedDataCall(typedDataOnly);\n  };\n\n  return { signNFTOrder };\n};\n","import type { ConstructProviderFetchInput, TxSendOverrides } from '../../types';\nimport { constructCancelLimitOrder } from '../limitOrders/cancelOrder';\n\ntype CancelOrder<T> = (\n  orderHash: string,\n  overrides?: TxSendOverrides\n) => Promise<T>;\n\ntype CancelOrderBulk<T> = (\n  orderHashes: string[],\n  overrides?: TxSendOverrides\n) => Promise<T>;\n\nexport type CancelNFTOrderFunctions<T> = {\n  cancelNFTOrder: CancelOrder<T>;\n  cancelNFTOrderBulk: CancelOrderBulk<T>;\n};\n\n// should work the same as for LimitOrders\nexport const constructCancelNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): CancelNFTOrderFunctions<T> => {\n  const { cancelLimitOrder, cancelLimitOrderBulk } =\n    constructCancelLimitOrder(options);\n  return {\n    cancelNFTOrder: cancelLimitOrder,\n    cancelNFTOrderBulk: cancelLimitOrderBulk,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { Address, ConstructFetchInput } from '../../types';\nimport {\n  constructBaseFetchUrlGetter,\n  GetOrdersURLs,\n  GetOrderURL,\n} from './helpers/misc';\nimport type {\n  NFTOrderFromAPI,\n  NFTOrdersApiResponse,\n  NFTOrderType,\n} from './helpers/types';\n\n//                     get orders by `maker` or `taker`\nexport type NFTOrdersUserParams =\n  | { maker: Address; type: NFTOrderType }\n  | { taker: Address; type: NFTOrderType };\ntype GetNFTOrderByHash = (\n  orderHash: string,\n  signal?: AbortSignal\n) => Promise<NFTOrderFromAPI>;\ntype GetNFTOrders = (\n  userParams: NFTOrdersUserParams,\n  signal?: AbortSignal\n) => Promise<NFTOrdersApiResponse>;\n\nexport type GetNFTOrdersFunctions = {\n  getNFTOrders: GetNFTOrders;\n  getNFTOrderByHash: GetNFTOrderByHash;\n};\n\nexport const constructGetNFTOrders = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): GetNFTOrdersFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const getNFTOrders: GetNFTOrders = async (userParams, signal) => {\n    const baseFetchURL = getBaseFetchURLByOrderType(userParams.type);\n    const userURL =\n      'maker' in userParams\n        ? (`maker/${userParams.maker}` as const)\n        : (`taker/${userParams.taker}` as const);\n    const fetchURL = `${baseFetchURL}/${userURL}` as const;\n\n    const response = await fetcher<NFTOrdersApiResponse, GetOrdersURLs>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    // without any extra calls, return  what API returns\n    return response;\n  };\n\n  const getNFTOrderByHash: GetNFTOrderByHash = async (orderHash, signal) => {\n    const baseFetchURL = getBaseFetchURLByOrderType();\n    const fetchURL = `${baseFetchURL}/${orderHash}` as const;\n\n    const order = await fetcher<NFTOrderFromAPI, GetOrderURL>({\n      url: fetchURL,\n      method: 'GET',\n      signal,\n    });\n\n    return order;\n  };\n\n  return {\n    getNFTOrders,\n    getNFTOrderByHash,\n  };\n};\n","import { API_URL } from '../../constants';\nimport type { ConstructFetchInput } from '../../types';\nimport { constructBaseFetchUrlGetter, PostOrderURLs } from './helpers/misc';\nimport type {\n  NFTOrderToSend,\n  NFTOrderType,\n  NFTOrderFromAPI,\n  NFTOrderApiResponse,\n} from './helpers/types';\n\ntype PostNFTOrder = (\n  NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n  signal?: AbortSignal\n) => Promise<NFTOrderFromAPI>;\n\nexport type PostNFTOrderFunctions = {\n  postNFTLimitOrder: PostNFTOrder;\n  postNFTP2POrder: PostNFTOrder;\n};\n\nexport const constructPostNFTOrder = ({\n  apiURL = API_URL,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): PostNFTOrderFunctions => {\n  const getBaseFetchURLByOrderType = constructBaseFetchUrlGetter({\n    apiURL,\n    chainId,\n  });\n\n  const postTypedOrder = async (\n    NFTOrderWithSignatureAndPermit: NFTOrderToSend,\n    type: NFTOrderType,\n    signal?: AbortSignal\n  ): Promise<NFTOrderFromAPI> => {\n    const fetchURL = getBaseFetchURLByOrderType(type);\n\n    // @TODO check API return matches\n    const { order: newOrder } = await fetcher<\n      NFTOrderApiResponse,\n      PostOrderURLs\n    >({\n      url: fetchURL,\n      method: 'POST',\n      data: NFTOrderWithSignatureAndPermit,\n      signal,\n    });\n\n    return { ...newOrder };\n  };\n\n  const postNFTLimitOrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'LIMIT', signal);\n  };\n\n  const postNFTP2POrder: PostNFTOrder = (\n    NFTOrderWithSignatureAndPermit,\n    signal\n  ) => {\n    return postTypedOrder(NFTOrderWithSignatureAndPermit, 'P2P', signal);\n  };\n\n  return { postNFTLimitOrder, postNFTP2POrder };\n};\n","import type { ConstructFetchInput } from '../../types';\nimport { constructGetSpender, GetSpender } from '../swap/spender';\n\nexport type GetNFTOrdersContractFunctions = {\n  getNFTOrdersContract: GetSpender;\n  getTokenTransferProxy: GetSpender;\n};\n\n// should work the same as LimitOrders\nexport const constructGetNFTOrdersContract = (\n  options: ConstructFetchInput\n): GetNFTOrdersContractFunctions => {\n  // analogous to getSpender() but for Limit Orders Contract = AugustusRFQ\n\n  const {\n    getSpender: getTokenTransferProxy,\n    getAugustusRFQ: getNFTOrdersContract,\n  } = constructGetSpender(options);\n\n  return {\n    getNFTOrdersContract,\n    getTokenTransferProxy,\n  };\n};\n","import type { ApproveToken } from '../../helpers/approve';\nimport type { ExtractAbiMethodNames } from '../../helpers/misc';\nimport type {\n  Address,\n  ConstructProviderFetchInput,\n  TxSendOverrides,\n} from '../../types';\nimport { constructApproveToken } from '../swap/approve';\nimport { constructGetNFTOrdersContract } from './getOrdersContract';\n\ntype ApproveNFT<T> = (\n  tokenAddress: Address,\n  overrides?: TxSendOverrides\n) => Promise<T>;\n\nexport type ApproveTokenForNFTOrderFunctions<T> = {\n  /** @description approving AugustusSwapper as spender for takerAsset (ERC20) for Limit Orders that will be executed through it */\n  approveERC20ForNFTOrder: ApproveToken<T>;\n  /** @description approving AugustusRFQ as spender for makerAsset (NFT) */\n  approveNFTorNFTOrder: ApproveNFT<T>;\n};\n\nconst MinNFTAbi = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_operator',\n        type: 'address',\n      },\n      {\n        name: '_approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const;\n\ntype ApprovalMethods = ExtractAbiMethodNames<typeof MinNFTAbi>;\n\n// returns whatever `contractCaller` returns\n// to allow for better versatility\nexport const constructApproveTokenForNFTOrder = <T>(\n  options: ConstructProviderFetchInput<T, 'transactCall'>\n): ApproveTokenForNFTOrderFunctions<T> => {\n  // approving TokenTransaferProxy as for the swap\n  const { approveToken: approveERC20ForNFTOrder } =\n    constructApproveToken(options);\n\n  const { getNFTOrdersContract } = constructGetNFTOrdersContract(options);\n\n  // @TODO add approvetakerAssetForNFTOrder to use AugustusSwapper as spender if we ever have SELL NFT swaps\n  const AugustusRFQ = getNFTOrdersContract();\n\n  const approveNFTorNFTOrder: ApproveNFT<T> = async (\n    tokenAddress,\n    overrides = {}\n  ) => {\n    const res = await options.contractCaller.transactCall<ApprovalMethods>({\n      address: tokenAddress,\n      abi: MinNFTAbi,\n      contractMethod: 'setApprovalForAll',\n      args: [AugustusRFQ, true],\n      overrides,\n    });\n\n    return res;\n  };\n\n  return { approveERC20ForNFTOrder, approveNFTorNFTOrder };\n};\n","import type { Address, ConstructFetchInput, OptimalRate } from '../../types';\n\nimport { assert } from 'ts-essentials';\nimport {\n  API_URL,\n  SwapSide,\n  ContractMethod,\n  DEFAULT_VERSION,\n} from '../../constants';\nimport {\n  BuildNFTOrderTxInput,\n  BuildOptions,\n  BuildSwapAndNFTOrderTxInput,\n  TransactionParams,\n  constructBuildTx,\n} from '../swap/transaction';\nimport { constructGetRate, GetRateInput, RateOptions } from '../swap/rates';\nimport type { BigIntAsString, NFTOrderData } from './buildOrder';\nimport { isFilledArray } from '../../helpers/misc';\n\ntype MinBuildSwapAndNFTOrderTxInput = Omit<\n  // these are derived from `orders`\n  BuildSwapAndNFTOrderTxInput,\n  'srcToken' | 'srcAmount' | 'destToken' | 'destDecimals'\n>;\n\ntype BuildSwapAndNFTOrdersTx = (\n  params: MinBuildSwapAndNFTOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\ntype MinBuildNFTOrderTxInput = Omit<\n  BuildNFTOrderTxInput,\n  // these are derived from `orders`\n  'srcToken' | 'srcAmount' | 'destToken' | 'slippage'\n  // `slippage` doesn't participate as we derive `srcAmount` already\n>;\n\ntype BuildNFTOrdersTx = (\n  params: MinBuildNFTOrderTxInput,\n  options?: BuildOptions,\n  signal?: AbortSignal\n) => Promise<TransactionParams>;\n\nexport type BuildNFTOrdersTxFunctions = {\n  getNFTOrdersRate: GetNFTOrdersRate;\n  buildNFTOrderTx: BuildNFTOrdersTx;\n  buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx;\n};\n\ntype GetNFTOrdersRate = (\n  // `amount`, if given, must equal the total of the orders' `takerAmounts`\n  options: Omit<GetRateInput, 'amount' | 'side'> & { amount?: string },\n  orders: CheckableOrderData[],\n  signal?: AbortSignal\n) => Promise<OptimalRate>;\n\nexport const constructBuildNFTOrderTx = ({\n  apiURL = API_URL,\n  version = DEFAULT_VERSION,\n  chainId,\n  fetcher,\n}: ConstructFetchInput): BuildNFTOrdersTxFunctions => {\n  const { buildTx: buildSwapTx } = constructBuildTx({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  const { getRate: getSwapAndNFTOrderRate } = constructGetRate({\n    apiURL,\n    version,\n    chainId,\n    fetcher,\n  });\n\n  //  returns priceRoute that would allow from swap from srcToken to destToken(=order.takerAsset) followed by filling NFT orders\n  const getNFTOrdersRate: GetNFTOrdersRate = async (\n    { srcToken, destToken, amount, options: _options = {}, ...rest },\n    orders,\n    signal\n  ) => {\n    assert(orders.length > 0, 'must pass at least 1 order');\n\n    const { totalTakerAmount, takerAsset } = checkAndParseOrders(orders);\n\n    assert(\n      takerAsset.toLowerCase() === destToken.toLowerCase(),\n      'All orders must have the same takerAsset as destToken'\n    );\n\n    const takerAmountString = totalTakerAmount.toString(10);\n\n    if (amount) {\n      assert(\n        amount === takerAmountString,\n        \"`amount` must equal the total of the orders' `takerAmounts`\"\n      );\n    }\n\n    // The pricing must use includeContractMethods=simpleBuy and side=BUY\n    const options: RateOptions = {\n      ..._options,\n      includeContractMethods: [ContractMethod.simpleBuy],\n    };\n\n    const side = SwapSide.BUY;\n\n    const rateInput: GetRateInput = {\n      ...rest,\n      srcToken,\n      destToken,\n      amount: takerAmountString,\n      side,\n      options,\n    };\n\n    // priceRoute\n    const optimalRate = await getSwapAndNFTOrderRate(rateInput, signal);\n    return optimalRate;\n  };\n\n  // derive srcToken, destToken and srcAmount from orders[]\n  const buildNFTOrderTx: BuildNFTOrdersTx = (params, options, signal) => {\n    const { takerAsset, totalTakerAmount } = checkAndParseOrders(params.orders);\n\n    const fillParams: BuildNFTOrderTxInput = {\n      ...params,\n      // taker supplies takerAsset\n      srcToken: takerAsset,\n      srcAmount: totalTakerAmount.toString(10),\n      // taker gets makerAsset in the end\n      destToken: 'NFT', // support any NFT\n    };\n\n    return buildSwapTx(fillParams, options, signal);\n  };\n  const buildSwapAndNFTOrderTx: BuildSwapAndNFTOrdersTx = (\n    params,\n    options,\n    signal\n  ) => {\n    checkAndParseOrders(params.orders);\n\n    const fillParams: BuildSwapAndNFTOrderTxInput = {\n      ...params,\n      // taker supplies srcToken\n      srcToken: params.priceRoute.srcToken,\n      // one or the other\n      ...(params.slippage\n        ? { slippage: params.slippage }\n        : //                                        may sneak in as part of `params`\n          { srcAmount: params.priceRoute.srcAmount, slippage: undefined }),\n      destToken: 'NFT', // support any NFT,\n      destDecimals: params.priceRoute.destDecimals,\n    };\n    return buildSwapTx(fillParams, options, signal);\n  };\n\n  return {\n    getNFTOrdersRate,\n    buildNFTOrderTx,\n    buildSwapAndNFTOrderTx,\n  };\n};\n\ntype CheckAndParseOrdersResult = Omit<CheckableOrderData, 'takerAmount'> & {\n  totalTakerAmount: bigint;\n};\n\ntype CheckableOrderData = Pick<\n  NFTOrderData,\n  'takerAsset' | 'makerAsset' | 'takerAmount' | 'maker'\n> & { taker?: NFTOrderData['taker'] };\n\nfunction checkAndParseOrders(\n  orders: CheckableOrderData[]\n): CheckAndParseOrdersResult {\n  assert(isFilledArray(orders), 'must pass at least 1 order');\n\n  const { takerAssetsSet, makerAssetsSet, totalTakerAmount } = orders.reduce<\n    Record<'takerAssetsSet' | 'makerAssetsSet', Set<string>> & {\n      totalTakerAmount: bigint;\n    }\n  >(\n    (accum, order) => {\n      accum.takerAssetsSet.add(order.takerAsset.toLowerCase());\n      accum.makerAssetsSet.add(order.makerAsset.toLowerCase());\n\n      accum.totalTakerAmount =\n        accum.totalTakerAmount + BigInt(order.takerAmount);\n      return accum;\n    },\n    {\n      takerAssetsSet: new Set(),\n      makerAssetsSet: new Set(),\n      totalTakerAmount: BigInt(0),\n    }\n  );\n\n  assert(\n    takerAssetsSet.size === 1,\n    'All orders must have the same takerAsset as destToken'\n  );\n  assert(makerAssetsSet.size === 1, 'All orders must have the same makerAsset');\n\n  const [{ maker, taker, makerAsset, takerAsset }] = orders;\n\n  return {\n    totalTakerAmount,\n    maker,\n    taker,\n    makerAsset: makerAsset.startsWith('0x')\n      ? makerAsset\n      : uintToAssetAddress(makerAsset),\n    takerAsset: takerAsset.startsWith('0x')\n      ? takerAsset\n      : uintToAssetAddress(takerAsset),\n  };\n}\n\n// extract asset address from makerAsset or takerAsset packed number encoded to contain AssetType\nfunction uintToAssetAddress(assetUint: BigIntAsString): Address {\n  return (\n    '0x' +\n    (BigInt(assetUint) & ((BigInt(1) << BigInt(160)) - BigInt(1))).toString(16)\n  );\n}\n","import type { ExtraFetchParams, FetcherFunction } from '../../types';\nimport type { AxiosStatic } from 'axios';\nimport { FetcherError } from '../misc';\n\nexport type AxiosRequirement = Pick<AxiosStatic, 'request' | 'isAxiosError'>;\n\nexport const constructFetcher =\n  (axios: AxiosRequirement, extra?: ExtraFetchParams): FetcherFunction =>\n  async (params) => {\n    try {\n      // adding apiKey to headers if it's provided\n      const headers = extra?.apiKey\n        ? { 'X-API-KEY': extra.apiKey, ...params.headers }\n        : params.headers;\n      const { data } = await axios.request({ ...params, headers });\n\n      return data;\n    } catch (error: any) {\n      if (axios.isAxiosError(error)) {\n        // attach a more meaningful message and other props\n        throw new FetcherError(error);\n      }\n\n      throw error;\n    }\n  };\n","import type { ExtraFetchParams, FetcherFunction } from '../../types';\nimport { FetcherError } from '../misc';\n\n// @TODO may not work with node-fetch\ntype Fetch = typeof fetch;\n\nexport const constructFetcher =\n  (fetch: Fetch, extra?: ExtraFetchParams): FetcherFunction =>\n  async (params) => {\n    try {\n      const { url, method, signal } = params;\n      const body = method === 'POST' ? JSON.stringify(params.data) : null;\n      // Only JSON response for POST requests\n      const POSTheaders =\n        method === 'POST' && body\n          ? {\n              'Content-Type': 'application/json',\n            }\n          : undefined;\n\n      // adding apiKey to headers if it's provided\n      const apiHeaders = extra?.apiKey\n        ? { 'X-API-KEY': extra.apiKey, ...params.headers }\n        : undefined;\n\n      // all headers combined\n      const headers =\n        POSTheaders || apiHeaders || params.headers\n          ? { ...apiHeaders, ...POSTheaders, ...params.headers }\n          : undefined;\n\n      const response = await fetch(url, { method, body, signal, headers });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // @TODO figure out if this works analogous to AxiosError, especially code ==? status\n        throw new FetcherError({\n          code: String(response.status),\n          response: {\n            data,\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(response.headers.entries()),\n            config: { url, method },\n          },\n          message: response.statusText,\n          isAxiosError: false,\n        });\n      }\n\n      return data;\n    } catch (error: any) {\n      if (error instanceof FetcherError) throw error;\n      throw new FetcherError(error);\n    }\n  };\n","import type {\n  Address,\n  ContractCallerFunctions,\n  NoExtraKeysCheck,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type {\n  JsonRpcProvider,\n  BaseProvider,\n  JsonRpcSigner,\n} from '@ethersproject/providers';\nimport type { Signer } from '@ethersproject/abstract-signer';\nimport type {\n  Contract as EthersContract,\n  PayableOverrides,\n  CallOverrides,\n  ContractTransaction,\n} from '@ethersproject/contracts';\nimport { assertEthersContractHasMethods } from '../misc';\nimport { assert } from 'ts-essentials';\n\nexport interface EthersProviderDeps {\n  ethersProviderOrSigner: BaseProvider | Signer;\n  EthersContract: typeof EthersContract; // passing Contract in allows not to include ethers as dependency even when using legacy ParaSwap class\n}\n\nexport const constructContractCaller = (\n  {\n    ethersProviderOrSigner: providerOrSigner,\n    EthersContract: Contract,\n  }: EthersProviderDeps,\n  account?: Address\n): ContractCallerFunctions<ContractTransaction> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new Contract(address, abi, providerOrSigner);\n\n    assertEthersContractHasMethods(contract, contractMethod);\n    // drop keys not in CallOverrides\n    const { block, gas, ...restOverrides } = overrides;\n    // reassign values to keys in CallOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      blockTag: block,\n      gasLimit: gas,\n    };\n\n    // type FinalCallOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalCallOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      CallOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in CallOverrides\n    const callOverrides: FinalCallOverrides = normalizedOverrides;\n    // returns whatever the Contract.method returns: BigNumber, string, boolean\n    return contract.callStatic[contractMethod](...args, callOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<ContractTransaction> = async (\n    params\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    const contract = new Contract(address, abi, signer);\n\n    assertEthersContractHasMethods(contract, contractMethod);\n    // drop keys not in PayableOverrides\n    const { gas, from, ...restOverrides } = overrides;\n    // reassign values to keys in PayableOverrides\n    const normalizedOverrides = {\n      ...restOverrides,\n      gasLimit: gas,\n    };\n\n    // type FinalPayableOverrides = normalizedOverrides has extra props ? never : normalizedOverrides\n    type FinalPayableOverrides = NoExtraKeysCheck<\n      typeof normalizedOverrides,\n      PayableOverrides\n    >;\n\n    // enforce overrides shape ethers accepts\n    // TS will break if normalizedOverrides type has any keys not also present in PayableOverrides\n    const txOverrides: FinalPayableOverrides = normalizedOverrides;\n    const txResponse: ContractTransaction = await contract[contractMethod](\n      ...args,\n      txOverrides\n    );\n\n    return txResponse;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(account, 'account must be specified to create a signer');\n    assert(\n      isEthersProviderWithSigner(providerOrSigner) ||\n        isEthersSigner(providerOrSigner),\n      'ethers must be an instance of Signer or JsonRpcProvider to create a signer'\n    );\n\n    const signer =\n      'getSigner' in providerOrSigner\n        ? providerOrSigner.getSigner(account)\n        : providerOrSigner;\n\n    assert(isTypedDataCapableSigner(signer), 'Signer can sign typed data');\n\n    const { data, domain, types } = typedData;\n\n    return signer._signTypedData(domain, types, data);\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isEthersProvider(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is BaseProvider {\n  return '_isProvider' in providerOrSigner && providerOrSigner._isProvider;\n}\n\nfunction isEthersProviderWithSigner(\n  providerOrSigner: JsonRpcProvider | BaseProvider | Signer\n): providerOrSigner is JsonRpcProvider {\n  return isEthersProvider(providerOrSigner) && 'getSigner' in providerOrSigner;\n}\n\nfunction isEthersSigner(\n  providerOrSigner: BaseProvider | Signer\n): providerOrSigner is Signer {\n  return '_isSigner' in providerOrSigner && providerOrSigner._isSigner;\n}\n\nfunction isTypedDataCapableSigner(\n  signer: Signer\n): signer is Signer & Pick<JsonRpcSigner, '_signTypedData'> {\n  return '_signTypedData' in signer;\n}\n","import type {\n  Address,\n  ContractCallerFunctions,\n  SignTypedDataContractCallerFn,\n  StaticContractCallerFn,\n  TransactionContractCallerFn,\n} from '../../types';\nimport type Web3 from 'web3';\nimport type { AbiItem } from 'web3-utils';\nimport type {\n  ContractSendMethod,\n  SendOptions,\n  CallOptions,\n  Contract,\n} from 'web3-eth-contract';\nimport type { PromiEvent, provider, AbstractProvider } from 'web3-core';\nimport type { JsonRpcResponse } from 'web3-core-helpers';\nimport { assert } from 'ts-essentials';\nimport { assertWeb3ContractHasMethods } from '../misc';\nimport type { TypedDataField } from '@ethersproject/abstract-signer';\n\nexport type Web3UnpromiEvent = Pick<PromiEvent<Contract>, 'on' | 'once'>;\n\nexport const constructContractCaller = (\n  web3: Web3,\n  account?: Address\n): ContractCallerFunctions<Web3UnpromiEvent> => {\n  const staticCall: StaticContractCallerFn = async (params) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as AbiItem[], // FIXME abi types ethers dependant\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { block, gas, ...restOverrides } = overrides;\n\n    const normalizedOverrides: CallOptions = {\n      ...restOverrides,\n      gas,\n    };\n\n    return contract.methods[contractMethod](...args).call(normalizedOverrides);\n  };\n\n  const transactCall: TransactionContractCallerFn<Web3UnpromiEvent> = async (\n    params\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to send transactions');\n\n    const { address, abi, contractMethod, args, overrides } = params;\n\n    const contract = new web3.eth.Contract(\n      abi as unknown as AbiItem[], // FIXME\n      address\n    );\n\n    assertWeb3ContractHasMethods(contract, contractMethod);\n\n    const { gas, from, ...restOverrides } = overrides;\n\n    const _from = from || account;\n\n    assert(_from, 'from is required');\n\n    const normalizedOverrides: SendOptions = {\n      ...restOverrides,\n      from: _from,\n      gas: gas,\n    };\n\n    const preparedCall = contract.methods[contractMethod](\n      ...args\n    ) as ContractSendMethod;\n\n    const promiEvent = preparedCall.send(normalizedOverrides);\n\n    // can't just return promiEvent, because async function returns a Promise<PromiEvent>\n    // and await Promise<PromiEvent> automatically awaits the value of PromiEvent,\n    // that is await Promise<PromiEvent> = Awaited<PromiEvent> that doesn't have .on|once\n    // so that functionality becomes lost\n    // transactCall can be made sync, but approve has to be async to await getSpender()\n    const unpromiEvent: Web3UnpromiEvent = {\n      on: promiEvent.on.bind(promiEvent),\n      once: promiEvent.once.bind(promiEvent),\n    };\n\n    return unpromiEvent;\n  };\n\n  const signTypedDataCall: SignTypedDataContractCallerFn = async (\n    typedData\n  ) => {\n    assert(web3.currentProvider, 'web3.currentProvider is not set');\n\n    assert(account, 'account must be specified to sign data');\n\n    const provider = web3.currentProvider;\n    assert(\n      isProviderWithSendMethod(provider),\n      'web3.currentProvider needs to be capable of sending arbitrary rpc calls'\n    );\n\n    const { data, domain, types } = typedData;\n\n    const _typedData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        ...types,\n      },\n      primaryType: findPrimaryType(types),\n      domain,\n      message: data,\n    };\n\n    const response = await new Promise<JsonRpcResponse>((resolve, reject) => {\n      provider.send(\n        {\n          jsonrpc: '2.0',\n          // method: 'eth_signTypedData_v4',\n          method: 'eth_signTypedData',\n          params: [account, _typedData],\n        },\n        (error, result) => {\n          if (error) return reject(error);\n          if (!result) {\n            throw new Error('No result in response to eth_signTypedData');\n          }\n          resolve(result);\n        }\n      );\n    });\n\n    return response.result;\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n};\n\nfunction isProviderWithSendMethod<T extends provider>(\n  provider: T\n): provider is T & Required<Pick<AbstractProvider, 'send'>> {\n  return !!provider && typeof provider === 'object' && 'send' in provider;\n}\n\n// regex from @ethersproject/hash TypedDataEncoder.constructor\n// may be overly strict, but reliable\nconst baseTypeRegex = /^([^\\x5b]*)(\\x5b|$)/;\n\nfunction findPrimaryType(types: Record<string, TypedDataField[]>): string {\n  const candidates = Object.keys(types);\n  const candidatesSet = new Set(candidates);\n\n  candidates.forEach((candidate) => {\n    const typedDataFields = types[candidate];\n    if (!typedDataFields) return;\n\n    typedDataFields.forEach(({ type }) => {\n      // Get the base type (drop any array specifiers)\n      const baseType = type.match(baseTypeRegex)?.[1];\n      if (!baseType) return;\n\n      // if type was referred to as a child of another type, it can't be the primaryType\n      candidatesSet.delete(baseType);\n    });\n  });\n\n  const [primaryType] = Array.from(candidatesSet);\n\n  assert(\n    primaryType,\n    `No primary type found in SignableTypedData types, ${JSON.stringify(types)}`\n  );\n\n  return primaryType;\n}\n","import type {\n  AnyFunction,\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ConstructProviderFetchInput,\n} from '../types';\nimport type { Merge, UnionToIntersection } from 'ts-essentials';\nimport type { ApproveTokenFunctions } from '../methods/swap/approve';\nimport type { CancelLimitOrderFunctions } from '../methods/limitOrders/cancelOrder';\nimport type { ApproveTokenForLimitOrderFunctions } from '../methods/limitOrders/approveForOrder';\nimport type { CancelNFTOrderFunctions } from '../methods/nftOrders/cancelOrder';\nimport type { ApproveTokenForNFTOrderFunctions } from '../methods/nftOrders/approveForOrder';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\nimport { FillOrderDirectlyFunctions } from '../methods/limitOrders/fillOrderDirectly';\n\nexport type SDKConfig<TxResponse = any> = ConstructProviderFetchInput<\n  TxResponse,\n  'staticCall' | 'transactCall' | 'signTypedDataCall'\n> &\n  ConstructFetchInput;\n\ntype SDKFunction<T extends ConstructBaseInput> = (\n  config: T\n) => Record<string, AnyFunction | Record<string, AnyFunction>>;\n\ntype IntersectionOfReturns<Funcs extends AnyFunction[]> = UnionToIntersection<\n  ReturnType<Funcs[number]>\n>;\n\ntype PartialSDKResult<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = InferWithTxResponse<Config, Funcs>;\n\ntype InferWithTxResponse<\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n> = Config extends SDKConfig<infer TxResponse> // if can infer TxResponse inside Config\n  ? // and if returns can be successfully intersected\n    IntersectionOfReturns<Funcs> extends Record<string, any>\n    ? MergeExtendableRecursively<\n        IntersectionOfReturns<Funcs>,\n        [\n          // if there are ApproveTokenFunctions or CancelLimitOrderFunctions in the intersection\n          // which means constructApproveToken or constructCancelLimitOrder was passed in Funcs\n          ApproveTokenFunctions<TxResponse>,\n          CancelLimitOrderFunctions<TxResponse>,\n          FillOrderDirectlyFunctions<TxResponse>,\n          ApproveTokenForLimitOrderFunctions<TxResponse>,\n          CancelNFTOrderFunctions<TxResponse>,\n          ApproveTokenForNFTOrderFunctions<TxResponse>\n        ]\n        // then merge IntersectionOfReturns<Funcs> with them recursively\n      >\n    : IntersectionOfReturns<Funcs>\n  : IntersectionOfReturns<Funcs>;\n\n// merges Accum with Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableOnce<\n  Accum extends Record<string, any>,\n  Replacement extends Record<string, any>\n> = Accum extends Record<keyof Replacement, any>\n  ? Merge<Accum, Replacement>\n  : Accum;\n\n// recursively merges Accum with each Replacement\n// if Accum has keys of Replacement\ntype MergeExtendableRecursively<\n  Accum extends Record<string, any>,\n  Replacements extends Record<string, any>[]\n> = Replacements extends [head: infer Head, ...tail: infer Tail] // use [head: infer Head extends Record<string, any>, ...tail: infer Tail] after Ts update\n  ? Tail extends Record<string, any>[]\n    ? Head extends Record<string, any>\n      ? MergeExtendableRecursively<MergeExtendableOnce<Accum, Head>, Tail>\n      : Accum\n    : Head extends Record<string, any>\n    ? MergeExtendableOnce<Accum, Head>\n    : Accum\n  : Accum;\n\n/** @description construct composable SDK with methods you choose yourself */\nexport const constructPartialSDK = <\n  Config extends ConstructBaseInput,\n  Funcs extends [SDKFunction<Config>, ...SDKFunction<Config>[]]\n>(\n  config: Config, // config is auto-inferred to cover the used functions\n  ...funcs: Funcs\n): PartialSDKResult<Config, Funcs> & Required<ConstructBaseInput> => {\n  const sdkFuncs = funcs.reduce<Partial<IntersectionOfReturns<Funcs>>>(\n    (accum, func) => {\n      const sdkSlice = func(config);\n      return Object.assign(accum, sdkSlice);\n    },\n    {}\n  );\n\n  const sdk = {\n    ...sdkFuncs,\n    apiURL: config.apiURL ?? API_URL,\n    version: config.version ?? DEFAULT_VERSION,\n    chainId: config.chainId,\n  } as PartialSDKResult<Config, Funcs> & Required<ConstructBaseInput>;\n\n  return sdk;\n};\n","import { constructPartialSDK, SDKConfig } from '../../sdk/partial';\nimport { ConstructProviderFetchInput } from '../../types';\nimport { constructGetAdapters, GetAdaptersFunctions } from './adapters';\nimport { ApproveTokenFunctions, constructApproveToken } from './approve';\nimport { constructGetBalances, GetBalancesFunctions } from './balance';\nimport { constructGetRate, GetRateFunctions } from './rates';\nimport { constructGetSpender, GetSpenderFunctions } from './spender';\nimport { constructSwapTx, GetSwapTxFunctions } from './swapTx';\nimport { constructGetTokens, GetTokensFunctions } from './token';\nimport { BuildTxFunctions, constructBuildTx } from './transaction';\n\nexport type SwapSDKMethods<TxResponse> = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  ApproveTokenFunctions<TxResponse> &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions &\n  GetSwapTxFunctions;\n\n/** @description construct SDK with every Swap-related method, fetching from API and token approval */\nexport const constructSwapSDK = <TxResponse>(\n  config: SDKConfig<TxResponse>\n): SwapSDKMethods<TxResponse> =>\n  // include all available Swap methods\n  constructPartialSDK(\n    config,\n    constructGetBalances,\n    constructGetTokens,\n    constructGetSpender,\n    constructApproveToken as (\n      options: ConstructProviderFetchInput<TxResponse, 'transactCall'>\n    ) => ApproveTokenFunctions<TxResponse>, // @TODO try Instantiation Expression when TS 4.7 `as constructApproveToken<TxResponse>`\n    constructBuildTx,\n    constructGetAdapters,\n    constructGetRate,\n    constructSwapTx\n  );\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { LimitOrderToSend, LimitOrderFromApi } from './helpers/types';\nimport {\n  BuildLimitOrderFunctions,\n  BuildLimitOrderInput,\n  constructBuildLimitOrder,\n} from './buildOrder';\nimport {\n  CancelLimitOrderFunctions,\n  constructCancelLimitOrder,\n} from './cancelOrder';\nimport { constructGetLimitOrders, GetLimitOrdersFunctions } from './getOrders';\nimport { constructPostLimitOrder, PostLimitOrderFunctions } from './postOrder';\nimport { constructSignLimitOrder, SignLimitOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForLimitOrder,\n  ApproveTokenForLimitOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetLimitOrdersContractFunctions,\n  constructGetLimitOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildLimitOrdersTxFunctions,\n  constructBuildLimitOrderTx,\n} from './transaction';\nimport type { Address } from '@paraswap/core';\nimport {\n  FillOrderDirectlyFunctions,\n  constructFillOrderDirectly,\n} from './fillOrderDirectly';\n\ntype SubmitLimitOrder = (\n  buildLimitOrderParams: BuildLimitOrderInput,\n  extra?: { permitMakerAsset?: string },\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\n\ntype SubmitP2POrder = (\n  buildLimitOrderParams: BuildLimitOrderInput & { taker: Address },\n  extra?: { permitMakerAsset?: string },\n  signal?: AbortSignal\n) => Promise<LimitOrderFromApi>;\n\nexport type SubmitLimitOrderFuncs = {\n  submitLimitOrder: SubmitLimitOrder;\n  submitP2POrder: SubmitP2POrder;\n};\n\nexport const constructSubmitLimitOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitLimitOrderFuncs => {\n  const { buildLimitOrder } = constructBuildLimitOrder(options);\n  const { signLimitOrder } = constructSignLimitOrder(options);\n  const { postLimitOrder, postP2POrder } = constructPostLimitOrder(options);\n\n  const prepareLimitOrder = async (\n    buildLimitOrderParams: BuildLimitOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<LimitOrderToSend> => {\n    const orderData = await buildLimitOrder(buildLimitOrderParams);\n    const signature = await signLimitOrder(orderData);\n\n    const orderWithSignature: LimitOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitLimitOrder: SubmitLimitOrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postLimitOrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitP2POrder = async (\n    buildLimitOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: LimitOrderToSend = await prepareLimitOrder(\n      buildLimitOrderParams,\n      extra\n    );\n\n    const newOrder = await postP2POrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  return { submitLimitOrder, submitP2POrder };\n};\n\nexport type LimitOrderHandlers<T> = SubmitLimitOrderFuncs &\n  BuildLimitOrderFunctions &\n  SignLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  GetLimitOrdersFunctions &\n  GetLimitOrdersContractFunctions &\n  BuildLimitOrdersTxFunctions &\n  CancelLimitOrderFunctions<T> &\n  ApproveTokenForLimitOrderFunctions<T> &\n  FillOrderDirectlyFunctions<T>;\n\n/** @description construct SDK with every LimitOrders-related method, fetching from API and contract calls */\nexport const constructAllLimitOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): LimitOrderHandlers<TxResponse> => {\n  const limitOrdersGetters = constructGetLimitOrders(options);\n  const limitOrdersContractGetter = constructGetLimitOrdersContract(options);\n\n  const limitOrdersSubmit = constructSubmitLimitOrder(options);\n  const limitOrdersBuild = constructBuildLimitOrder(options);\n  const limitOrdersSign = constructSignLimitOrder(options);\n  const limitOrdersPost = constructPostLimitOrder(options);\n\n  const limitOrdersCancel = constructCancelLimitOrder(options);\n  const limitOrdersApproveToken = constructApproveTokenForLimitOrder(options);\n\n  const limitOrdersFillOrderDirectly = constructFillOrderDirectly(options);\n\n  const limitOrdersBuildTx = constructBuildLimitOrderTx(options);\n\n  return {\n    ...limitOrdersGetters,\n    ...limitOrdersContractGetter,\n    ...limitOrdersSubmit,\n    ...limitOrdersBuild,\n    ...limitOrdersSign,\n    ...limitOrdersPost,\n    ...limitOrdersCancel,\n    ...limitOrdersApproveToken,\n    ...limitOrdersFillOrderDirectly,\n    ...limitOrdersBuildTx,\n  };\n};\n","import type { ConstructProviderFetchInput } from '../../types';\nimport type { NFTOrderToSend, NFTOrderFromAPI } from './helpers/types';\nimport {\n  BuildNFTOrderFunctions,\n  BuildNFTOrderInput,\n  constructBuildNFTOrder,\n} from './buildOrder';\nimport {\n  CancelNFTOrderFunctions,\n  constructCancelNFTOrder,\n} from './cancelOrder';\nimport { constructGetNFTOrders, GetNFTOrdersFunctions } from './getOrders';\nimport { constructPostNFTOrder, PostNFTOrderFunctions } from './postOrder';\nimport { constructSignNFTOrder, SignNFTOrderFunctions } from './signOrder';\nimport {\n  constructApproveTokenForNFTOrder,\n  ApproveTokenForNFTOrderFunctions,\n} from './approveForOrder';\nimport {\n  GetNFTOrdersContractFunctions,\n  constructGetNFTOrdersContract,\n} from './getOrdersContract';\nimport {\n  BuildNFTOrdersTxFunctions,\n  constructBuildNFTOrderTx,\n} from './transaction';\n\ntype SubmitNFTOrder = (\n  buildNFTOrderParams: BuildNFTOrderInput,\n  extra?: { permitMakerAsset?: string },\n  signal?: AbortSignal\n) => Promise<NFTOrderFromAPI>;\n\nexport type SubmitNFTOrderFuncs = {\n  submitNFTOrder: SubmitNFTOrder;\n  submitP2POrder: SubmitNFTOrder;\n};\n\nexport const constructSubmitNFTOrder = (\n  options: ConstructProviderFetchInput<any, 'signTypedDataCall'>\n): SubmitNFTOrderFuncs => {\n  const { buildNFTOrder } = constructBuildNFTOrder(options);\n  const { signNFTOrder } = constructSignNFTOrder(options);\n  const { postNFTLimitOrder, postNFTP2POrder } = constructPostNFTOrder(options);\n\n  const prepareNFTOrder = async (\n    buildNFTOrderParams: BuildNFTOrderInput,\n    extra?: { permitMakerAsset?: string }\n  ): Promise<NFTOrderToSend> => {\n    const orderData = await buildNFTOrder(buildNFTOrderParams);\n    const signature = await signNFTOrder(orderData);\n\n    const orderWithSignature: NFTOrderToSend = {\n      ...orderData.data,\n      ...extra,\n      signature,\n    };\n\n    return orderWithSignature;\n  };\n\n  const submitNFTOrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTLimitOrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  const submitP2POrder: SubmitNFTOrder = async (\n    buildNFTOrderParams,\n    extra = {},\n    signal\n  ) => {\n    const orderWithSignature: NFTOrderToSend = await prepareNFTOrder(\n      buildNFTOrderParams,\n      extra\n    );\n\n    const newOrder = await postNFTP2POrder(orderWithSignature, signal);\n\n    return newOrder;\n  };\n\n  return { submitNFTOrder, submitP2POrder };\n};\n\nexport type NFTOrderHandlers<T> = SubmitNFTOrderFuncs &\n  BuildNFTOrderFunctions &\n  SignNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  GetNFTOrdersFunctions &\n  GetNFTOrdersContractFunctions &\n  BuildNFTOrdersTxFunctions &\n  CancelNFTOrderFunctions<T> &\n  ApproveTokenForNFTOrderFunctions<T>;\n\n/** @description construct SDK with every NFTOrders-related method, fetching from API and contract calls */\nexport const constructAllNFTOrdersHandlers = <TxResponse>(\n  options: ConstructProviderFetchInput<\n    TxResponse,\n    'signTypedDataCall' | 'transactCall' | 'staticCall'\n  >\n): NFTOrderHandlers<TxResponse> => {\n  const NFTOrdersGetters = constructGetNFTOrders(options);\n  const NFTOrdersContractGetter = constructGetNFTOrdersContract(options);\n\n  const NFTOrdersSubmit = constructSubmitNFTOrder(options);\n  const NFTOrdersBuild = constructBuildNFTOrder(options);\n  const NFTOrdersSign = constructSignNFTOrder(options);\n  const NFTOrdersPost = constructPostNFTOrder(options);\n\n  const NFTOrdersCancel = constructCancelNFTOrder(options);\n  const NFTOrdersApproveToken = constructApproveTokenForNFTOrder(options);\n\n  const NFTOrdersBuildTx = constructBuildNFTOrderTx(options);\n\n  return {\n    ...NFTOrdersGetters,\n    ...NFTOrdersContractGetter,\n    ...NFTOrdersSubmit,\n    ...NFTOrdersBuild,\n    ...NFTOrdersSign,\n    ...NFTOrdersPost,\n    ...NFTOrdersCancel,\n    ...NFTOrdersApproveToken,\n    ...NFTOrdersBuildTx,\n  };\n};\n","import type { SDKConfig } from './partial';\nimport { constructSwapSDK, SwapSDKMethods } from '../methods/swap';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\n\nexport type AllSDKMethods<TxResponse> = {\n  swap: SwapSDKMethods<TxResponse>;\n  limitOrders: LimitOrderHandlers<TxResponse>;\n  nftOrders: NFTOrderHandlers<TxResponse>;\n};\n\n/** @description construct SDK with every method, for swap and limitOrders */\nexport const constructFullSDK = <TxResponse = any>(\n  config: SDKConfig<TxResponse>\n): AllSDKMethods<TxResponse> => {\n  // include all available functions\n  const swap: SwapSDKMethods<TxResponse> = constructSwapSDK(config);\n  const limitOrders: LimitOrderHandlers<TxResponse> =\n    constructAllLimitOrdersHandlers(config);\n  const nftOrders: NFTOrderHandlers<TxResponse> =\n    constructAllNFTOrdersHandlers(config);\n\n  return { swap, limitOrders, nftOrders };\n};\n","import { constructPartialSDK, SDKConfig } from './partial';\nimport {\n  GetAdaptersFunctions,\n  constructGetAdapters,\n} from '../methods/swap/adapters';\nimport {\n  GetBalancesFunctions,\n  constructGetBalances,\n} from '../methods/swap/balance';\nimport { GetRateFunctions, constructGetRate } from '../methods/swap/rates';\nimport {\n  GetSpenderFunctions,\n  constructGetSpender,\n} from '../methods/swap/spender';\nimport { GetTokensFunctions, constructGetTokens } from '../methods/swap/token';\nimport {\n  BuildTxFunctions,\n  constructBuildTx,\n} from '../methods/swap/transaction';\nimport { constructSwapTx, GetSwapTxFunctions } from '../methods/swap/swapTx';\n\nimport {\n  constructAxiosFetcher,\n  constructFetchFetcher,\n  constructEthersContractCaller,\n  constructWeb3ContractCaller,\n} from '../helpers';\n\nimport type {\n  ConstructBaseInput,\n  ConstructFetchInput,\n  ContractCallerFunctions,\n  TransactionContractCallerFn,\n  TxHash,\n  Address,\n  FetcherFunction,\n  ExtraFetchParams,\n} from '../types';\n\nimport type { EthersProviderDeps } from '../helpers';\nimport type Web3 from 'web3';\n\nimport type { SwapSDKMethods } from '../methods/swap';\nimport {\n  BuildLimitOrderFunctions,\n  constructBuildLimitOrder,\n} from '../methods/limitOrders/buildOrder';\nimport {\n  constructPostLimitOrder,\n  PostLimitOrderFunctions,\n} from '../methods/limitOrders/postOrder';\nimport {\n  constructGetLimitOrders,\n  GetLimitOrdersFunctions,\n} from '../methods/limitOrders/getOrders';\nimport {\n  constructGetLimitOrdersContract,\n  GetLimitOrdersContractFunctions,\n} from '../methods/limitOrders/getOrdersContract';\nimport {\n  constructBuildLimitOrderTx,\n  BuildLimitOrdersTxFunctions,\n} from '../methods/limitOrders/transaction';\nimport {\n  constructAllLimitOrdersHandlers,\n  LimitOrderHandlers,\n} from '../methods/limitOrders';\n\nimport {\n  constructGetNFTOrdersContract,\n  GetNFTOrdersContractFunctions,\n} from '../methods/nftOrders/getOrdersContract';\nimport {\n  constructGetNFTOrders,\n  GetNFTOrdersFunctions,\n} from '../methods/nftOrders/getOrders';\nimport {\n  BuildNFTOrderFunctions,\n  constructBuildNFTOrder,\n} from '../methods/nftOrders/buildOrder';\nimport {\n  constructPostNFTOrder,\n  PostNFTOrderFunctions,\n} from '../methods/nftOrders/postOrder';\nimport {\n  constructBuildNFTOrderTx,\n  BuildNFTOrdersTxFunctions,\n} from '../methods/nftOrders/transaction';\nimport {\n  constructAllNFTOrdersHandlers,\n  NFTOrderHandlers,\n} from '../methods/nftOrders';\n\nimport { constructSwapSDK } from '../methods/swap';\nimport type { AxiosRequirement } from '../helpers/fetchers/axios';\nimport { API_URL, DEFAULT_VERSION } from '../constants';\n\nexport type SwapFetchMethods = GetBalancesFunctions &\n  GetTokensFunctions &\n  GetSpenderFunctions &\n  BuildTxFunctions &\n  GetAdaptersFunctions &\n  GetRateFunctions &\n  GetSwapTxFunctions;\n\nexport type LimitOrdersFetchMethods = GetLimitOrdersContractFunctions &\n  GetLimitOrdersFunctions &\n  BuildLimitOrderFunctions &\n  PostLimitOrderFunctions &\n  BuildLimitOrdersTxFunctions;\n\nexport type NFTOrdersFetchMethods = GetNFTOrdersContractFunctions &\n  GetNFTOrdersFunctions &\n  BuildNFTOrderFunctions &\n  PostNFTOrderFunctions &\n  BuildNFTOrdersTxFunctions;\n\nexport type SimpleFetchSDK = {\n  swap: SwapFetchMethods;\n  limitOrders: LimitOrdersFetchMethods;\n  nftOrders: NFTOrdersFetchMethods;\n} & Required<ConstructBaseInput>;\n\nexport type SimpleSDK = {\n  swap: SwapSDKMethods<TxHash>;\n  limitOrders: LimitOrderHandlers<TxHash>;\n  nftOrders: NFTOrderHandlers<TxHash>;\n} & Required<ConstructBaseInput>;\n\nexport type FetcherOptions = (\n  | {\n      axios: AxiosRequirement;\n    }\n  | { fetch: typeof fetch }\n  | { fetcher: FetcherFunction }\n) &\n  ExtraFetchParams;\n\ntype SimpleOptions = ConstructBaseInput & FetcherOptions;\n\nexport type ProviderOptions = (EthersProviderDeps | { web3: Web3 }) & {\n  account: Address;\n};\n\nconst constructFetcher = (options: FetcherOptions): FetcherFunction => {\n  if ('axios' in options) {\n    return constructAxiosFetcher(options.axios, options);\n  }\n  if ('fetch' in options) {\n    return constructFetchFetcher(options.fetch, options);\n  }\n  return (params) => {\n    // adding apiKey to headers if it's provided\n    const headers = options?.apiKey\n      ? { 'X-API-KEY': options.apiKey, ...params.headers }\n      : params.headers;\n\n    return options.fetcher({ ...params, headers });\n  };\n};\n\n/** @description construct SDK with methods that fetch from API and optionally with blockchain provider calling methods */\nexport function constructSimpleSDK(options: SimpleOptions): SimpleFetchSDK;\n\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions: ProviderOptions\n): SimpleSDK;\nexport function constructSimpleSDK(\n  options: SimpleOptions,\n  providerOptions?: ProviderOptions\n): SimpleFetchSDK | SimpleSDK {\n  const fetcher = constructFetcher(options);\n\n  if (!providerOptions) {\n    const config: ConstructFetchInput = {\n      apiURL: options.apiURL,\n      chainId: options.chainId,\n      version: options.version,\n      fetcher,\n    };\n\n    // include all available functions that don't need `contractCaller`\n    const swap: SwapFetchMethods = constructPartialSDK(\n      config,\n      constructGetBalances,\n      constructGetTokens,\n      constructGetSpender,\n      constructBuildTx,\n      constructGetAdapters,\n      constructGetRate,\n      constructSwapTx\n    );\n\n    const limitOrders = constructPartialSDK(\n      config,\n      constructBuildLimitOrder,\n      constructPostLimitOrder,\n      constructGetLimitOrders,\n      constructGetLimitOrdersContract,\n      constructBuildLimitOrderTx\n    );\n\n    const nftOrders = constructPartialSDK(\n      config,\n      constructBuildNFTOrder,\n      constructPostNFTOrder,\n      constructGetNFTOrders,\n      constructGetNFTOrdersContract,\n      constructBuildNFTOrderTx\n    );\n\n    return {\n      swap,\n      limitOrders,\n      nftOrders,\n      apiURL: options.apiURL ?? API_URL,\n      chainId: options.chainId,\n      version: options.version ?? DEFAULT_VERSION,\n    };\n  }\n\n  const contractCaller = constructSimpleContractCaller(providerOptions);\n\n  const config: SDKConfig<TxHash> = {\n    apiURL: options.apiURL,\n    version: options.version,\n    chainId: options.chainId,\n    fetcher,\n    contractCaller,\n  };\n\n  const swap: SwapSDKMethods<TxHash> = constructSwapSDK(config);\n\n  const limitOrders: LimitOrderHandlers<TxHash> =\n    constructAllLimitOrdersHandlers<TxHash>(config);\n\n  const nftOrders: NFTOrderHandlers<TxHash> =\n    constructAllNFTOrdersHandlers<TxHash>(config);\n\n  return {\n    swap,\n    limitOrders,\n    nftOrders,\n    apiURL: options.apiURL ?? API_URL,\n    chainId: options.chainId,\n    version: options.version ?? DEFAULT_VERSION,\n  };\n}\n\nfunction constructSimpleContractCaller(\n  providerOptions: ProviderOptions\n): ContractCallerFunctions<TxHash> {\n  if ('ethersProviderOrSigner' in providerOptions) {\n    const {\n      staticCall,\n      transactCall: _transactCall,\n      signTypedDataCall,\n    } = constructEthersContractCaller(providerOptions, providerOptions.account);\n\n    const transactCall: TransactionContractCallerFn<TxHash> = async (\n      params\n    ) => {\n      const contractTx = await _transactCall(params);\n\n      // as soon as tx is sent\n      // returning tx hash, it's up to the user to wait for tx\n      return contractTx.hash;\n    };\n\n    return { staticCall, transactCall, signTypedDataCall };\n  }\n\n  const {\n    staticCall,\n    transactCall: _transactCall,\n    signTypedDataCall,\n  } = constructWeb3ContractCaller(\n    providerOptions.web3,\n    providerOptions.account\n  );\n\n  const transactCall: TransactionContractCallerFn<TxHash> = async (params) => {\n    const unpromiEvent = await _transactCall(params);\n\n    // as soon as tx is sent\n    // returning tx hash, it's up to the user to wait for tx\n    return new Promise<TxHash>((resolve, reject) => {\n      unpromiEvent.once('transactionHash', resolve);\n      unpromiEvent.once('error', reject);\n    });\n  };\n\n  return { staticCall, transactCall, signTypedDataCall };\n}\n","import type Web3 from 'web3';\nimport type { SendOptions } from 'web3-eth-contract';\nimport type { ContractTransaction } from '@ethersproject/contracts';\n\nimport { API_URL, DEFAULT_VERSION, SwapSide } from '../constants';\nimport {\n  SwapSDKMethods,\n  constructBuildTx,\n  constructGetAdapters,\n  constructGetBalances,\n  constructGetSpender,\n  constructGetTokens,\n  constructPartialSDK,\n  constructGetRate,\n  constructSwapSDK,\n  PriceString,\n  Address,\n  OptimalRate,\n} from '..';\nimport { assert } from 'ts-essentials';\nimport {\n  constructAxiosFetcher,\n  constructFetchFetcher,\n  constructEthersContractCaller,\n  constructWeb3ContractCaller,\n  isFetcherError,\n  Web3UnpromiEvent,\n  EthersProviderDeps,\n} from '../helpers';\n\nimport type { RateOptions } from '../methods/swap/rates';\nimport type {\n  BuildOptions,\n  TransactionParams,\n} from '../methods/swap/transaction';\nimport type {\n  AddressOrSymbol,\n  Token,\n  FetcherFunction,\n  ParaSwapVersionUnion,\n} from '../types';\nimport type { Allowance } from '../methods/swap/balance';\nimport type { AxiosRequirement } from '../helpers/fetchers/axios';\nimport { isDataWithError } from '../helpers/misc';\n\nexport type APIError = {\n  message: string;\n  status?: number;\n  data?: any;\n};\ntype Fetch = typeof fetch;\n\ntype TxResponse = Web3UnpromiEvent | ContractTransaction;\n\ntype LegacyOptions = {\n  chainId?: number;\n  apiURL?: string;\n  version?: ParaSwapVersionUnion;\n  apiKey?: string;\n  web3Provider?: Web3;\n  ethersDeps?: EthersProviderDeps; // need to be a provider with signer for approve requests\n  account?: Address;\n  axios?: AxiosRequirement;\n  fetch?: Fetch;\n};\n\n/** @deprecated */\nexport class ParaSwap {\n  sdk: Partial<SwapSDKMethods<TxResponse>> = {};\n  fetcher: FetcherFunction;\n\n  chainId: number;\n  apiURL: string;\n  version: ParaSwapVersionUnion;\n  web3Provider?: Web3;\n  ethersDeps?: EthersProviderDeps; // need to be a provider with signer for approve requests\n  account?: Address;\n\n  constructor({\n    chainId = 1,\n    apiURL = API_URL,\n    version = DEFAULT_VERSION,\n    apiKey,\n    web3Provider,\n    ethersDeps,\n    account,\n    axios,\n    fetch,\n  }: LegacyOptions) {\n    this.chainId = chainId;\n    this.apiURL = apiURL;\n    this.version = version;\n    this.web3Provider = web3Provider;\n    this.ethersDeps = ethersDeps;\n    this.account = account;\n\n    const fetcher = axios\n      ? constructAxiosFetcher(axios, { apiKey })\n      : fetch\n      ? constructFetchFetcher(fetch, { apiKey })\n      : null;\n\n    assert(fetcher, 'at least one fetcher is needed');\n    this.fetcher = fetcher;\n\n    if (!web3Provider && !ethersDeps) {\n      this.sdk = constructPartialSDK(\n        { fetcher, apiURL, version, apiKey, chainId },\n        constructGetBalances,\n        constructGetTokens,\n        constructGetSpender,\n        constructBuildTx,\n        constructGetAdapters,\n        constructGetRate\n      );\n\n      return;\n    }\n\n    const contractCaller = ethersDeps\n      ? constructEthersContractCaller(ethersDeps, account)\n      : web3Provider\n      ? constructWeb3ContractCaller(web3Provider, account)\n      : null;\n\n    if (contractCaller) {\n      this.sdk = constructSwapSDK<TxResponse>({\n        fetcher,\n        contractCaller,\n        apiURL,\n        version,\n        chainId,\n      });\n    }\n  }\n\n  private static handleAPIError(e: unknown): APIError {\n    // @CONSIDER if some errors should not be replaced\n    if (!isFetcherError(e)) {\n      return { message: `Unknown error: ${e}` };\n    }\n\n    if (!e.response) {\n      return { message: e.message };\n    }\n\n    const { status, data } = e.response;\n\n    return {\n      status,\n      message: isDataWithError(data) ? data.error : e.message,\n      data,\n    };\n  }\n\n  private static async extractHashFromTxResponse(\n    txResponse: TxResponse\n  ): Promise<string> {\n    if ('once' in txResponse) {\n      return new Promise<string>((resolve, reject) => {\n        txResponse.once('transactionHash', resolve);\n        txResponse.once('error', reject);\n      });\n    }\n\n    const { hash } = await txResponse;\n    return hash;\n  }\n\n  setWeb3Provider(web3Provider: Web3, account?: string): this {\n    const contractCaller = constructWeb3ContractCaller(web3Provider, account);\n    const { apiURL, chainId, fetcher } = this;\n\n    this.sdk = constructSwapSDK({\n      fetcher,\n      contractCaller,\n      apiURL,\n      version: this.version,\n      chainId,\n    });\n\n    this.web3Provider = web3Provider;\n    this.ethersDeps = undefined;\n    this.account = account;\n\n    return this;\n  }\n\n  setEthersProvider(ethersDeps: EthersProviderDeps, account?: string): this {\n    const contractCaller = constructEthersContractCaller(ethersDeps, account);\n    const { apiURL, chainId, fetcher } = this;\n\n    this.sdk = constructSwapSDK({\n      fetcher,\n      contractCaller,\n      apiURL,\n      version: this.version,\n      chainId,\n    });\n\n    this.web3Provider = undefined;\n    this.ethersDeps = ethersDeps;\n    this.account = account;\n\n    return this;\n  }\n\n  // @CONSIDER I still think there's no need for a class Token\n  async getTokens(): Promise<Token[] | APIError> {\n    assert(this.sdk.getTokens, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getTokens();\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getAdapters() {\n    assert(this.sdk.getAdapters, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAdapters();\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getRateByRoute(\n    route: AddressOrSymbol[],\n    amount: PriceString,\n    userAddress?: Address,\n    side: SwapSide = SwapSide.SELL,\n    options?: RateOptions,\n    srcDecimals?: number,\n    destDecimals?: number\n  ): Promise<OptimalRate | APIError> {\n    assert(this.sdk.getRateByRoute, 'sdk must be initialized with a fetcher');\n    if (route.length < 2) {\n      return { message: 'Invalid Route' };\n    }\n\n    try {\n      return await this.sdk.getRateByRoute({\n        route,\n        amount,\n        userAddress,\n        side,\n        options,\n        srcDecimals,\n        destDecimals,\n      });\n    } catch (e) {\n      // @TODO this overrides any non FetchError,\n      // including Error('Invalid DEX list')\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getRate(\n    srcToken: AddressOrSymbol,\n    destToken: AddressOrSymbol,\n    amount: PriceString,\n    userAddress?: Address,\n    side: SwapSide = SwapSide.SELL,\n    options: RateOptions = {},\n    srcDecimals?: number,\n    destDecimals?: number\n  ): Promise<OptimalRate | APIError> {\n    assert(this.sdk.getRate, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getRate({\n        srcToken,\n        destToken,\n        amount,\n        userAddress,\n        side,\n        options,\n        srcDecimals,\n        destDecimals,\n      });\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async buildTx(\n    srcToken: Address,\n    destToken: Address,\n    srcAmount: PriceString,\n    destAmount: PriceString,\n    priceRoute: OptimalRate,\n    userAddress: Address,\n    partner?: string,\n    partnerAddress?: string,\n    partnerFeeBps?: number,\n    receiver?: Address,\n    options: BuildOptions = {},\n    srcDecimals?: number,\n    destDecimals?: number,\n    permit?: string,\n    deadline?: string\n  ): Promise<TransactionParams | APIError> {\n    assert(this.sdk.buildTx, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.buildTx(\n        {\n          srcToken,\n          destToken,\n          srcAmount,\n          destAmount,\n          priceRoute,\n          userAddress,\n          partner,\n          partnerAddress,\n          partnerFeeBps,\n          receiver,\n          srcDecimals,\n          destDecimals,\n          permit,\n          deadline,\n        },\n        options\n      );\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getTokenTransferProxy(_provider?: any): Promise<Address | APIError> {\n    assert(this.sdk.getSpender, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getSpender();\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getAllowances(\n    userAddress: Address,\n    tokenAddresses: Address[]\n  ): Promise<Allowance[] | APIError> {\n    assert(this.sdk.getAllowances, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAllowances(userAddress, tokenAddresses);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getAllowance(\n    userAddress: Address,\n    tokenAddress: Address\n  ): Promise<Allowance | APIError> {\n    assert(this.sdk.getAllowance, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAllowance(userAddress, tokenAddress);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async approveTokenBulk(\n    amount: PriceString,\n    userAddress: Address,\n    tokenAddresses: Address[],\n    /** @deprecated */\n    _provider?: any // not used, can't detect if Ethers or Web3 provider without importing them\n  ): Promise<string[] | APIError> {\n    // @TODO expand sendOptions\n    assert(\n      this.sdk.approveTokenBulk,\n      'sdk must be initialized with a provider'\n    );\n    try {\n      // @TODO allow to pass Web3 specific sendOptions ({from: userAddress})\n      const txResponses = await this.sdk.approveTokenBulk(\n        amount,\n        tokenAddresses\n      );\n\n      return await Promise.all(\n        txResponses.map(ParaSwap.extractHashFromTxResponse)\n      );\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async approveToken(\n    amount: PriceString,\n    userAddress: Address,\n    tokenAddress: Address,\n    /** @deprecated */\n    _provider?: any, // not used, can't detect if Ethers or Web3 provider without importing them\n    sendOptions?: Omit<SendOptions, 'from'>\n  ): Promise<string | APIError> {\n    // @TODO expand sendOptions\n    assert(this.sdk.approveToken, 'sdk must be initialized with a provider');\n    try {\n      // @TODO allow to pass Web3 specific sendOptions ({from: userAddress})\n      const txResponse = await this.sdk.approveToken(amount, tokenAddress);\n\n      return await ParaSwap.extractHashFromTxResponse(txResponse);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getMarketNames(): Promise<string[] | APIError> {\n    assert(this.sdk.getAdapters, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getAdapters();\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getBalance(\n    userAddress: Address,\n    token: AddressOrSymbol\n  ): Promise<Token | APIError> {\n    assert(this.sdk.getBalance, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getBalance(userAddress, token);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n\n  async getBalances(userAddress: Address): Promise<Token[] | APIError> {\n    assert(this.sdk.getBalances, 'sdk must be initialized with a fetcher');\n    try {\n      return await this.sdk.getBalances(userAddress);\n    } catch (e) {\n      return ParaSwap.handleAPIError(e);\n    }\n  }\n}\n"],"names":["undefined","API_URL","DEFAULT_VERSION","ethersContractHasMethods","contract","methods","every","method","assertEthersContractHasMethods","assert","join","web3ContractHasMethods","assertWeb3ContractHasMethods","objectToFilledEntries","object","Object","entries","filter","value","map","key","String","constructSearchString","queryOptions","queryEntries","queryString","URLSearchParams","toString","isFetcherError","error","FetcherError","code","request","response","isAxiosError","message","status","Error","captureStackTrace","name","constructor","data","isDataWithError","isObject","obj","isFilledArray","array","length","getRandomInt","Math","floor","random","Number","MAX_SAFE_INTEGER","runOnceAndCache","func","result","constructGetSpender","apiURL","version","chainId","fetcher","search","network","fetchURL","_getContracts","signal","url","getContracts","getSpender","TokenTransferProxy","getAugustusSwapper","AugustusSwapper","getAugustusRFQ","AugustusRFQ","MinERC20Abi","constant","inputs","type","outputs","payable","stateMutability","approveTokenMethodFactory","contractCaller","amount","tokenAddress","overrides","spender","transactCall","address","abi","contractMethod","args","res","constructApproveToken","options","approveToken","approveTokenBulk","tokenAddresses","Promise","all","constructToken","tokenProps","tokenType","mainConnector","connectors","connectorsInput","rest","_excluded","isAllowance","arg","NOT_FOUND_RESPONSE","constructGetBalances","tokensUrl","getBalances","userAddress","tokens","getBalance","tokenAddressOrSymbol","token","getAllowances","tokenAddressesLowercaseSet","Set","toLowerCase","balances","allowances","has","allowance","getAllowance","balanceOrNotFound","constructGetAdapters","getAdapters","query","DEFAULT_PARTNER","normalizeRateOptions","restInput","excludePricingMethods","excludeContractMethods","includeContractMethods","partner","includeDEXS","excludeDEXS","excludePools","restOptions","_excluded2","_includeDEXS","_excludeDEXS","_excludePools","_excludePricingMethods","_excludeContractMethods","_includeContractMethods","transformed","PricingMethod","INVALID_ROUTE","constructGetRate","pricesUrl","getRate","srcToken","destToken","parsedOptions","priceRoute","getRateByRoute","route","_route","constructSwapTx","getSwapTxData","constructGetTokens","getTokens","ZERO_ADDRESS","baseFetchUrlGetterFactory","orderKind","constructBaseFetchUrlGetter","urlGetter","orderURLpart","sanitizeOrderData","nonceAndMeta","expiry","makerAsset","takerAsset","maker","taker","makerAmount","takerAmount","OrderNFT","buildOrderData","verifyingContract","nonce","_makerAssetAddress","_takerAssetAddress","makerAssetId","takerAssetId","makerAssetType","takerAssetType","AugustusAddress","takerInNonce","BigInt","assetAddressToUint","orderNFT","types","domain","assetAddress","assetType","AssetType","ERC20","ERC1155","ERC721","_makerAsset","_takerAsset","startsWith","constructBuildTx","transactionsURL","buildTx","params","side","AmountMismatchError","SwapSide","SELL","areAmountsCorrect","queryParams","sanitizedParams","orders","order","sanitizedOrderData","sanitizeNFTOrderData","sanitizeLimitOrderData","sanitizedOrder","signature","permitMakerAsset","takeSurplus","positiveSlippageToUser","fetchParams","builtTx","slippage","BUY","destAmount","srcAmount","inputAmount","priceRouteAmount","Order","contractTaker","AppVersion","constructBuildLimitOrder","buildLimitOrder","buildLimitOrderParams","constructSignLimitOrder","signLimitOrder","typedData","typedDataOnly","signTypedDataCall","MinAugustusRFQAbi","internalType","constructCancelLimitOrder","cancelLimitOrder","orderHash","cancelLimitOrderBulk","orderHashes","components","constructFillOrderDirectly","fillOrderDirectly","constructGetLimitOrders","getBaseFetchURLByEntityType","getLimitOrders","userParams","baseFetchURL","userURL","offset","limit","hideSmallBalances","orderBy","getRequiredBalance","getLimitOrderByHash","constructPostLimitOrder","getBaseFetchURLByOrderType","postTypedOrder","limitOrderWithSignatureAndPermit","newOrder","postLimitOrder","postP2POrder","constructApproveTokenForLimitOrder","approveMakerTokenForLimitOrder","approveTakerTokenForLimitOrder","constructGetLimitOrdersContract","getTokenTransferProxy","getLimitOrdersContract","constructBuildLimitOrderTx","buildSwapTx","getSwapAndLimitOrderRate","getLimitOrdersRate","_options","checkAndParseOrders","totalTakerAmount","takerAmountString","ContractMethod","simpleBuy","rateInput","optimalRate","buildLimitOrderTx","fillParams","buildSwapAndLimitOrderTx","destDecimals","reduce","accum","takerAssetsSet","add","makerAssetsSet","size","constructBuildNFTOrder","buildNFTOrder","buildNFTOrderParams","constructSignNFTOrder","signNFTOrder","constructCancelNFTOrder","cancelNFTOrder","cancelNFTOrderBulk","constructGetNFTOrders","getNFTOrders","getNFTOrderByHash","constructPostNFTOrder","NFTOrderWithSignatureAndPermit","postNFTLimitOrder","postNFTP2POrder","constructGetNFTOrdersContract","getNFTOrdersContract","MinNFTAbi","constructApproveTokenForNFTOrder","approveERC20ForNFTOrder","approveNFTorNFTOrder","constructBuildNFTOrderTx","getSwapAndNFTOrderRate","getNFTOrdersRate","buildNFTOrderTx","buildSwapAndNFTOrderTx","uintToAssetAddress","assetUint","constructFetcher","axios","extra","headers","apiKey","fetch","body","JSON","stringify","POSTheaders","apiHeaders","json","ok","statusText","fromEntries","config","constructContractCaller","account","providerOrSigner","ethersProviderOrSigner","Contract","EthersContract","staticCall","block","gas","restOverrides","normalizedOverrides","blockTag","gasLimit","callOverrides","callStatic","isEthersProviderWithSigner","isEthersSigner","signer","getSigner","txOverrides","txResponse","isTypedDataCapableSigner","_signTypedData","isEthersProvider","_isProvider","_isSigner","web3","currentProvider","eth","call","from","_from","preparedCall","promiEvent","send","unpromiEvent","on","bind","once","provider","isProviderWithSendMethod","_typedData","EIP712Domain","primaryType","findPrimaryType","resolve","reject","jsonrpc","baseTypeRegex","candidates","keys","candidatesSet","forEach","candidate","typedDataFields","baseType","match","Array","constructPartialSDK","funcs","sdkFuncs","sdkSlice","assign","sdk","constructSwapSDK","constructSubmitLimitOrder","prepareLimitOrder","orderData","orderWithSignature","submitLimitOrder","submitP2POrder","constructAllLimitOrdersHandlers","limitOrdersGetters","limitOrdersContractGetter","limitOrdersSubmit","limitOrdersBuild","limitOrdersSign","limitOrdersPost","limitOrdersCancel","limitOrdersApproveToken","limitOrdersFillOrderDirectly","limitOrdersBuildTx","constructSubmitNFTOrder","prepareNFTOrder","submitNFTOrder","constructAllNFTOrdersHandlers","NFTOrdersGetters","NFTOrdersContractGetter","NFTOrdersSubmit","NFTOrdersBuild","NFTOrdersSign","NFTOrdersPost","NFTOrdersCancel","NFTOrdersApproveToken","NFTOrdersBuildTx","constructFullSDK","swap","limitOrders","nftOrders","constructAxiosFetcher","constructFetchFetcher","constructSimpleSDK","providerOptions","constructSimpleContractCaller","constructEthersContractCaller","_transactCall","contractTx","hash","constructWeb3ContractCaller","ParaSwap","web3Provider","ethersDeps","handleAPIError","e","extractHashFromTxResponse","setWeb3Provider","setEthersProvider","srcDecimals","partnerAddress","partnerFeeBps","receiver","permit","deadline","_provider","txResponses","sendOptions","getMarketNames"],"mappings":"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"}