import { SwapSide } from './constants';
export declare type Address = string;
export declare type NumberAsString = string;
export declare type Adapters = {
    [exchangeKey: string]: {
        adapter: Address;
        index: number;
    }[];
};
export declare type OptimalRoute = {
    percent: number;
    swaps: OptimalSwap[];
};
export declare type OptimalSwap = {
    srcToken: Address;
    srcDecimals: number;
    destToken: Address;
    destDecimals: number;
    swapExchanges: OptimalSwapExchange<any>[];
};
export declare type OptimalSwapExchange<T> = {
    exchange: string;
    srcAmount: NumberAsString;
    destAmount: NumberAsString;
    percent: number;
    data?: T;
    poolAddresses?: Array<Address>;
};
export declare type OptionalRate = {
    exchange: string;
    srcAmount: NumberAsString;
    destAmount: NumberAsString;
    unit?: NumberAsString;
    data?: any;
};
export declare type OptimalRate = {
    blockNumber: number;
    network: number;
    srcToken: Address;
    srcDecimals: number;
    srcAmount: NumberAsString;
    srcUSD: NumberAsString | null;
    destToken: Address;
    destDecimals: number;
    destAmount: NumberAsString;
    destUSD: NumberAsString | null;
    bestRoute: OptimalRoute[];
    gasCostUSD: NumberAsString;
    gasCost: NumberAsString;
    gasCostL1Wei?: string;
    others?: OptionalRate[];
    side: SwapSide;
    contractMethod: string;
    tokenTransferProxy: Address;
    contractAddress: Address;
    maxImpact?: number;
    maxUSDImpact?: number;
    maxImpactReached?: boolean;
    partner?: string;
    partnerFee: number;
    hmac: string;
    version: ParaSwapVersion;
};
export declare enum ParaSwapVersion {
    V5 = "5",
    V6 = "6.2"
}
