"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithdrawLogic = void 0;
const tslib_1 = require("tslib");
const contracts_1 = require("./contracts");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
class WithdrawLogic extends core.Logic {
    constructor({ chainId, provider, service }) {
        super(chainId, provider);
        this.service = service;
    }
    async quote(params) {
        const { input, tokenOut } = params;
        const output = new common.TokenAmount(tokenOut, input.amount);
        return { input, output };
    }
    async build(fields, options) {
        const { input, output, balanceBps } = fields;
        const { account } = options;
        const tokenOut = output.token.wrapped;
        const agent = await this.calcAgent(account);
        const to = await this.service.getLendingPoolAddress();
        const data = contracts_1.LendingPool__factory.createInterface().encodeFunctionData('withdraw', [
            tokenOut.address,
            input.amountWei,
            agent,
        ]);
        const amountOffset = balanceBps ? common.getParamOffset(1) : undefined;
        const inputs = [core.newLogicInput({ input, balanceBps, amountOffset })];
        const wrapMode = output.token.isNative ? core.WrapMode.unwrapAfter : core.WrapMode.none;
        return core.newLogic({ to, data, inputs, wrapMode });
    }
}
exports.WithdrawLogic = WithdrawLogic;
WithdrawLogic.id = 'withdraw';
//# sourceMappingURL=logic.withdraw.js.map