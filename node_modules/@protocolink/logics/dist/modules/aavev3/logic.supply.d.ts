import { LogicOptions, serviceType } from './types';
import * as common from '@protocolink/common';
import * as core from '@protocolink/core';
export type SupplyLogicTokenList = [common.Token, common.Token][];
export type SupplyLogicParams = core.TokenToTokenExactInParams;
export type SupplyLogicFields = core.TokenToTokenExactInFields<{
    referralCode?: number;
}>;
export type SupplyLogicOptions = Pick<core.GlobalOptions, 'account'>;
export declare class SupplyLogics extends core.Logic {
    static id: string;
    readonly service: serviceType;
    constructor({ chainId, provider, service }: LogicOptions);
    getTokenList(): Promise<SupplyLogicTokenList>;
    quote(params: SupplyLogicParams): Promise<SupplyLogicFields>;
    build(fields: SupplyLogicFields, options: SupplyLogicOptions): Promise<{
        to: string;
        data: string;
        inputs: core.DataType.InputStruct[];
        wrapMode: number;
        approveTo: string;
        callback: string;
    }>;
}
