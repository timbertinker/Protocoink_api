"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BorrowLogic = void 0;
const tslib_1 = require("tslib");
const contracts_1 = require("./contracts");
const core = tslib_1.__importStar(require("@protocolink/core"));
class BorrowLogic extends core.Logic {
    constructor({ chainId, provider, service }) {
        super(chainId, provider);
        this.service = service;
    }
    async getTokenList() {
        const borrowTokens = await this.service.getBorrowTokens();
        const tokenList = [];
        for (const { asset } of borrowTokens) {
            if (asset.isWrapped) {
                tokenList.push(asset.unwrapped);
            }
            tokenList.push(asset);
        }
        return tokenList;
    }
    async build(fields, options) {
        const { output, interestRateMode, referralCode = 0 } = fields;
        const { account } = options;
        const tokenOut = output.token.wrapped;
        const to = await this.service.getPoolAddress();
        const data = contracts_1.Pool__factory.createInterface().encodeFunctionData('borrow', [
            tokenOut.address,
            output.amountWei,
            interestRateMode,
            referralCode,
            account,
        ]);
        const wrapMode = output.token.isNative ? core.WrapMode.unwrapAfter : core.WrapMode.none;
        return core.newLogic({ to, data, wrapMode });
    }
}
exports.BorrowLogic = BorrowLogic;
BorrowLogic.id = 'borrow';
//# sourceMappingURL=logic.borrow.js.map