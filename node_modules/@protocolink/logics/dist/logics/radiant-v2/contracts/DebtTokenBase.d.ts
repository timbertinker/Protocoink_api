import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';
export interface DebtTokenBaseInterface extends utils.Interface {
    functions: {
        'approveDelegation(address,uint256)': FunctionFragment;
        'borrowAllowance(address,address)': FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: 'approveDelegation' | 'borrowAllowance'): FunctionFragment;
    encodeFunctionData(functionFragment: 'approveDelegation', values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'borrowAllowance', values: [string, string]): string;
    decodeFunctionResult(functionFragment: 'approveDelegation', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'borrowAllowance', data: BytesLike): Result;
    events: {};
}
export interface DebtTokenBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DebtTokenBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        approveDelegation(delegatee: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        borrowAllowance(fromUser: string, toUser: string, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    approveDelegation(delegatee: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    borrowAllowance(fromUser: string, toUser: string, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        approveDelegation(delegatee: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        borrowAllowance(fromUser: string, toUser: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        approveDelegation(delegatee: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        borrowAllowance(fromUser: string, toUser: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        approveDelegation(delegatee: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        borrowAllowance(fromUser: string, toUser: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
