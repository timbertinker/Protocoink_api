"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendTokenLogic = void 0;
const tslib_1 = require("tslib");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const utils_1 = require("../../utils");
class SendTokenLogic extends core.Logic {
    async getTokenList() {
        return await (0, utils_1.getUnifiedTokens)(this.chainId);
    }
    async build(fields) {
        const { input, recipient, balanceBps } = fields;
        let to;
        let data;
        let amountOffset;
        if (input.token.isNative) {
            to = recipient;
            data = '0x';
            if (balanceBps)
                amountOffset = core.OFFSET_NOT_USED;
        }
        else {
            to = input.token.address;
            data = common.ERC20__factory.createInterface().encodeFunctionData('transfer', [recipient, input.amountWei]);
            if (balanceBps)
                amountOffset = common.getParamOffset(1);
        }
        const inputs = [core.newLogicInput({ input, balanceBps, amountOffset })];
        return core.newLogic({ to, data, inputs });
    }
}
exports.SendTokenLogic = SendTokenLogic;
SendTokenLogic.id = 'send-token';
SendTokenLogic.protocolId = 'utility';
SendTokenLogic.supportedChainIds = common.networks.map(({ chainId }) => chainId);
//# sourceMappingURL=logic.send-token.js.map