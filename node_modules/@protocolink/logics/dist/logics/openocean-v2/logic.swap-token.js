"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapTokenLogic = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("../../utils");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
const tiny_invariant_1 = tslib_1.__importDefault(require("tiny-invariant"));
const slippage_1 = require("./slippage");
class SwapTokenLogic extends core.Logic {
    async getTokenList() {
        const url = (0, configs_1.getApiUrl)(this.chainId);
        const resp = await utils_1.axios.get(url + '/tokenList');
        const tokens = resp.data.data;
        const tokenList = [];
        for (const { address, decimals, symbol, name, icon } of tokens) {
            tokenList.push(new common.Token(this.chainId, address, decimals, symbol, name, icon));
        }
        return tokenList;
    }
    // If you wish to exclude quotes from a specific DEX, you can include the corresponding DEX ID
    // in the 'disabledDexIds' parameter. You can retrieve the DEX IDs from the following API:
    // https://open-api.openocean.finance/v3/{chainId}/dexList
    async quote(params) {
        var _a;
        const { input, tokenOut, disabledDexIds } = params;
        const url = (0, configs_1.getApiUrl)(this.chainId);
        const gasPrice = (0, configs_1.getGasPrice)(this.chainId);
        let slippage = (0, slippage_1.slippageToOpenOcean)((_a = params.slippage) !== null && _a !== void 0 ? _a : 0);
        const resp = await utils_1.axios.get(url + '/quote', {
            params: {
                inTokenAddress: input.token.address,
                outTokenAddress: tokenOut.address,
                amount: input.amount,
                gasPrice,
                slippage,
                disabledDexIds,
            },
        });
        (0, tiny_invariant_1.default)(resp.data.code === 200, 'no route found or price impact too high');
        slippage = (0, slippage_1.slippageToProtocolink)(slippage);
        const { outAmount } = resp.data.data;
        const output = new common.TokenAmount(tokenOut).setWei(outAmount);
        return { input, output, slippage, disabledDexIds };
    }
    // Different gas_price will lead to different routes.
    // This is due to that OpenOcean calculates the best overall return.
    // The best overall return =  out_value - tx cost and the tx_cost = gas_used & gas_price
    async build(fields, options) {
        var _a;
        const { input, output, disabledDexIds } = fields;
        const { account } = options;
        const url = (0, configs_1.getApiUrl)(this.chainId);
        const gasPrice = (0, configs_1.getGasPrice)(this.chainId);
        const agent = await this.calcAgent(account);
        const slippage = (0, slippage_1.slippageToOpenOcean)((_a = fields.slippage) !== null && _a !== void 0 ? _a : 0);
        const resp = await utils_1.axios.get(url + '/swap_quote', {
            params: {
                inTokenAddress: input.token.address,
                outTokenAddress: output.token.address,
                amount: input.amount,
                gasPrice,
                slippage,
                account: agent,
                disabledDexIds,
            },
        });
        const { to, data } = resp.data.data;
        const inputs = [core.newLogicInput({ input })];
        return core.newLogic({ to, data, inputs });
    }
}
exports.SwapTokenLogic = SwapTokenLogic;
SwapTokenLogic.id = 'swap-token';
SwapTokenLogic.protocolId = 'openocean-v2';
SwapTokenLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.swap-token.js.map