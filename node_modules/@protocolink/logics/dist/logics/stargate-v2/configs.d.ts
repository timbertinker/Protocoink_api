import * as common from '@protocolink/common';
export declare enum StargateChainId {
    BNB = 102,
    POLYGON_ZKEVM = 158
}
export declare enum EndpointId {
    OFT = 0,
    ETHEREUM = 30101,
    BNB = 30102,
    AVALANCHE = 30106,
    POLYGON = 30109,
    ARBITRUM = 30110,
    OPTIMISM = 30111,
    METIS = 30151,
    BASE = 30184,
    IOTA = 30284
}
export declare enum PoolId {
    OFT = 0,
    USDC = 1,
    USDT = 2,
    ETH = 13,
    METIS = 17
}
export interface Pool {
    id: number;
    token: common.Token;
    address: string;
    proxyOFT?: string;
    destinations: {
        chainId: number;
        endpointId: number;
    }[];
}
export interface PoolConfig extends Pool {
    chainId: number;
}
export interface Config {
    id: number;
    eid: number;
    chainId: number;
    pools: Pool[];
}
export declare const configs: Config[];
export declare const supportedChainIds: number[], configMap: Record<number, Config>, tokensMap: Record<number, Set<common.Token>>, poolConfigMapById: Record<number, Record<number, PoolConfig>>, poolConfigMapByToken: Record<number, Record<string, PoolConfig>>;
export declare function getMarkets(chainId: number): Pool[];
export declare function getStargateChainId(chainId: number): number;
export declare function getEndpointId(chainId: number): number;
export declare function getTokens(chainId: number): common.Token[];
export declare function getTokenByPoolId(chainId: number, poolId: number): common.Token;
export declare function getPoolConfigByTokenAddress(chainId: number, tokenAddress: string): PoolConfig;
export declare function getPoolByTokenAddress(chainId: number, tokenAddress: string): string;
export declare function getDestChainIds(srcChainId: number, srcToken: common.Token): number[];
export declare function getDestToken(srcToken: common.Token, destChainId: number): common.Token;
