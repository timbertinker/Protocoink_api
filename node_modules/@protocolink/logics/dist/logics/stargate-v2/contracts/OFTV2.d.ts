import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';
export declare namespace ICommonOFT {
    type LzCallParamsStruct = {
        refundAddress: string;
        zroPaymentAddress: string;
        adapterParams: BytesLike;
    };
    type LzCallParamsStructOutput = [string, string, string] & {
        refundAddress: string;
        zroPaymentAddress: string;
        adapterParams: string;
    };
}
export interface OFTV2Interface extends utils.Interface {
    functions: {
        'BP_DENOMINATOR()': FunctionFragment;
        'NO_EXTRA_GAS()': FunctionFragment;
        'PT_SEND()': FunctionFragment;
        'PT_SEND_AND_CALL()': FunctionFragment;
        'allowance(address,address)': FunctionFragment;
        'amountsForCall(uint16,bytes,uint64)': FunctionFragment;
        'approve(address,uint256)': FunctionFragment;
        'balanceOf(address)': FunctionFragment;
        'callOnOFTReceived(uint16,bytes,uint64,bytes32,address,uint256,bytes,uint256)': FunctionFragment;
        'chainIdToFeeBps(uint16)': FunctionFragment;
        'chainIdToInboundCap(uint16)': FunctionFragment;
        'chainIdToLastReceivedTimestamp(uint16)': FunctionFragment;
        'chainIdToLastSentTimestamp(uint16)': FunctionFragment;
        'chainIdToOutboundCap(uint16)': FunctionFragment;
        'chainIdToReceivedTokenAmount(uint16)': FunctionFragment;
        'chainIdToSentTokenAmount(uint16)': FunctionFragment;
        'circulatingSupply()': FunctionFragment;
        'decimals()': FunctionFragment;
        'decreaseAllowance(address,uint256)': FunctionFragment;
        'defaultFeeBp()': FunctionFragment;
        'estimateSendAndCallFee(uint16,bytes32,uint256,bytes,uint64,bool,bytes)': FunctionFragment;
        'estimateSendFee(uint16,bytes32,uint256,bool,bytes)': FunctionFragment;
        'failedMessages(uint16,bytes,uint64)': FunctionFragment;
        'feeOwner()': FunctionFragment;
        'forceResumeReceive(uint16,bytes)': FunctionFragment;
        'getConfig(uint16,uint16,address,uint256)': FunctionFragment;
        'getTrustedRemoteAddress(uint16)': FunctionFragment;
        'increaseAllowance(address,uint256)': FunctionFragment;
        'isTrustedRemote(uint16,bytes)': FunctionFragment;
        'lzEndpoint()': FunctionFragment;
        'lzReceive(uint16,bytes,uint64,bytes)': FunctionFragment;
        'minDstGasLookup(uint16,uint16)': FunctionFragment;
        'name()': FunctionFragment;
        'nonblockingLzReceive(uint16,bytes,uint64,bytes)': FunctionFragment;
        'owner()': FunctionFragment;
        'pause()': FunctionFragment;
        'paused()': FunctionFragment;
        'precrime()': FunctionFragment;
        'quoteOFTFee(uint16,uint256)': FunctionFragment;
        'renounceOwnership()': FunctionFragment;
        'retryMessage(uint16,bytes,uint64,bytes)': FunctionFragment;
        'sendAndCall(address,uint16,bytes32,uint256,uint256,bytes,uint64,(address,address,bytes))': FunctionFragment;
        'sendFrom(address,uint16,bytes32,uint256,uint256,(address,address,bytes))': FunctionFragment;
        'setConfig(uint16,uint16,uint256,bytes)': FunctionFragment;
        'setDefaultFeeBp(uint16)': FunctionFragment;
        'setFeeBp(uint16,bool,uint16)': FunctionFragment;
        'setFeeOwner(address)': FunctionFragment;
        'setInboundCap(uint16,uint256)': FunctionFragment;
        'setMinDstGas(uint16,uint16,uint256)': FunctionFragment;
        'setOutboundCap(uint16,uint256)': FunctionFragment;
        'setPrecrime(address)': FunctionFragment;
        'setReceiveVersion(uint16)': FunctionFragment;
        'setSendVersion(uint16)': FunctionFragment;
        'setTrustedRemote(uint16,bytes)': FunctionFragment;
        'setTrustedRemoteAddress(uint16,bytes)': FunctionFragment;
        'setUseCustomAdapterParams(bool)': FunctionFragment;
        'setWhitelist(address,bool)': FunctionFragment;
        'sharedDecimals()': FunctionFragment;
        'supportsInterface(bytes4)': FunctionFragment;
        'symbol()': FunctionFragment;
        'token()': FunctionFragment;
        'totalSupply()': FunctionFragment;
        'transfer(address,uint256)': FunctionFragment;
        'transferFrom(address,address,uint256)': FunctionFragment;
        'transferOwnership(address)': FunctionFragment;
        'trustedRemoteLookup(uint16)': FunctionFragment;
        'unpause()': FunctionFragment;
        'useCustomAdapterParams()': FunctionFragment;
        'whitelist(address)': FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: 'BP_DENOMINATOR' | 'NO_EXTRA_GAS' | 'PT_SEND' | 'PT_SEND_AND_CALL' | 'allowance' | 'amountsForCall' | 'approve' | 'balanceOf' | 'callOnOFTReceived' | 'chainIdToFeeBps' | 'chainIdToInboundCap' | 'chainIdToLastReceivedTimestamp' | 'chainIdToLastSentTimestamp' | 'chainIdToOutboundCap' | 'chainIdToReceivedTokenAmount' | 'chainIdToSentTokenAmount' | 'circulatingSupply' | 'decimals' | 'decreaseAllowance' | 'defaultFeeBp' | 'estimateSendAndCallFee' | 'estimateSendFee' | 'failedMessages' | 'feeOwner' | 'forceResumeReceive' | 'getConfig' | 'getTrustedRemoteAddress' | 'increaseAllowance' | 'isTrustedRemote' | 'lzEndpoint' | 'lzReceive' | 'minDstGasLookup' | 'name' | 'nonblockingLzReceive' | 'owner' | 'pause' | 'paused' | 'precrime' | 'quoteOFTFee' | 'renounceOwnership' | 'retryMessage' | 'sendAndCall' | 'sendFrom' | 'setConfig' | 'setDefaultFeeBp' | 'setFeeBp' | 'setFeeOwner' | 'setInboundCap' | 'setMinDstGas' | 'setOutboundCap' | 'setPrecrime' | 'setReceiveVersion' | 'setSendVersion' | 'setTrustedRemote' | 'setTrustedRemoteAddress' | 'setUseCustomAdapterParams' | 'setWhitelist' | 'sharedDecimals' | 'supportsInterface' | 'symbol' | 'token' | 'totalSupply' | 'transfer' | 'transferFrom' | 'transferOwnership' | 'trustedRemoteLookup' | 'unpause' | 'useCustomAdapterParams' | 'whitelist'): FunctionFragment;
    encodeFunctionData(functionFragment: 'BP_DENOMINATOR', values?: undefined): string;
    encodeFunctionData(functionFragment: 'NO_EXTRA_GAS', values?: undefined): string;
    encodeFunctionData(functionFragment: 'PT_SEND', values?: undefined): string;
    encodeFunctionData(functionFragment: 'PT_SEND_AND_CALL', values?: undefined): string;
    encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
    encodeFunctionData(functionFragment: 'amountsForCall', values: [BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
    encodeFunctionData(functionFragment: 'callOnOFTReceived', values: [BigNumberish, BytesLike, BigNumberish, BytesLike, string, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'chainIdToFeeBps', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'chainIdToInboundCap', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'chainIdToLastReceivedTimestamp', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'chainIdToLastSentTimestamp', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'chainIdToOutboundCap', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'chainIdToReceivedTokenAmount', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'chainIdToSentTokenAmount', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'circulatingSupply', values?: undefined): string;
    encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
    encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'defaultFeeBp', values?: undefined): string;
    encodeFunctionData(functionFragment: 'estimateSendAndCallFee', values: [BigNumberish, BytesLike, BigNumberish, BytesLike, BigNumberish, boolean, BytesLike]): string;
    encodeFunctionData(functionFragment: 'estimateSendFee', values: [BigNumberish, BytesLike, BigNumberish, boolean, BytesLike]): string;
    encodeFunctionData(functionFragment: 'failedMessages', values: [BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'feeOwner', values?: undefined): string;
    encodeFunctionData(functionFragment: 'forceResumeReceive', values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'getConfig', values: [BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'getTrustedRemoteAddress', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'isTrustedRemote', values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'lzEndpoint', values?: undefined): string;
    encodeFunctionData(functionFragment: 'lzReceive', values: [BigNumberish, BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'minDstGasLookup', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'name', values?: undefined): string;
    encodeFunctionData(functionFragment: 'nonblockingLzReceive', values: [BigNumberish, BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
    encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
    encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
    encodeFunctionData(functionFragment: 'precrime', values?: undefined): string;
    encodeFunctionData(functionFragment: 'quoteOFTFee', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
    encodeFunctionData(functionFragment: 'retryMessage', values: [BigNumberish, BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'sendAndCall', values: [
        string,
        BigNumberish,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BigNumberish,
        ICommonOFT.LzCallParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: 'sendFrom', values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish, ICommonOFT.LzCallParamsStruct]): string;
    encodeFunctionData(functionFragment: 'setConfig', values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'setDefaultFeeBp', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setFeeBp', values: [BigNumberish, boolean, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setFeeOwner', values: [string]): string;
    encodeFunctionData(functionFragment: 'setInboundCap', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setMinDstGas', values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setOutboundCap', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setPrecrime', values: [string]): string;
    encodeFunctionData(functionFragment: 'setReceiveVersion', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setSendVersion', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setTrustedRemote', values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'setTrustedRemoteAddress', values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'setUseCustomAdapterParams', values: [boolean]): string;
    encodeFunctionData(functionFragment: 'setWhitelist', values: [string, boolean]): string;
    encodeFunctionData(functionFragment: 'sharedDecimals', values?: undefined): string;
    encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
    encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
    encodeFunctionData(functionFragment: 'token', values?: undefined): string;
    encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
    encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
    encodeFunctionData(functionFragment: 'trustedRemoteLookup', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
    encodeFunctionData(functionFragment: 'useCustomAdapterParams', values?: undefined): string;
    encodeFunctionData(functionFragment: 'whitelist', values: [string]): string;
    decodeFunctionResult(functionFragment: 'BP_DENOMINATOR', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'NO_EXTRA_GAS', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'PT_SEND', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'PT_SEND_AND_CALL', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'amountsForCall', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'callOnOFTReceived', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'chainIdToFeeBps', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'chainIdToInboundCap', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'chainIdToLastReceivedTimestamp', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'chainIdToLastSentTimestamp', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'chainIdToOutboundCap', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'chainIdToReceivedTokenAmount', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'chainIdToSentTokenAmount', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'circulatingSupply', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'defaultFeeBp', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'estimateSendAndCallFee', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'estimateSendFee', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'failedMessages', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'feeOwner', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'forceResumeReceive', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getTrustedRemoteAddress', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isTrustedRemote', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'lzEndpoint', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'lzReceive', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'minDstGasLookup', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'nonblockingLzReceive', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'precrime', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'quoteOFTFee', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'retryMessage', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'sendAndCall', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'sendFrom', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setDefaultFeeBp', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setFeeBp', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setFeeOwner', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setInboundCap', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setMinDstGas', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setOutboundCap', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setPrecrime', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setReceiveVersion', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setSendVersion', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setTrustedRemote', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setTrustedRemoteAddress', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setUseCustomAdapterParams', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setWhitelist', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'sharedDecimals', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'trustedRemoteLookup', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'useCustomAdapterParams', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
    events: {
        'Approval(address,address,uint256)': EventFragment;
        'CallOFTReceivedSuccess(uint16,bytes,uint64,bytes32)': EventFragment;
        'DropFailedMessage(uint16,bytes,uint64)': EventFragment;
        'FallbackWithdraw(address,uint256)': EventFragment;
        'MessageFailed(uint16,bytes,uint64,bytes,bytes)': EventFragment;
        'NonContractAddress(address)': EventFragment;
        'OwnershipTransferred(address,address)': EventFragment;
        'Paused(address)': EventFragment;
        'ReceiveFromChain(uint16,address,uint256)': EventFragment;
        'RetryMessageSuccess(uint16,bytes,uint64,bytes32)': EventFragment;
        'SendToChain(uint16,address,bytes32,uint256)': EventFragment;
        'SetDefaultFeeBp(uint16)': EventFragment;
        'SetFeeBp(uint16,bool,uint16)': EventFragment;
        'SetFeeOwner(address)': EventFragment;
        'SetInboundCap(uint16,uint256)': EventFragment;
        'SetMinDstGas(uint16,uint16,uint256)': EventFragment;
        'SetOperator(address)': EventFragment;
        'SetOutboundCap(uint16,uint256)': EventFragment;
        'SetPrecrime(address)': EventFragment;
        'SetTrustedRemote(uint16,bytes)': EventFragment;
        'SetTrustedRemoteAddress(uint16,bytes)': EventFragment;
        'SetUseCustomAdapterParams(bool)': EventFragment;
        'SetWhitelist(address,bool)': EventFragment;
        'Transfer(address,address,uint256)': EventFragment;
        'Unpaused(address)': EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'CallOFTReceivedSuccess'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'DropFailedMessage'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'FallbackWithdraw'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'MessageFailed'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'NonContractAddress'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'ReceiveFromChain'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'RetryMessageSuccess'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SendToChain'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetDefaultFeeBp'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetFeeBp'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetFeeOwner'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetInboundCap'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetMinDstGas'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetOperator'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetOutboundCap'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetPrecrime'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetTrustedRemote'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetTrustedRemoteAddress'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetUseCustomAdapterParams'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetWhitelist'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}
export interface ApprovalEventObject {
    owner: string;
    spender: string;
    value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;
export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
export interface CallOFTReceivedSuccessEventObject {
    _srcChainId: number;
    _srcAddress: string;
    _nonce: BigNumber;
    _hash: string;
}
export type CallOFTReceivedSuccessEvent = TypedEvent<[
    number,
    string,
    BigNumber,
    string
], CallOFTReceivedSuccessEventObject>;
export type CallOFTReceivedSuccessEventFilter = TypedEventFilter<CallOFTReceivedSuccessEvent>;
export interface DropFailedMessageEventObject {
    srcChainId: number;
    srcAddress: string;
    nonce: BigNumber;
}
export type DropFailedMessageEvent = TypedEvent<[number, string, BigNumber], DropFailedMessageEventObject>;
export type DropFailedMessageEventFilter = TypedEventFilter<DropFailedMessageEvent>;
export interface FallbackWithdrawEventObject {
    to: string;
    amount: BigNumber;
}
export type FallbackWithdrawEvent = TypedEvent<[string, BigNumber], FallbackWithdrawEventObject>;
export type FallbackWithdrawEventFilter = TypedEventFilter<FallbackWithdrawEvent>;
export interface MessageFailedEventObject {
    _srcChainId: number;
    _srcAddress: string;
    _nonce: BigNumber;
    _payload: string;
    _reason: string;
}
export type MessageFailedEvent = TypedEvent<[number, string, BigNumber, string, string], MessageFailedEventObject>;
export type MessageFailedEventFilter = TypedEventFilter<MessageFailedEvent>;
export interface NonContractAddressEventObject {
    _address: string;
}
export type NonContractAddressEvent = TypedEvent<[string], NonContractAddressEventObject>;
export type NonContractAddressEventFilter = TypedEventFilter<NonContractAddressEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface PausedEventObject {
    account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;
export type PausedEventFilter = TypedEventFilter<PausedEvent>;
export interface ReceiveFromChainEventObject {
    _srcChainId: number;
    _to: string;
    _amount: BigNumber;
}
export type ReceiveFromChainEvent = TypedEvent<[number, string, BigNumber], ReceiveFromChainEventObject>;
export type ReceiveFromChainEventFilter = TypedEventFilter<ReceiveFromChainEvent>;
export interface RetryMessageSuccessEventObject {
    _srcChainId: number;
    _srcAddress: string;
    _nonce: BigNumber;
    _payloadHash: string;
}
export type RetryMessageSuccessEvent = TypedEvent<[number, string, BigNumber, string], RetryMessageSuccessEventObject>;
export type RetryMessageSuccessEventFilter = TypedEventFilter<RetryMessageSuccessEvent>;
export interface SendToChainEventObject {
    _dstChainId: number;
    _from: string;
    _toAddress: string;
    _amount: BigNumber;
}
export type SendToChainEvent = TypedEvent<[number, string, string, BigNumber], SendToChainEventObject>;
export type SendToChainEventFilter = TypedEventFilter<SendToChainEvent>;
export interface SetDefaultFeeBpEventObject {
    feeBp: number;
}
export type SetDefaultFeeBpEvent = TypedEvent<[number], SetDefaultFeeBpEventObject>;
export type SetDefaultFeeBpEventFilter = TypedEventFilter<SetDefaultFeeBpEvent>;
export interface SetFeeBpEventObject {
    dstchainId: number;
    enabled: boolean;
    feeBp: number;
}
export type SetFeeBpEvent = TypedEvent<[number, boolean, number], SetFeeBpEventObject>;
export type SetFeeBpEventFilter = TypedEventFilter<SetFeeBpEvent>;
export interface SetFeeOwnerEventObject {
    feeOwner: string;
}
export type SetFeeOwnerEvent = TypedEvent<[string], SetFeeOwnerEventObject>;
export type SetFeeOwnerEventFilter = TypedEventFilter<SetFeeOwnerEvent>;
export interface SetInboundCapEventObject {
    chainId: number;
    cap: BigNumber;
}
export type SetInboundCapEvent = TypedEvent<[number, BigNumber], SetInboundCapEventObject>;
export type SetInboundCapEventFilter = TypedEventFilter<SetInboundCapEvent>;
export interface SetMinDstGasEventObject {
    _dstChainId: number;
    _type: number;
    _minDstGas: BigNumber;
}
export type SetMinDstGasEvent = TypedEvent<[number, number, BigNumber], SetMinDstGasEventObject>;
export type SetMinDstGasEventFilter = TypedEventFilter<SetMinDstGasEvent>;
export interface SetOperatorEventObject {
    newOperator: string;
}
export type SetOperatorEvent = TypedEvent<[string], SetOperatorEventObject>;
export type SetOperatorEventFilter = TypedEventFilter<SetOperatorEvent>;
export interface SetOutboundCapEventObject {
    chainId: number;
    cap: BigNumber;
}
export type SetOutboundCapEvent = TypedEvent<[number, BigNumber], SetOutboundCapEventObject>;
export type SetOutboundCapEventFilter = TypedEventFilter<SetOutboundCapEvent>;
export interface SetPrecrimeEventObject {
    precrime: string;
}
export type SetPrecrimeEvent = TypedEvent<[string], SetPrecrimeEventObject>;
export type SetPrecrimeEventFilter = TypedEventFilter<SetPrecrimeEvent>;
export interface SetTrustedRemoteEventObject {
    _remoteChainId: number;
    _path: string;
}
export type SetTrustedRemoteEvent = TypedEvent<[number, string], SetTrustedRemoteEventObject>;
export type SetTrustedRemoteEventFilter = TypedEventFilter<SetTrustedRemoteEvent>;
export interface SetTrustedRemoteAddressEventObject {
    _remoteChainId: number;
    _remoteAddress: string;
}
export type SetTrustedRemoteAddressEvent = TypedEvent<[number, string], SetTrustedRemoteAddressEventObject>;
export type SetTrustedRemoteAddressEventFilter = TypedEventFilter<SetTrustedRemoteAddressEvent>;
export interface SetUseCustomAdapterParamsEventObject {
    _useCustomAdapterParams: boolean;
}
export type SetUseCustomAdapterParamsEvent = TypedEvent<[boolean], SetUseCustomAdapterParamsEventObject>;
export type SetUseCustomAdapterParamsEventFilter = TypedEventFilter<SetUseCustomAdapterParamsEvent>;
export interface SetWhitelistEventObject {
    addr: string;
    isWhitelist: boolean;
}
export type SetWhitelistEvent = TypedEvent<[string, boolean], SetWhitelistEventObject>;
export type SetWhitelistEventFilter = TypedEventFilter<SetWhitelistEvent>;
export interface TransferEventObject {
    from: string;
    to: string;
    value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;
export type TransferEventFilter = TypedEventFilter<TransferEvent>;
export interface UnpausedEventObject {
    account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;
export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;
export interface OFTV2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OFTV2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        BP_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;
        NO_EXTRA_GAS(overrides?: CallOverrides): Promise<[BigNumber]>;
        PT_SEND(overrides?: CallOverrides): Promise<[number]>;
        PT_SEND_AND_CALL(overrides?: CallOverrides): Promise<[number]>;
        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        amountsForCall(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, boolean] & {
            amount: BigNumber;
            credited: boolean;
        }>;
        approve(spender: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        callOnOFTReceived(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _from: BytesLike, _to: string, _amount: BigNumberish, _payload: BytesLike, _gasForCall: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        chainIdToFeeBps(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number, boolean] & {
            feeBP: number;
            enabled: boolean;
        }>;
        chainIdToInboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        chainIdToLastReceivedTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        chainIdToLastSentTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        chainIdToOutboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        chainIdToReceivedTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        chainIdToSentTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        circulatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        decimals(overrides?: CallOverrides): Promise<[number]>;
        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        defaultFeeBp(overrides?: CallOverrides): Promise<[number]>;
        estimateSendAndCallFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        estimateSendFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        failedMessages(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        feeOwner(overrides?: CallOverrides): Promise<[string]>;
        forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        getTrustedRemoteAddress(_remoteChainId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        lzEndpoint(overrides?: CallOverrides): Promise<[string]>;
        lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        name(overrides?: CallOverrides): Promise<[string]>;
        nonblockingLzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        pause(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        precrime(overrides?: CallOverrides): Promise<[string]>;
        quoteOFTFee(_dstChainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        retryMessage(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        sendAndCall(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        sendFrom(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setDefaultFeeBp(_feeBp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setFeeBp(_dstChainId: BigNumberish, _enabled: boolean, _feeBp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setFeeOwner(_feeOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setInboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setOutboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setPrecrime(_precrime: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setReceiveVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setSendVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setTrustedRemoteAddress(_remoteChainId: BigNumberish, _remoteAddress: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setUseCustomAdapterParams(_useCustomAdapterParams: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setWhitelist(addr: string, isWhitelist: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<[number]>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        symbol(overrides?: CallOverrides): Promise<[string]>;
        token(overrides?: CallOverrides): Promise<[string]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        transfer(to: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        transferFrom(from: string, to: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        unpause(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        useCustomAdapterParams(overrides?: CallOverrides): Promise<[boolean]>;
        whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
    };
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;
    NO_EXTRA_GAS(overrides?: CallOverrides): Promise<BigNumber>;
    PT_SEND(overrides?: CallOverrides): Promise<number>;
    PT_SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;
    amountsForCall(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, boolean] & {
        amount: BigNumber;
        credited: boolean;
    }>;
    approve(spender: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
    callOnOFTReceived(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _from: BytesLike, _to: string, _amount: BigNumberish, _payload: BytesLike, _gasForCall: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    chainIdToFeeBps(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number, boolean] & {
        feeBP: number;
        enabled: boolean;
    }>;
    chainIdToInboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    chainIdToLastReceivedTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    chainIdToLastSentTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    chainIdToOutboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    chainIdToReceivedTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    chainIdToSentTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;
    decimals(overrides?: CallOverrides): Promise<number>;
    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    defaultFeeBp(overrides?: CallOverrides): Promise<number>;
    estimateSendAndCallFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    estimateSendFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    failedMessages(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<string>;
    feeOwner(overrides?: CallOverrides): Promise<string>;
    forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<string>;
    getTrustedRemoteAddress(_remoteChainId: BigNumberish, overrides?: CallOverrides): Promise<string>;
    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    lzEndpoint(overrides?: CallOverrides): Promise<string>;
    lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    name(overrides?: CallOverrides): Promise<string>;
    nonblockingLzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    pause(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    precrime(overrides?: CallOverrides): Promise<string>;
    quoteOFTFee(_dstChainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    renounceOwnership(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    retryMessage(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    sendAndCall(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    sendFrom(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setDefaultFeeBp(_feeBp: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setFeeBp(_dstChainId: BigNumberish, _enabled: boolean, _feeBp: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setFeeOwner(_feeOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setInboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setOutboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setPrecrime(_precrime: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setReceiveVersion(_version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setSendVersion(_version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setTrustedRemoteAddress(_remoteChainId: BigNumberish, _remoteAddress: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setUseCustomAdapterParams(_useCustomAdapterParams: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setWhitelist(addr: string, isWhitelist: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    sharedDecimals(overrides?: CallOverrides): Promise<number>;
    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    symbol(overrides?: CallOverrides): Promise<string>;
    token(overrides?: CallOverrides): Promise<string>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    transfer(to: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    transferFrom(from: string, to: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    unpause(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    useCustomAdapterParams(overrides?: CallOverrides): Promise<boolean>;
    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;
        NO_EXTRA_GAS(overrides?: CallOverrides): Promise<BigNumber>;
        PT_SEND(overrides?: CallOverrides): Promise<number>;
        PT_SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;
        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;
        amountsForCall(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, boolean] & {
            amount: BigNumber;
            credited: boolean;
        }>;
        approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
        callOnOFTReceived(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _from: BytesLike, _to: string, _amount: BigNumberish, _payload: BytesLike, _gasForCall: BigNumberish, overrides?: CallOverrides): Promise<void>;
        chainIdToFeeBps(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number, boolean] & {
            feeBP: number;
            enabled: boolean;
        }>;
        chainIdToInboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToLastReceivedTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToLastSentTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToOutboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToReceivedTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToSentTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<number>;
        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        defaultFeeBp(overrides?: CallOverrides): Promise<number>;
        estimateSendAndCallFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        estimateSendFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        failedMessages(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<string>;
        feeOwner(overrides?: CallOverrides): Promise<string>;
        forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<void>;
        getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getTrustedRemoteAddress(_remoteChainId: BigNumberish, overrides?: CallOverrides): Promise<string>;
        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        lzEndpoint(overrides?: CallOverrides): Promise<string>;
        lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: CallOverrides): Promise<void>;
        minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<string>;
        nonblockingLzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        pause(overrides?: CallOverrides): Promise<void>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        precrime(overrides?: CallOverrides): Promise<string>;
        quoteOFTFee(_dstChainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        retryMessage(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: CallOverrides): Promise<void>;
        sendAndCall(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: CallOverrides): Promise<void>;
        sendFrom(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: CallOverrides): Promise<void>;
        setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: CallOverrides): Promise<void>;
        setDefaultFeeBp(_feeBp: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setFeeBp(_dstChainId: BigNumberish, _enabled: boolean, _feeBp: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setFeeOwner(_feeOwner: string, overrides?: CallOverrides): Promise<void>;
        setInboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setOutboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setPrecrime(_precrime: string, overrides?: CallOverrides): Promise<void>;
        setReceiveVersion(_version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setSendVersion(_version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: CallOverrides): Promise<void>;
        setTrustedRemoteAddress(_remoteChainId: BigNumberish, _remoteAddress: BytesLike, overrides?: CallOverrides): Promise<void>;
        setUseCustomAdapterParams(_useCustomAdapterParams: boolean, overrides?: CallOverrides): Promise<void>;
        setWhitelist(addr: string, isWhitelist: boolean, overrides?: CallOverrides): Promise<void>;
        sharedDecimals(overrides?: CallOverrides): Promise<number>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        symbol(overrides?: CallOverrides): Promise<string>;
        token(overrides?: CallOverrides): Promise<string>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        transferFrom(from: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        unpause(overrides?: CallOverrides): Promise<void>;
        useCustomAdapterParams(overrides?: CallOverrides): Promise<boolean>;
        whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        'Approval(address,address,uint256)'(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;
        Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;
        'CallOFTReceivedSuccess(uint16,bytes,uint64,bytes32)'(_srcChainId?: BigNumberish | null, _srcAddress?: null, _nonce?: null, _hash?: null): CallOFTReceivedSuccessEventFilter;
        CallOFTReceivedSuccess(_srcChainId?: BigNumberish | null, _srcAddress?: null, _nonce?: null, _hash?: null): CallOFTReceivedSuccessEventFilter;
        'DropFailedMessage(uint16,bytes,uint64)'(srcChainId?: null, srcAddress?: null, nonce?: null): DropFailedMessageEventFilter;
        DropFailedMessage(srcChainId?: null, srcAddress?: null, nonce?: null): DropFailedMessageEventFilter;
        'FallbackWithdraw(address,uint256)'(to?: string | null, amount?: null): FallbackWithdrawEventFilter;
        FallbackWithdraw(to?: string | null, amount?: null): FallbackWithdrawEventFilter;
        'MessageFailed(uint16,bytes,uint64,bytes,bytes)'(_srcChainId?: null, _srcAddress?: null, _nonce?: null, _payload?: null, _reason?: null): MessageFailedEventFilter;
        MessageFailed(_srcChainId?: null, _srcAddress?: null, _nonce?: null, _payload?: null, _reason?: null): MessageFailedEventFilter;
        'NonContractAddress(address)'(_address?: null): NonContractAddressEventFilter;
        NonContractAddress(_address?: null): NonContractAddressEventFilter;
        'OwnershipTransferred(address,address)'(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        'Paused(address)'(account?: null): PausedEventFilter;
        Paused(account?: null): PausedEventFilter;
        'ReceiveFromChain(uint16,address,uint256)'(_srcChainId?: BigNumberish | null, _to?: string | null, _amount?: null): ReceiveFromChainEventFilter;
        ReceiveFromChain(_srcChainId?: BigNumberish | null, _to?: string | null, _amount?: null): ReceiveFromChainEventFilter;
        'RetryMessageSuccess(uint16,bytes,uint64,bytes32)'(_srcChainId?: null, _srcAddress?: null, _nonce?: null, _payloadHash?: null): RetryMessageSuccessEventFilter;
        RetryMessageSuccess(_srcChainId?: null, _srcAddress?: null, _nonce?: null, _payloadHash?: null): RetryMessageSuccessEventFilter;
        'SendToChain(uint16,address,bytes32,uint256)'(_dstChainId?: BigNumberish | null, _from?: string | null, _toAddress?: BytesLike | null, _amount?: null): SendToChainEventFilter;
        SendToChain(_dstChainId?: BigNumberish | null, _from?: string | null, _toAddress?: BytesLike | null, _amount?: null): SendToChainEventFilter;
        'SetDefaultFeeBp(uint16)'(feeBp?: null): SetDefaultFeeBpEventFilter;
        SetDefaultFeeBp(feeBp?: null): SetDefaultFeeBpEventFilter;
        'SetFeeBp(uint16,bool,uint16)'(dstchainId?: null, enabled?: null, feeBp?: null): SetFeeBpEventFilter;
        SetFeeBp(dstchainId?: null, enabled?: null, feeBp?: null): SetFeeBpEventFilter;
        'SetFeeOwner(address)'(feeOwner?: null): SetFeeOwnerEventFilter;
        SetFeeOwner(feeOwner?: null): SetFeeOwnerEventFilter;
        'SetInboundCap(uint16,uint256)'(chainId?: BigNumberish | null, cap?: null): SetInboundCapEventFilter;
        SetInboundCap(chainId?: BigNumberish | null, cap?: null): SetInboundCapEventFilter;
        'SetMinDstGas(uint16,uint16,uint256)'(_dstChainId?: null, _type?: null, _minDstGas?: null): SetMinDstGasEventFilter;
        SetMinDstGas(_dstChainId?: null, _type?: null, _minDstGas?: null): SetMinDstGasEventFilter;
        'SetOperator(address)'(newOperator?: null): SetOperatorEventFilter;
        SetOperator(newOperator?: null): SetOperatorEventFilter;
        'SetOutboundCap(uint16,uint256)'(chainId?: BigNumberish | null, cap?: null): SetOutboundCapEventFilter;
        SetOutboundCap(chainId?: BigNumberish | null, cap?: null): SetOutboundCapEventFilter;
        'SetPrecrime(address)'(precrime?: null): SetPrecrimeEventFilter;
        SetPrecrime(precrime?: null): SetPrecrimeEventFilter;
        'SetTrustedRemote(uint16,bytes)'(_remoteChainId?: null, _path?: null): SetTrustedRemoteEventFilter;
        SetTrustedRemote(_remoteChainId?: null, _path?: null): SetTrustedRemoteEventFilter;
        'SetTrustedRemoteAddress(uint16,bytes)'(_remoteChainId?: null, _remoteAddress?: null): SetTrustedRemoteAddressEventFilter;
        SetTrustedRemoteAddress(_remoteChainId?: null, _remoteAddress?: null): SetTrustedRemoteAddressEventFilter;
        'SetUseCustomAdapterParams(bool)'(_useCustomAdapterParams?: null): SetUseCustomAdapterParamsEventFilter;
        SetUseCustomAdapterParams(_useCustomAdapterParams?: null): SetUseCustomAdapterParamsEventFilter;
        'SetWhitelist(address,bool)'(addr?: string | null, isWhitelist?: null): SetWhitelistEventFilter;
        SetWhitelist(addr?: string | null, isWhitelist?: null): SetWhitelistEventFilter;
        'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
        Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
        'Unpaused(address)'(account?: null): UnpausedEventFilter;
        Unpaused(account?: null): UnpausedEventFilter;
    };
    estimateGas: {
        BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;
        NO_EXTRA_GAS(overrides?: CallOverrides): Promise<BigNumber>;
        PT_SEND(overrides?: CallOverrides): Promise<BigNumber>;
        PT_SEND_AND_CALL(overrides?: CallOverrides): Promise<BigNumber>;
        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;
        amountsForCall(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        approve(spender: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
        callOnOFTReceived(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _from: BytesLike, _to: string, _amount: BigNumberish, _payload: BytesLike, _gasForCall: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        chainIdToFeeBps(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToInboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToLastReceivedTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToLastSentTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToOutboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToReceivedTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        chainIdToSentTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        defaultFeeBp(overrides?: CallOverrides): Promise<BigNumber>;
        estimateSendAndCallFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        estimateSendFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        failedMessages(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        feeOwner(overrides?: CallOverrides): Promise<BigNumber>;
        forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getTrustedRemoteAddress(_remoteChainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        lzEndpoint(overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<BigNumber>;
        nonblockingLzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        pause(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(overrides?: CallOverrides): Promise<BigNumber>;
        quoteOFTFee(_dstChainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        retryMessage(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        sendAndCall(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        sendFrom(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setDefaultFeeBp(_feeBp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setFeeBp(_dstChainId: BigNumberish, _enabled: boolean, _feeBp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setFeeOwner(_feeOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setInboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setOutboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setPrecrime(_precrime: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setReceiveVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setSendVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setTrustedRemoteAddress(_remoteChainId: BigNumberish, _remoteAddress: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setUseCustomAdapterParams(_useCustomAdapterParams: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setWhitelist(addr: string, isWhitelist: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        symbol(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        transferFrom(from: string, to: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        unpause(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        useCustomAdapterParams(overrides?: CallOverrides): Promise<BigNumber>;
        whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        BP_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NO_EXTRA_GAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PT_SEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PT_SEND_AND_CALL(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        amountsForCall(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approve(spender: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        callOnOFTReceived(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _from: BytesLike, _to: string, _amount: BigNumberish, _payload: BytesLike, _gasForCall: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        chainIdToFeeBps(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        chainIdToInboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        chainIdToLastReceivedTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        chainIdToLastSentTimestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        chainIdToOutboundCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        chainIdToReceivedTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        chainIdToSentTokenAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        circulatingSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        defaultFeeBp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateSendAndCallFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateSendFee(_dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _useZro: boolean, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        failedMessages(arg0: BigNumberish, arg1: BytesLike, arg2: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        feeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTrustedRemoteAddress(_remoteChainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzEndpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nonblockingLzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pause(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteOFTFee(_dstChainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        retryMessage(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        sendAndCall(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _payload: BytesLike, _dstGasForCall: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        sendFrom(_from: string, _dstChainId: BigNumberish, _toAddress: BytesLike, _amount: BigNumberish, _minAmount: BigNumberish, _callParams: ICommonOFT.LzCallParamsStruct, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setDefaultFeeBp(_feeBp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setFeeBp(_dstChainId: BigNumberish, _enabled: boolean, _feeBp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setFeeOwner(_feeOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setInboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setOutboundCap(chainId: BigNumberish, cap: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setPrecrime(_precrime: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setReceiveVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setSendVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setTrustedRemoteAddress(_remoteChainId: BigNumberish, _remoteAddress: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setUseCustomAdapterParams(_useCustomAdapterParams: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setWhitelist(addr: string, isWhitelist: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transfer(to: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        transferFrom(from: string, to: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        unpause(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        useCustomAdapterParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        whitelist(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
