"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.COMP = exports.getContractAddress = exports.getMarket = exports.getMarkets = exports.COMPMap = exports.marketMap = exports.configMap = exports.supportedChainIds = exports.configs = exports.MarketId = void 0;
const tslib_1 = require("tslib");
const tokens_1 = require("./tokens");
const common = tslib_1.__importStar(require("@protocolink/common"));
var MarketId;
(function (MarketId) {
    MarketId["USDC"] = "USDC";
    MarketId["USDCe"] = "USDC.e";
    MarketId["USDbC"] = "USDbC";
    MarketId["ETH"] = "ETH";
})(MarketId = exports.MarketId || (exports.MarketId = {}));
exports.configs = [
    {
        chainId: common.ChainId.mainnet,
        contract: {
            CometRewards: '0x1B0e765F6224C21223AeA2af16c1C46E38885a40',
        },
        markets: [
            {
                id: MarketId.USDC,
                comet: tokens_1.mainnetTokens.cUSDCv3,
                baseToken: tokens_1.mainnetTokens.USDC,
            },
            {
                id: MarketId.ETH,
                comet: tokens_1.mainnetTokens.cWETHv3,
                baseToken: tokens_1.mainnetTokens.WETH,
            },
        ],
        COMP: tokens_1.mainnetTokens.COMP,
    },
    {
        chainId: common.ChainId.optimism,
        contract: {
            CometRewards: '0x443EA0340cb75a160F31A440722dec7b5bc3C2E9',
        },
        markets: [
            {
                id: MarketId.USDC,
                comet: tokens_1.optimismTokens.cUSDCv3,
                baseToken: tokens_1.optimismTokens.USDC,
            },
        ],
        COMP: tokens_1.optimismTokens.COMP,
    },
    {
        chainId: common.ChainId.polygon,
        contract: {
            CometRewards: '0x45939657d1CA34A8FA39A924B71D28Fe8431e581',
        },
        markets: [
            {
                id: MarketId.USDCe,
                comet: tokens_1.polygonTokens.cUSDCv3,
                baseToken: tokens_1.polygonTokens['USDC.e'],
            },
        ],
        COMP: tokens_1.polygonTokens.COMP,
    },
    {
        chainId: common.ChainId.base,
        contract: {
            CometRewards: '0x123964802e6ABabBE1Bc9547D72Ef1B69B00A6b1',
        },
        markets: [
            {
                id: MarketId.USDC,
                comet: tokens_1.baseTokens.cUSDCv3,
                baseToken: tokens_1.baseTokens.USDC,
            },
            {
                id: MarketId.USDbC,
                comet: tokens_1.baseTokens.cUSDbCv3,
                baseToken: tokens_1.baseTokens.USDbC,
            },
            {
                id: MarketId.ETH,
                comet: tokens_1.baseTokens.cWETHv3,
                baseToken: tokens_1.baseTokens.WETH,
            },
        ],
        COMP: tokens_1.baseTokens.COMP,
    },
    {
        chainId: common.ChainId.arbitrum,
        contract: {
            CometRewards: '0x45939657d1CA34A8FA39A924B71D28Fe8431e581',
        },
        markets: [
            {
                id: MarketId.USDCe,
                comet: tokens_1.arbitrumTokens.cUSDCev3,
                baseToken: tokens_1.arbitrumTokens['USDC.e'],
            },
            {
                id: MarketId.USDC,
                comet: tokens_1.arbitrumTokens.cUSDCv3,
                baseToken: tokens_1.arbitrumTokens.USDC,
            },
        ],
        COMP: tokens_1.arbitrumTokens.COMP,
    },
];
_a = exports.configs.reduce((accumulator, config) => {
    accumulator[0].push(config.chainId);
    accumulator[1][config.chainId] = config;
    accumulator[2][config.chainId] = {};
    for (const market of config.markets) {
        accumulator[2][config.chainId][market.id] = market;
    }
    accumulator[3][config.chainId] = config.COMP;
    return accumulator;
}, [[], {}, {}, {}]), exports.supportedChainIds = _a[0], exports.configMap = _a[1], exports.marketMap = _a[2], exports.COMPMap = _a[3];
function getMarkets(chainId) {
    return exports.configMap[chainId].markets;
}
exports.getMarkets = getMarkets;
function getMarket(chainId, id) {
    return exports.marketMap[chainId][id];
}
exports.getMarket = getMarket;
function getContractAddress(chainId, name) {
    return exports.configMap[chainId].contract[name];
}
exports.getContractAddress = getContractAddress;
function COMP(chainId) {
    return exports.COMPMap[chainId];
}
exports.COMP = COMP;
//# sourceMappingURL=configs.js.map