"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepayLogic = void 0;
const tslib_1 = require("tslib");
const contracts_1 = require("./contracts");
const service_1 = require("./service");
const common = tslib_1.__importStar(require("@protocolink/common"));
const ethers_1 = require("ethers");
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
class RepayLogic extends core.Logic {
    async getTokenList() {
        const tokenList = {};
        const markets = (0, configs_1.getMarkets)(this.chainId);
        const service = new service_1.Service(this.chainId, this.provider);
        for (const market of markets) {
            const baseToken = await service.getBaseToken(market.id);
            tokenList[market.id] = [];
            if (baseToken.isWrapped) {
                tokenList[market.id].push(baseToken.unwrapped);
            }
            tokenList[market.id].push(baseToken);
        }
        return tokenList;
    }
    async quote(params) {
        const { marketId, borrower, tokenIn } = params;
        const service = new service_1.Service(this.chainId, this.provider);
        const borrowBalance = await service.getBorrowBalance(marketId, borrower, tokenIn);
        borrowBalance.setWei(common.calcSlippage(borrowBalance.amountWei, -1)); // slightly higher than borrowed amount
        return { marketId, borrower, input: borrowBalance };
    }
    async build(fields) {
        const { marketId, borrower, input, balanceBps } = fields;
        // check if the repay amount is greater than or equal to the borrow balance.
        // If it is, it means that the user wants to repay the entire debt.
        const market = (0, configs_1.getMarket)(this.chainId, marketId);
        const tokenIn = input.token.wrapped;
        const service = new service_1.Service(this.chainId, this.provider);
        const borrowBalance = await service.getBorrowBalance(marketId, borrower, tokenIn);
        const repayAll = input.gte(borrowBalance);
        const to = market.comet.address;
        const data = contracts_1.Comet__factory.createInterface().encodeFunctionData('supplyTo', [
            borrower,
            tokenIn.address,
            repayAll ? ethers_1.constants.MaxUint256 : input.amountWei,
        ]);
        const options = { input: new common.TokenAmount(tokenIn, input.amount) };
        if (balanceBps && !repayAll) {
            options.balanceBps = balanceBps;
            options.amountOffset = common.getParamOffset(2);
        }
        const inputs = [core.newLogicInput(options)];
        const wrapMode = input.token.isNative ? core.WrapMode.wrapBefore : core.WrapMode.none;
        return core.newLogic({ to, data, inputs, wrapMode });
    }
}
exports.RepayLogic = RepayLogic;
RepayLogic.id = 'repay';
RepayLogic.protocolId = 'compound-v3';
RepayLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.repay.js.map