import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';
export declare namespace Pool {
    type SwapObjStruct = {
        amount: BigNumberish;
        eqFee: BigNumberish;
        eqReward: BigNumberish;
        lpFee: BigNumberish;
        protocolFee: BigNumberish;
        lkbRemove: BigNumberish;
    };
    type SwapObjStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        eqFee: BigNumber;
        eqReward: BigNumber;
        lpFee: BigNumber;
        protocolFee: BigNumber;
        lkbRemove: BigNumber;
    };
}
export interface FeeLibraryInterface extends utils.Interface {
    functions: {
        'DELTA_1()': FunctionFragment;
        'DELTA_2()': FunctionFragment;
        'DENOMINATOR()': FunctionFragment;
        'EQ_REWARD_CAP()': FunctionFragment;
        'EQ_REWARD_THRESHOLD()': FunctionFragment;
        'FIFTY_PERCENT()': FunctionFragment;
        'LAMBDA_1()': FunctionFragment;
        'LAMBDA_2()': FunctionFragment;
        'LP_FEE()': FunctionFragment;
        'LP_FEE_WITH_EQ_REWARD()': FunctionFragment;
        'ONE_BPS_PRICE_CHANGE_THRESHOLD()': FunctionFragment;
        'PRICE_DEPEG_THRESHOLD()': FunctionFragment;
        'PRICE_DRIFT_THRESHOLD()': FunctionFragment;
        'PRICE_SHARED_DECIMALS()': FunctionFragment;
        'PROTOCOL_FEE()': FunctionFragment;
        'PROTOCOL_FEE_FOR_SAME_TOKEN()': FunctionFragment;
        'PROTOCOL_FEE_WITH_EQ_REWARD()': FunctionFragment;
        'PROTOCOL_SUBSIDY()': FunctionFragment;
        'SIXTY_PERCENT()': FunctionFragment;
        'TEN_BPS_PRICE_CHANGE_THRESHOLD()': FunctionFragment;
        'defaultAdapterParams(uint16)': FunctionFragment;
        'factory()': FunctionFragment;
        'forceResumeReceive(uint16,bytes)': FunctionFragment;
        'getConfig(uint16,uint16,address,uint256)': FunctionFragment;
        'getDriftFee(uint256,uint256,uint256,bool)': FunctionFragment;
        'getEqReward(uint256,uint256,bool)': FunctionFragment;
        'getEquilibriumFee(uint256,uint256,uint16,uint256,bool,bool)': FunctionFragment;
        'getFees(uint256,uint256,uint16,address,uint256)': FunctionFragment;
        'getProtocolAndLpFee(uint256,uint256,uint16,uint256,uint256,bool,bool)': FunctionFragment;
        'getRemoteChainIds(uint256)': FunctionFragment;
        'getVersion()': FunctionFragment;
        'isSameToken(uint256,uint256)': FunctionFragment;
        'isTokenPriceChanged(uint256)': FunctionFragment;
        'isTrustedRemote(uint16,bytes)': FunctionFragment;
        'lzEndpoint()': FunctionFragment;
        'lzReceive(uint16,bytes,uint64,bytes)': FunctionFragment;
        'minDstGasLookup(uint16,uint16)': FunctionFragment;
        'owner()': FunctionFragment;
        'poolIdToLpId(uint256)': FunctionFragment;
        'poolIdToPrice(uint256)': FunctionFragment;
        'precrime()': FunctionFragment;
        'quoteFeeForPriceUpdate(uint256)': FunctionFragment;
        'renounceOwnership()': FunctionFragment;
        'sameToken(uint256,uint256)': FunctionFragment;
        'setConfig(uint16,uint16,uint256,bytes)': FunctionFragment;
        'setDefaultAdapterParams(uint16,bytes)': FunctionFragment;
        'setMinDstGas(uint16,uint16,uint256)': FunctionFragment;
        'setPoolToLpId(uint256,uint256)': FunctionFragment;
        'setPrecrime(address)': FunctionFragment;
        'setReceiveVersion(uint16)': FunctionFragment;
        'setSameToken(uint256,uint256,bool)': FunctionFragment;
        'setSendVersion(uint16)': FunctionFragment;
        'setStargatePoolIdToLPStakingAddress(uint256,address)': FunctionFragment;
        'setTokenBasePrice(uint256,uint256)': FunctionFragment;
        'setTokenPriceFeed(uint256,address,uint16[])': FunctionFragment;
        'setTrustedRemote(uint16,bytes)': FunctionFragment;
        'stargatePoolIdToLPStaking(uint256)': FunctionFragment;
        'transferOwnership(address)': FunctionFragment;
        'trustedRemoteLookup(uint16)': FunctionFragment;
        'updateTokenPrice(uint256)': FunctionFragment;
        'whiteList(address,bool)': FunctionFragment;
        'whitelist(address)': FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: 'DELTA_1' | 'DELTA_2' | 'DENOMINATOR' | 'EQ_REWARD_CAP' | 'EQ_REWARD_THRESHOLD' | 'FIFTY_PERCENT' | 'LAMBDA_1' | 'LAMBDA_2' | 'LP_FEE' | 'LP_FEE_WITH_EQ_REWARD' | 'ONE_BPS_PRICE_CHANGE_THRESHOLD' | 'PRICE_DEPEG_THRESHOLD' | 'PRICE_DRIFT_THRESHOLD' | 'PRICE_SHARED_DECIMALS' | 'PROTOCOL_FEE' | 'PROTOCOL_FEE_FOR_SAME_TOKEN' | 'PROTOCOL_FEE_WITH_EQ_REWARD' | 'PROTOCOL_SUBSIDY' | 'SIXTY_PERCENT' | 'TEN_BPS_PRICE_CHANGE_THRESHOLD' | 'defaultAdapterParams' | 'factory' | 'forceResumeReceive' | 'getConfig' | 'getDriftFee' | 'getEqReward' | 'getEquilibriumFee' | 'getFees' | 'getProtocolAndLpFee' | 'getRemoteChainIds' | 'getVersion' | 'isSameToken' | 'isTokenPriceChanged' | 'isTrustedRemote' | 'lzEndpoint' | 'lzReceive' | 'minDstGasLookup' | 'owner' | 'poolIdToLpId' | 'poolIdToPrice' | 'precrime' | 'quoteFeeForPriceUpdate' | 'renounceOwnership' | 'sameToken' | 'setConfig' | 'setDefaultAdapterParams' | 'setMinDstGas' | 'setPoolToLpId' | 'setPrecrime' | 'setReceiveVersion' | 'setSameToken' | 'setSendVersion' | 'setStargatePoolIdToLPStakingAddress' | 'setTokenBasePrice' | 'setTokenPriceFeed' | 'setTrustedRemote' | 'stargatePoolIdToLPStaking' | 'transferOwnership' | 'trustedRemoteLookup' | 'updateTokenPrice' | 'whiteList' | 'whitelist'): FunctionFragment;
    encodeFunctionData(functionFragment: 'DELTA_1', values?: undefined): string;
    encodeFunctionData(functionFragment: 'DELTA_2', values?: undefined): string;
    encodeFunctionData(functionFragment: 'DENOMINATOR', values?: undefined): string;
    encodeFunctionData(functionFragment: 'EQ_REWARD_CAP', values?: undefined): string;
    encodeFunctionData(functionFragment: 'EQ_REWARD_THRESHOLD', values?: undefined): string;
    encodeFunctionData(functionFragment: 'FIFTY_PERCENT', values?: undefined): string;
    encodeFunctionData(functionFragment: 'LAMBDA_1', values?: undefined): string;
    encodeFunctionData(functionFragment: 'LAMBDA_2', values?: undefined): string;
    encodeFunctionData(functionFragment: 'LP_FEE', values?: undefined): string;
    encodeFunctionData(functionFragment: 'LP_FEE_WITH_EQ_REWARD', values?: undefined): string;
    encodeFunctionData(functionFragment: 'ONE_BPS_PRICE_CHANGE_THRESHOLD', values?: undefined): string;
    encodeFunctionData(functionFragment: 'PRICE_DEPEG_THRESHOLD', values?: undefined): string;
    encodeFunctionData(functionFragment: 'PRICE_DRIFT_THRESHOLD', values?: undefined): string;
    encodeFunctionData(functionFragment: 'PRICE_SHARED_DECIMALS', values?: undefined): string;
    encodeFunctionData(functionFragment: 'PROTOCOL_FEE', values?: undefined): string;
    encodeFunctionData(functionFragment: 'PROTOCOL_FEE_FOR_SAME_TOKEN', values?: undefined): string;
    encodeFunctionData(functionFragment: 'PROTOCOL_FEE_WITH_EQ_REWARD', values?: undefined): string;
    encodeFunctionData(functionFragment: 'PROTOCOL_SUBSIDY', values?: undefined): string;
    encodeFunctionData(functionFragment: 'SIXTY_PERCENT', values?: undefined): string;
    encodeFunctionData(functionFragment: 'TEN_BPS_PRICE_CHANGE_THRESHOLD', values?: undefined): string;
    encodeFunctionData(functionFragment: 'defaultAdapterParams', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
    encodeFunctionData(functionFragment: 'forceResumeReceive', values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'getConfig', values: [BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'getDriftFee', values: [BigNumberish, BigNumberish, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: 'getEqReward', values: [BigNumberish, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: 'getEquilibriumFee', values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean, boolean]): string;
    encodeFunctionData(functionFragment: 'getFees', values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'getProtocolAndLpFee', values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean, boolean]): string;
    encodeFunctionData(functionFragment: 'getRemoteChainIds', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'getVersion', values?: undefined): string;
    encodeFunctionData(functionFragment: 'isSameToken', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'isTokenPriceChanged', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'isTrustedRemote', values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'lzEndpoint', values?: undefined): string;
    encodeFunctionData(functionFragment: 'lzReceive', values: [BigNumberish, BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'minDstGasLookup', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
    encodeFunctionData(functionFragment: 'poolIdToLpId', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'poolIdToPrice', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'precrime', values?: undefined): string;
    encodeFunctionData(functionFragment: 'quoteFeeForPriceUpdate', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
    encodeFunctionData(functionFragment: 'sameToken', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setConfig', values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'setDefaultAdapterParams', values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'setMinDstGas', values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setPoolToLpId', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setPrecrime', values: [string]): string;
    encodeFunctionData(functionFragment: 'setReceiveVersion', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setSameToken', values: [BigNumberish, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: 'setSendVersion', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setStargatePoolIdToLPStakingAddress', values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: 'setTokenBasePrice', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setTokenPriceFeed', values: [BigNumberish, string, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: 'setTrustedRemote', values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: 'stargatePoolIdToLPStaking', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
    encodeFunctionData(functionFragment: 'trustedRemoteLookup', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'updateTokenPrice', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'whiteList', values: [string, boolean]): string;
    encodeFunctionData(functionFragment: 'whitelist', values: [string]): string;
    decodeFunctionResult(functionFragment: 'DELTA_1', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'DELTA_2', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'DENOMINATOR', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'EQ_REWARD_CAP', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'EQ_REWARD_THRESHOLD', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'FIFTY_PERCENT', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'LAMBDA_1', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'LAMBDA_2', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'LP_FEE', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'LP_FEE_WITH_EQ_REWARD', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'ONE_BPS_PRICE_CHANGE_THRESHOLD', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'PRICE_DEPEG_THRESHOLD', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'PRICE_DRIFT_THRESHOLD', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'PRICE_SHARED_DECIMALS', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'PROTOCOL_FEE', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'PROTOCOL_FEE_FOR_SAME_TOKEN', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'PROTOCOL_FEE_WITH_EQ_REWARD', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'PROTOCOL_SUBSIDY', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'SIXTY_PERCENT', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'TEN_BPS_PRICE_CHANGE_THRESHOLD', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'defaultAdapterParams', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'forceResumeReceive', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getDriftFee', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getEqReward', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getEquilibriumFee', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getFees', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getProtocolAndLpFee', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getRemoteChainIds', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getVersion', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isSameToken', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isTokenPriceChanged', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'isTrustedRemote', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'lzEndpoint', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'lzReceive', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'minDstGasLookup', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'poolIdToLpId', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'poolIdToPrice', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'precrime', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'quoteFeeForPriceUpdate', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'sameToken', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setDefaultAdapterParams', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setMinDstGas', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setPoolToLpId', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setPrecrime', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setReceiveVersion', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setSameToken', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setSendVersion', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setStargatePoolIdToLPStakingAddress', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setTokenBasePrice', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setTokenPriceFeed', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setTrustedRemote', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'stargatePoolIdToLPStaking', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'trustedRemoteLookup', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'updateTokenPrice', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'whiteList', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
    events: {
        'OwnershipTransferred(address,address)': EventFragment;
        'PriceUpdated(uint256,uint256,uint8)': EventFragment;
        'SetMinDstGas(uint16,uint16,uint256)': EventFragment;
        'SetPrecrime(address)': EventFragment;
        'SetTrustedRemote(uint16,bytes)': EventFragment;
        'SetTrustedRemoteAddress(uint16,bytes)': EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'PriceUpdated'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetMinDstGas'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetPrecrime'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetTrustedRemote'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetTrustedRemoteAddress'): EventFragment;
}
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface PriceUpdatedEventObject {
    poolId: BigNumber;
    priceSD: BigNumber;
    state: number;
}
export type PriceUpdatedEvent = TypedEvent<[BigNumber, BigNumber, number], PriceUpdatedEventObject>;
export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;
export interface SetMinDstGasEventObject {
    _dstChainId: number;
    _type: number;
    _minDstGas: BigNumber;
}
export type SetMinDstGasEvent = TypedEvent<[number, number, BigNumber], SetMinDstGasEventObject>;
export type SetMinDstGasEventFilter = TypedEventFilter<SetMinDstGasEvent>;
export interface SetPrecrimeEventObject {
    precrime: string;
}
export type SetPrecrimeEvent = TypedEvent<[string], SetPrecrimeEventObject>;
export type SetPrecrimeEventFilter = TypedEventFilter<SetPrecrimeEvent>;
export interface SetTrustedRemoteEventObject {
    _remoteChainId: number;
    _path: string;
}
export type SetTrustedRemoteEvent = TypedEvent<[number, string], SetTrustedRemoteEventObject>;
export type SetTrustedRemoteEventFilter = TypedEventFilter<SetTrustedRemoteEvent>;
export interface SetTrustedRemoteAddressEventObject {
    _remoteChainId: number;
    _remoteAddress: string;
}
export type SetTrustedRemoteAddressEvent = TypedEvent<[number, string], SetTrustedRemoteAddressEventObject>;
export type SetTrustedRemoteAddressEventFilter = TypedEventFilter<SetTrustedRemoteAddressEvent>;
export interface FeeLibrary extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: FeeLibraryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DELTA_1(overrides?: CallOverrides): Promise<[BigNumber]>;
        DELTA_2(overrides?: CallOverrides): Promise<[BigNumber]>;
        DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;
        EQ_REWARD_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;
        EQ_REWARD_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;
        FIFTY_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;
        LAMBDA_1(overrides?: CallOverrides): Promise<[BigNumber]>;
        LAMBDA_2(overrides?: CallOverrides): Promise<[BigNumber]>;
        LP_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;
        LP_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<[BigNumber]>;
        ONE_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;
        PRICE_DEPEG_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;
        PRICE_DRIFT_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;
        PRICE_SHARED_DECIMALS(overrides?: CallOverrides): Promise<[number]>;
        PROTOCOL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;
        PROTOCOL_FEE_FOR_SAME_TOKEN(overrides?: CallOverrides): Promise<[BigNumber]>;
        PROTOCOL_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<[BigNumber]>;
        PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<[BigNumber]>;
        SIXTY_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;
        TEN_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;
        defaultAdapterParams(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        factory(overrides?: CallOverrides): Promise<[string]>;
        forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        getDriftFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<[BigNumber]>;
        getEqReward(_srcPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & {
            eqReward: BigNumber;
            protocolFee: BigNumber;
        }>;
        getEquilibriumFee(srcPoolId: BigNumberish, dstPoolId: BigNumberish, dstChainId: BigNumberish, amountSD: BigNumberish, whitelisted: boolean, hasEqReward: boolean, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        getFees(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _dstChainId: BigNumberish, _from: string, _amountSD: BigNumberish, overrides?: CallOverrides): Promise<[Pool.SwapObjStructOutput] & {
            s: Pool.SwapObjStructOutput;
        }>;
        getProtocolAndLpFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, arg2: BigNumberish, _amountSD: BigNumberish, _protocolSubsidy: BigNumberish, _whitelisted: boolean, _hasEqReward: boolean, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        getRemoteChainIds(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[number[]]>;
        getVersion(overrides?: CallOverrides): Promise<[string]>;
        isSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
        isTokenPriceChanged(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[boolean, BigNumber, number]>;
        isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        lzEndpoint(overrides?: CallOverrides): Promise<[string]>;
        lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        poolIdToLpId(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        poolIdToPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            BigNumber,
            BigNumber,
            number
        ] & {
            priceFeedAddress: string;
            basePriceSD: BigNumber;
            currentPriceSD: BigNumber;
            state: number;
        }>;
        precrime(overrides?: CallOverrides): Promise<[string]>;
        quoteFeeForPriceUpdate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        sameToken(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
        setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setDefaultAdapterParams(_remoteChainId: BigNumberish, _adapterParams: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setPoolToLpId(_poolId: BigNumberish, _lpId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setPrecrime(_precrime: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setReceiveVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, _isSame: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setSendVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setStargatePoolIdToLPStakingAddress(_poolId: BigNumberish, _lpStaking: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setTokenBasePrice(_poolId: BigNumberish, _basePriceSD: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setTokenPriceFeed(_poolId: BigNumberish, _priceFeedAddress: string, _remoteChainIds: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        stargatePoolIdToLPStaking(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        updateTokenPrice(_poolId: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        whiteList(_from: string, _whiteListed: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
    };
    DELTA_1(overrides?: CallOverrides): Promise<BigNumber>;
    DELTA_2(overrides?: CallOverrides): Promise<BigNumber>;
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;
    EQ_REWARD_CAP(overrides?: CallOverrides): Promise<BigNumber>;
    EQ_REWARD_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
    FIFTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
    LAMBDA_1(overrides?: CallOverrides): Promise<BigNumber>;
    LAMBDA_2(overrides?: CallOverrides): Promise<BigNumber>;
    LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;
    LP_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<BigNumber>;
    ONE_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
    PRICE_DEPEG_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
    PRICE_DRIFT_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
    PRICE_SHARED_DECIMALS(overrides?: CallOverrides): Promise<number>;
    PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;
    PROTOCOL_FEE_FOR_SAME_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;
    PROTOCOL_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<BigNumber>;
    PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;
    SIXTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
    TEN_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
    defaultAdapterParams(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    factory(overrides?: CallOverrides): Promise<string>;
    forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<string>;
    getDriftFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<BigNumber>;
    getEqReward(_srcPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & {
        eqReward: BigNumber;
        protocolFee: BigNumber;
    }>;
    getEquilibriumFee(srcPoolId: BigNumberish, dstPoolId: BigNumberish, dstChainId: BigNumberish, amountSD: BigNumberish, whitelisted: boolean, hasEqReward: boolean, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
    getFees(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _dstChainId: BigNumberish, _from: string, _amountSD: BigNumberish, overrides?: CallOverrides): Promise<Pool.SwapObjStructOutput>;
    getProtocolAndLpFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, arg2: BigNumberish, _amountSD: BigNumberish, _protocolSubsidy: BigNumberish, _whitelisted: boolean, _hasEqReward: boolean, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
    getRemoteChainIds(_poolId: BigNumberish, overrides?: CallOverrides): Promise<number[]>;
    getVersion(overrides?: CallOverrides): Promise<string>;
    isSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    isTokenPriceChanged(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[boolean, BigNumber, number]>;
    isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    lzEndpoint(overrides?: CallOverrides): Promise<string>;
    lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    poolIdToLpId(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    poolIdToPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
        string,
        BigNumber,
        BigNumber,
        number
    ] & {
        priceFeedAddress: string;
        basePriceSD: BigNumber;
        currentPriceSD: BigNumber;
        state: number;
    }>;
    precrime(overrides?: CallOverrides): Promise<string>;
    quoteFeeForPriceUpdate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    renounceOwnership(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    sameToken(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setDefaultAdapterParams(_remoteChainId: BigNumberish, _adapterParams: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setPoolToLpId(_poolId: BigNumberish, _lpId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setPrecrime(_precrime: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setReceiveVersion(_version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, _isSame: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setSendVersion(_version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setStargatePoolIdToLPStakingAddress(_poolId: BigNumberish, _lpStaking: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setTokenBasePrice(_poolId: BigNumberish, _basePriceSD: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setTokenPriceFeed(_poolId: BigNumberish, _priceFeedAddress: string, _remoteChainIds: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    stargatePoolIdToLPStaking(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    updateTokenPrice(_poolId: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    whiteList(_from: string, _whiteListed: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        DELTA_1(overrides?: CallOverrides): Promise<BigNumber>;
        DELTA_2(overrides?: CallOverrides): Promise<BigNumber>;
        DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;
        EQ_REWARD_CAP(overrides?: CallOverrides): Promise<BigNumber>;
        EQ_REWARD_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        FIFTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        LAMBDA_1(overrides?: CallOverrides): Promise<BigNumber>;
        LAMBDA_2(overrides?: CallOverrides): Promise<BigNumber>;
        LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        LP_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<BigNumber>;
        ONE_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        PRICE_DEPEG_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        PRICE_DRIFT_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        PRICE_SHARED_DECIMALS(overrides?: CallOverrides): Promise<number>;
        PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        PROTOCOL_FEE_FOR_SAME_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;
        PROTOCOL_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<BigNumber>;
        PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;
        SIXTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        TEN_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        defaultAdapterParams(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        factory(overrides?: CallOverrides): Promise<string>;
        forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<void>;
        getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getDriftFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<BigNumber>;
        getEqReward(_srcPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & {
            eqReward: BigNumber;
            protocolFee: BigNumber;
        }>;
        getEquilibriumFee(srcPoolId: BigNumberish, dstPoolId: BigNumberish, dstChainId: BigNumberish, amountSD: BigNumberish, whitelisted: boolean, hasEqReward: boolean, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        getFees(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _dstChainId: BigNumberish, _from: string, _amountSD: BigNumberish, overrides?: CallOverrides): Promise<Pool.SwapObjStructOutput>;
        getProtocolAndLpFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, arg2: BigNumberish, _amountSD: BigNumberish, _protocolSubsidy: BigNumberish, _whitelisted: boolean, _hasEqReward: boolean, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        getRemoteChainIds(_poolId: BigNumberish, overrides?: CallOverrides): Promise<number[]>;
        getVersion(overrides?: CallOverrides): Promise<string>;
        isSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        isTokenPriceChanged(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[boolean, BigNumber, number]>;
        isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        lzEndpoint(overrides?: CallOverrides): Promise<string>;
        lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: CallOverrides): Promise<void>;
        minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        poolIdToLpId(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        poolIdToPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            BigNumber,
            BigNumber,
            number
        ] & {
            priceFeedAddress: string;
            basePriceSD: BigNumber;
            currentPriceSD: BigNumber;
            state: number;
        }>;
        precrime(overrides?: CallOverrides): Promise<string>;
        quoteFeeForPriceUpdate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        sameToken(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: CallOverrides): Promise<void>;
        setDefaultAdapterParams(_remoteChainId: BigNumberish, _adapterParams: BytesLike, overrides?: CallOverrides): Promise<void>;
        setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setPoolToLpId(_poolId: BigNumberish, _lpId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setPrecrime(_precrime: string, overrides?: CallOverrides): Promise<void>;
        setReceiveVersion(_version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, _isSame: boolean, overrides?: CallOverrides): Promise<void>;
        setSendVersion(_version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setStargatePoolIdToLPStakingAddress(_poolId: BigNumberish, _lpStaking: string, overrides?: CallOverrides): Promise<void>;
        setTokenBasePrice(_poolId: BigNumberish, _basePriceSD: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setTokenPriceFeed(_poolId: BigNumberish, _priceFeedAddress: string, _remoteChainIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: CallOverrides): Promise<void>;
        stargatePoolIdToLPStaking(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        updateTokenPrice(_poolId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        whiteList(_from: string, _whiteListed: boolean, overrides?: CallOverrides): Promise<void>;
        whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        'OwnershipTransferred(address,address)'(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        'PriceUpdated(uint256,uint256,uint8)'(poolId?: BigNumberish | null, priceSD?: null, state?: null): PriceUpdatedEventFilter;
        PriceUpdated(poolId?: BigNumberish | null, priceSD?: null, state?: null): PriceUpdatedEventFilter;
        'SetMinDstGas(uint16,uint16,uint256)'(_dstChainId?: null, _type?: null, _minDstGas?: null): SetMinDstGasEventFilter;
        SetMinDstGas(_dstChainId?: null, _type?: null, _minDstGas?: null): SetMinDstGasEventFilter;
        'SetPrecrime(address)'(precrime?: null): SetPrecrimeEventFilter;
        SetPrecrime(precrime?: null): SetPrecrimeEventFilter;
        'SetTrustedRemote(uint16,bytes)'(_remoteChainId?: null, _path?: null): SetTrustedRemoteEventFilter;
        SetTrustedRemote(_remoteChainId?: null, _path?: null): SetTrustedRemoteEventFilter;
        'SetTrustedRemoteAddress(uint16,bytes)'(_remoteChainId?: null, _remoteAddress?: null): SetTrustedRemoteAddressEventFilter;
        SetTrustedRemoteAddress(_remoteChainId?: null, _remoteAddress?: null): SetTrustedRemoteAddressEventFilter;
    };
    estimateGas: {
        DELTA_1(overrides?: CallOverrides): Promise<BigNumber>;
        DELTA_2(overrides?: CallOverrides): Promise<BigNumber>;
        DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;
        EQ_REWARD_CAP(overrides?: CallOverrides): Promise<BigNumber>;
        EQ_REWARD_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        FIFTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        LAMBDA_1(overrides?: CallOverrides): Promise<BigNumber>;
        LAMBDA_2(overrides?: CallOverrides): Promise<BigNumber>;
        LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        LP_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<BigNumber>;
        ONE_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        PRICE_DEPEG_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        PRICE_DRIFT_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        PRICE_SHARED_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;
        PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        PROTOCOL_FEE_FOR_SAME_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;
        PROTOCOL_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<BigNumber>;
        PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;
        SIXTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        TEN_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;
        defaultAdapterParams(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        factory(overrides?: CallOverrides): Promise<BigNumber>;
        forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getDriftFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<BigNumber>;
        getEqReward(_srcPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<BigNumber>;
        getEquilibriumFee(srcPoolId: BigNumberish, dstPoolId: BigNumberish, dstChainId: BigNumberish, amountSD: BigNumberish, whitelisted: boolean, hasEqReward: boolean, overrides?: CallOverrides): Promise<BigNumber>;
        getFees(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _dstChainId: BigNumberish, _from: string, _amountSD: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getProtocolAndLpFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, arg2: BigNumberish, _amountSD: BigNumberish, _protocolSubsidy: BigNumberish, _whitelisted: boolean, _hasEqReward: boolean, overrides?: CallOverrides): Promise<BigNumber>;
        getRemoteChainIds(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getVersion(overrides?: CallOverrides): Promise<BigNumber>;
        isSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isTokenPriceChanged(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        lzEndpoint(overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        poolIdToLpId(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        poolIdToPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        precrime(overrides?: CallOverrides): Promise<BigNumber>;
        quoteFeeForPriceUpdate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        sameToken(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setDefaultAdapterParams(_remoteChainId: BigNumberish, _adapterParams: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setPoolToLpId(_poolId: BigNumberish, _lpId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setPrecrime(_precrime: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setReceiveVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, _isSame: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setSendVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setStargatePoolIdToLPStakingAddress(_poolId: BigNumberish, _lpStaking: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setTokenBasePrice(_poolId: BigNumberish, _basePriceSD: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setTokenPriceFeed(_poolId: BigNumberish, _priceFeedAddress: string, _remoteChainIds: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        stargatePoolIdToLPStaking(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        updateTokenPrice(_poolId: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        whiteList(_from: string, _whiteListed: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DELTA_1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        DELTA_2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        EQ_REWARD_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        EQ_REWARD_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        FIFTY_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        LAMBDA_1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        LAMBDA_2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        LP_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        LP_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ONE_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PRICE_DEPEG_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PRICE_DRIFT_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PRICE_SHARED_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PROTOCOL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PROTOCOL_FEE_FOR_SAME_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PROTOCOL_FEE_WITH_EQ_REWARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        SIXTY_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        TEN_BPS_PRICE_CHANGE_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultAdapterParams(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        forceResumeReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        getConfig(_version: BigNumberish, _chainId: BigNumberish, arg2: string, _configType: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDriftFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getEqReward(_srcPoolId: BigNumberish, _amountSD: BigNumberish, _whitelisted: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getEquilibriumFee(srcPoolId: BigNumberish, dstPoolId: BigNumberish, dstChainId: BigNumberish, amountSD: BigNumberish, whitelisted: boolean, hasEqReward: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFees(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, _dstChainId: BigNumberish, _from: string, _amountSD: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProtocolAndLpFee(_srcPoolId: BigNumberish, _dstPoolId: BigNumberish, arg2: BigNumberish, _amountSD: BigNumberish, _protocolSubsidy: BigNumberish, _whitelisted: boolean, _hasEqReward: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRemoteChainIds(_poolId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isTokenPriceChanged(_poolId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isTrustedRemote(_srcChainId: BigNumberish, _srcAddress: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzEndpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_srcChainId: BigNumberish, _srcAddress: BytesLike, _nonce: BigNumberish, _payload: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        minDstGasLookup(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        poolIdToLpId(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        poolIdToPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteFeeForPriceUpdate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        sameToken(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setConfig(_version: BigNumberish, _chainId: BigNumberish, _configType: BigNumberish, _config: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setDefaultAdapterParams(_remoteChainId: BigNumberish, _adapterParams: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setMinDstGas(_dstChainId: BigNumberish, _packetType: BigNumberish, _minGas: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setPoolToLpId(_poolId: BigNumberish, _lpId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setPrecrime(_precrime: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setReceiveVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setSameToken(_poolId1: BigNumberish, _poolId2: BigNumberish, _isSame: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setSendVersion(_version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setStargatePoolIdToLPStakingAddress(_poolId: BigNumberish, _lpStaking: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setTokenBasePrice(_poolId: BigNumberish, _basePriceSD: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setTokenPriceFeed(_poolId: BigNumberish, _priceFeedAddress: string, _remoteChainIds: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setTrustedRemote(_srcChainId: BigNumberish, _path: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        stargatePoolIdToLPStaking(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        trustedRemoteLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        updateTokenPrice(_poolId: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        whiteList(_from: string, _whiteListed: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        whitelist(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
