"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPoolIds = exports.getDestTokens = exports.getDestChainIds = exports.getPoolDecimals = exports.getTokenByPoolId = exports.isSTGToken = exports.getSTGToken = exports.getTokens = exports.getContractAddress = exports.getChainId = exports.getStargateChainId = exports.getMarkets = exports.poolConfigsMapByToken = exports.poolConfigMapById = exports.tokensMap = exports.STGTokenMap = exports.configMapById = exports.configMap = exports.supportedChainIds = exports.configs = exports.PoolId = exports.ChainId = void 0;
const tslib_1 = require("tslib");
const tokens_1 = require("./tokens");
const common = tslib_1.__importStar(require("@protocolink/common"));
var ChainId;
(function (ChainId) {
    ChainId[ChainId["ETHEREUM"] = 101] = "ETHEREUM";
    ChainId[ChainId["AVALANCHE"] = 106] = "AVALANCHE";
    ChainId[ChainId["POLYGON"] = 109] = "POLYGON";
    ChainId[ChainId["ARBITRUM"] = 110] = "ARBITRUM";
    ChainId[ChainId["OPTIMISM"] = 111] = "OPTIMISM";
    ChainId[ChainId["METIS"] = 151] = "METIS";
    ChainId[ChainId["BASE"] = 184] = "BASE";
})(ChainId = exports.ChainId || (exports.ChainId = {}));
var PoolId;
(function (PoolId) {
    PoolId[PoolId["USDC"] = 1] = "USDC";
    PoolId[PoolId["USDT"] = 2] = "USDT";
    PoolId[PoolId["DAI"] = 3] = "DAI";
    PoolId[PoolId["FRAX"] = 7] = "FRAX";
    PoolId[PoolId["USDD"] = 11] = "USDD";
    PoolId[PoolId["ETH"] = 13] = "ETH";
    PoolId[PoolId["sUSD"] = 14] = "sUSD";
    PoolId[PoolId["LUSD"] = 15] = "LUSD";
    PoolId[PoolId["METIS"] = 17] = "METIS";
    PoolId[PoolId["metisUSDT"] = 19] = "metisUSDT";
})(PoolId = exports.PoolId || (exports.PoolId = {}));
exports.configs = [
    {
        id: ChainId.ETHEREUM,
        chainId: common.ChainId.mainnet,
        contract: {
            Router: '0x8731d54E9D02c286767d56ac03e8037C07e01e98',
            RouterETH: '0x150f94B44927F078737562f0fcF3C95c01Cc2376',
            FeeLibrary: '0x8C3085D9a554884124C998CDB7f6d7219E9C1e6F',
            LayerZeroEndpoint: '0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675',
        },
        STG: tokens_1.mainnetTokens.STG,
        pools: [
            {
                id: PoolId.USDC,
                token: tokens_1.mainnetTokens.USDC,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.USDC, PoolId.USDT] },
                ],
            },
            {
                id: PoolId.USDT,
                token: tokens_1.mainnetTokens.USDT,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.USDT, PoolId.USDC] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.USDT, PoolId.USDC] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.USDT, PoolId.USDC] },
                ],
            },
            {
                id: PoolId.DAI,
                token: tokens_1.mainnetTokens.DAI,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.DAI] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.DAI] },
                ],
            },
            {
                id: PoolId.FRAX,
                token: tokens_1.mainnetTokens.FRAX,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.FRAX] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.FRAX] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.FRAX] },
                ],
            },
            {
                id: PoolId.ETH,
                token: tokens_1.mainnetTokens.ETH,
                decimals: 18,
                paths: [
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.ETH] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.ETH] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.ETH] },
                ],
            },
            {
                id: PoolId.sUSD,
                token: tokens_1.mainnetTokens.sUSD,
                decimals: 6,
                paths: [{ chainId: common.ChainId.optimism, poolIds: [PoolId.sUSD] }],
            },
            {
                id: PoolId.LUSD,
                token: tokens_1.mainnetTokens.LUSD,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.LUSD] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.LUSD] },
                ],
            },
            {
                id: PoolId.METIS,
                token: tokens_1.mainnetTokens.Metis,
                decimals: 18,
                paths: [{ chainId: common.ChainId.metis, poolIds: [PoolId.METIS] }],
            },
            {
                id: PoolId.metisUSDT,
                token: tokens_1.mainnetTokens.USDT,
                decimals: 6,
                paths: [{ chainId: common.ChainId.metis, poolIds: [PoolId.metisUSDT] }],
            },
        ],
    },
    {
        id: ChainId.OPTIMISM,
        chainId: common.ChainId.optimism,
        contract: {
            Router: '0xB0D502E938ed5f4df2E681fE6E419ff29631d62b',
            RouterETH: '0xB49c4e680174E331CB0A7fF3Ab58afC9738d5F8b',
            FeeLibrary: '0x505eCDF2f14Cd4f1f413d04624b009A449D38D7E',
            LayerZeroEndpoint: '0x3c2269811836af69497E5F486A85D7316753cf62',
        },
        STG: tokens_1.optimismTokens.STG,
        pools: [
            {
                id: PoolId.USDC,
                token: tokens_1.optimismTokens['USDC.e'],
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.USDC, PoolId.USDT] },
                ],
            },
            {
                id: PoolId.DAI,
                token: tokens_1.optimismTokens.DAI,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.DAI] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.DAI] },
                ],
            },
            {
                id: PoolId.FRAX,
                token: tokens_1.optimismTokens.FRAX,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.FRAX] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.FRAX] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.FRAX] },
                ],
            },
            {
                id: PoolId.ETH,
                token: tokens_1.optimismTokens.ETH,
                decimals: 18,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.ETH] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.ETH] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.ETH] },
                ],
            },
            {
                id: PoolId.sUSD,
                token: tokens_1.optimismTokens.sUSD,
                decimals: 6,
                paths: [{ chainId: common.ChainId.mainnet, poolIds: [PoolId.sUSD] }],
            },
            {
                id: PoolId.LUSD,
                token: tokens_1.optimismTokens.LUSD,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.LUSD] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.LUSD] },
                ],
            },
        ],
    },
    {
        id: ChainId.POLYGON,
        chainId: common.ChainId.polygon,
        contract: {
            Router: '0x45A01E4e04F14f7A4a6702c74187c5F6222033cd',
            RouterETH: '',
            FeeLibrary: '0xb279b324Ea5648bE6402ABc727173A225383494C',
            LayerZeroEndpoint: '0x3c2269811836af69497E5F486A85D7316753cf62',
        },
        STG: tokens_1.polygonTokens.STG,
        pools: [
            {
                id: PoolId.USDC,
                token: tokens_1.polygonTokens['USDC.e'],
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.USDC, PoolId.USDT] },
                ],
            },
            {
                id: PoolId.USDT,
                token: tokens_1.polygonTokens.USDT,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.USDT, PoolId.USDC] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.USDT, PoolId.USDC] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.USDT, PoolId.USDC] },
                ],
            },
            {
                id: PoolId.DAI,
                token: tokens_1.polygonTokens.DAI,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.DAI] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.DAI] },
                ],
            },
        ],
    },
    {
        id: ChainId.METIS,
        chainId: common.ChainId.metis,
        contract: {
            Router: '0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590',
            RouterETH: '',
            FeeLibrary: '0x55bDb4164D28FBaF0898e0eF14a589ac09Ac9970',
            LayerZeroEndpoint: '0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4',
        },
        pools: [
            {
                id: PoolId.METIS,
                token: tokens_1.metisTokens.METIS,
                decimals: 18,
                paths: [{ chainId: common.ChainId.mainnet, poolIds: [PoolId.METIS] }],
            },
            {
                id: PoolId.metisUSDT,
                token: tokens_1.metisTokens['m.USDT'],
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.metisUSDT] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.metisUSDT] },
                ],
            },
        ],
    },
    {
        id: ChainId.BASE,
        chainId: common.ChainId.base,
        contract: {
            Router: '0x45f1A95A4D3f3836523F5c83673c797f4d4d263B',
            RouterETH: '0x50B6EbC2103BFEc165949CC946d739d5650d7ae4',
            FeeLibrary: '0x9d1b1669c73b033dfe47ae5a0164ab96df25b944',
            LayerZeroEndpoint: '0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7',
        },
        STG: tokens_1.baseTokens.STG,
        pools: [
            {
                id: PoolId.USDC,
                token: tokens_1.baseTokens.USDbC,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.USDC, PoolId.USDT] },
                ],
            },
            {
                id: PoolId.ETH,
                token: tokens_1.baseTokens.ETH,
                decimals: 18,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.ETH] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.ETH] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.ETH] },
                ],
            },
        ],
    },
    {
        id: ChainId.ARBITRUM,
        chainId: common.ChainId.arbitrum,
        contract: {
            Router: '0x53Bf833A5d6c4ddA888F69c22C88C9f356a41614',
            RouterETH: '0xbf22f0f184bCcbeA268dF387a49fF5238dD23E40',
            FeeLibrary: '0x1cF31666c06ac3401ed0C1c6346C4A9425dd7De4',
            LayerZeroEndpoint: '0x3c2269811836af69497E5F486A85D7316753cf62',
        },
        STG: tokens_1.arbitrumTokens.STG,
        pools: [
            {
                id: PoolId.USDC,
                token: tokens_1.arbitrumTokens['USDC.e'],
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.USDC, PoolId.USDT] },
                ],
            },
            {
                id: PoolId.USDT,
                token: tokens_1.arbitrumTokens.USDT,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.USDT, PoolId.USDC] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.USDT, PoolId.USDC] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.USDT, PoolId.USDC] },
                ],
            },
            {
                id: PoolId.FRAX,
                token: tokens_1.arbitrumTokens.FRAX,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.FRAX] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.FRAX] },
                    { chainId: common.ChainId.avalanche, poolIds: [PoolId.FRAX] },
                ],
            },
            {
                id: PoolId.ETH,
                token: tokens_1.arbitrumTokens.ETH,
                decimals: 18,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.ETH] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.ETH] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.ETH] },
                ],
            },
            {
                id: PoolId.LUSD,
                token: tokens_1.arbitrumTokens.LUSD,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.LUSD] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.LUSD] },
                ],
            },
        ],
    },
    {
        id: ChainId.AVALANCHE,
        chainId: common.ChainId.avalanche,
        contract: {
            Router: '0x45A01E4e04F14f7A4a6702c74187c5F6222033cd',
            RouterETH: '',
            FeeLibrary: '0x5E8eC15ACB5Aa94D5f0589E54441b31c5e0B992d',
            LayerZeroEndpoint: '0x3c2269811836af69497E5F486A85D7316753cf62',
        },
        STG: tokens_1.avalancheTokens.STG,
        pools: [
            {
                id: PoolId.USDC,
                token: tokens_1.avalancheTokens.USDC,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.USDC, PoolId.USDT] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.USDC, PoolId.USDT] },
                ],
            },
            {
                id: PoolId.USDT,
                token: tokens_1.avalancheTokens.USDt,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.USDT, PoolId.USDC] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.polygon, poolIds: [PoolId.USDT, PoolId.USDC] },
                    { chainId: common.ChainId.base, poolIds: [PoolId.USDC] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.USDT, PoolId.USDC] },
                ],
            },
            {
                id: PoolId.FRAX,
                token: tokens_1.avalancheTokens.FRAX,
                decimals: 6,
                paths: [
                    { chainId: common.ChainId.mainnet, poolIds: [PoolId.FRAX] },
                    { chainId: common.ChainId.optimism, poolIds: [PoolId.FRAX] },
                    { chainId: common.ChainId.arbitrum, poolIds: [PoolId.FRAX] },
                ],
            },
            {
                id: PoolId.metisUSDT,
                token: tokens_1.avalancheTokens.USDt,
                decimals: 6,
                paths: [{ chainId: common.ChainId.metis, poolIds: [PoolId.metisUSDT] }],
            },
        ],
    },
];
_a = exports.configs.reduce((accumulator, config) => {
    accumulator[0].push(config.chainId);
    accumulator[1][config.chainId] = config;
    accumulator[2][config.id] = config;
    accumulator[4][config.chainId] = new Set();
    if (config.STG) {
        accumulator[3][config.chainId] = config.STG;
        accumulator[4][config.chainId].add(config.STG);
    }
    accumulator[5][config.chainId] = {};
    accumulator[6][config.chainId] = {};
    for (const pool of config.pools) {
        accumulator[4][config.chainId].add(pool.token);
        accumulator[5][config.chainId][pool.id] = { chainId: config.chainId, ...pool };
        if (!accumulator[6][config.chainId][pool.token.address])
            accumulator[6][config.chainId][pool.token.address] = [];
        accumulator[6][config.chainId][pool.token.address].push({ chainId: config.chainId, ...pool });
    }
    return accumulator;
}, [[], {}, {}, {}, {}, {}, {}]), exports.supportedChainIds = _a[0], exports.configMap = _a[1], exports.configMapById = _a[2], exports.STGTokenMap = _a[3], exports.tokensMap = _a[4], exports.poolConfigMapById = _a[5], exports.poolConfigsMapByToken = _a[6];
function getMarkets(chainId) {
    return exports.configMap[chainId].pools;
}
exports.getMarkets = getMarkets;
function getStargateChainId(chainId) {
    return exports.configMap[chainId].id;
}
exports.getStargateChainId = getStargateChainId;
function getChainId(stargateChainId) {
    return exports.configMapById[stargateChainId].chainId;
}
exports.getChainId = getChainId;
function getContractAddress(chainId, name) {
    return exports.configMap[chainId].contract[name];
}
exports.getContractAddress = getContractAddress;
function getTokens(chainId) {
    return [...exports.tokensMap[chainId]];
}
exports.getTokens = getTokens;
function getSTGToken(chainId) {
    return exports.STGTokenMap[chainId];
}
exports.getSTGToken = getSTGToken;
function isSTGToken(chainId, token) {
    const STG = getSTGToken(chainId);
    return !!STG && token.is(STG);
}
exports.isSTGToken = isSTGToken;
function getTokenByPoolId(chainId, poolId) {
    return exports.poolConfigMapById[chainId][poolId].token;
}
exports.getTokenByPoolId = getTokenByPoolId;
function getPoolDecimals(chainId, poolId) {
    return exports.poolConfigMapById[chainId][poolId].decimals;
}
exports.getPoolDecimals = getPoolDecimals;
function getDestChainIds(srcChainId, srcToken) {
    var _a;
    const destChainIds = new Set();
    if (isSTGToken(srcChainId, srcToken)) {
        for (const config of exports.configs) {
            if (config.chainId !== srcChainId && config.STG) {
                destChainIds.add(config.chainId);
            }
        }
    }
    else {
        const srcPoolConfigs = (_a = exports.poolConfigsMapByToken[srcChainId][srcToken.address]) !== null && _a !== void 0 ? _a : [];
        for (const srcPoolConfig of srcPoolConfigs) {
            for (const path of srcPoolConfig.paths) {
                path.poolIds.length > 0 && destChainIds.add(path.chainId);
            }
        }
    }
    return [...destChainIds];
}
exports.getDestChainIds = getDestChainIds;
function getDestTokens(srcChainId, srcToken, destChainId) {
    var _a;
    const destTokens = [];
    if (isSTGToken(srcChainId, srcToken)) {
        destTokens.push(getSTGToken(destChainId));
    }
    else {
        const srcPoolConfigs = (_a = exports.poolConfigsMapByToken[srcChainId][srcToken.address]) !== null && _a !== void 0 ? _a : [];
        for (const srcPoolConfig of srcPoolConfigs) {
            for (const path of srcPoolConfig.paths) {
                if (path.chainId === destChainId) {
                    for (const poolId of path.poolIds) {
                        destTokens.push(getTokenByPoolId(destChainId, poolId));
                    }
                    break;
                }
            }
        }
    }
    return destTokens;
}
exports.getDestTokens = getDestTokens;
function getPoolIds(srcChainId, srcToken, destChainId, destToken) {
    const srcPoolConfigs = exports.poolConfigsMapByToken[srcChainId][srcToken.address];
    for (const srcPoolConfig of srcPoolConfigs) {
        for (const path of srcPoolConfig.paths) {
            if (path.chainId === destChainId) {
                for (const poolId of path.poolIds) {
                    if (getTokenByPoolId(destChainId, poolId).is(destToken)) {
                        return [srcPoolConfig.id, poolId];
                    }
                }
            }
        }
    }
    throw new Error('pool id not found');
}
exports.getPoolIds = getPoolIds;
//# sourceMappingURL=configs.js.map