import { FeeAmount } from '@uniswap/v3-sdk';
import { Token } from '@uniswap/sdk-core';
import * as common from '@protocolink/common';
import * as core from '@protocolink/core';
import { providers } from 'ethers';
import * as univ3 from '../../modules/univ3';
export type SwapTokenLogicTokenList = common.Token[];
export type SwapTokenLogicParams = univ3.SwapTokenLogicParams;
export type SwapTokenLogicFields = univ3.SwapTokenLogicFields;
export type SwapTokenLogicOptions = univ3.SwapTokenLogicOptions;
export declare class SwapTokenLogic extends univ3.SwapTokenLogic implements core.LogicTokenListInterface, core.LogicOracleInterface, core.LogicBuilderInterface {
    static id: string;
    static protocolId: string;
    static readonly supportedChainIds: number[];
    constructor(chainId: number, provider?: providers.Provider);
    getTokenList(): Promise<SwapTokenLogicTokenList>;
    computePoolAddress({ factoryAddress, tokenA, tokenB, fee, initCodeHashManualOverride, }: {
        factoryAddress: string;
        tokenA: Token;
        tokenB: Token;
        fee: FeeAmount;
        initCodeHashManualOverride?: string | undefined;
    }): Promise<string>;
}
