"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.configMap = exports.supportedChainIds = exports.configs = void 0;
const tslib_1 = require("tslib");
const v3_sdk_1 = require("@uniswap/v3-sdk");
const tokens_1 = require("./tokens");
const common = tslib_1.__importStar(require("@protocolink/common"));
// https://github.com/Uniswap/interface/blob/v4.265.0/src/constants/routing.ts#L65
// https://github.com/Uniswap/interface/blob/v4.204.5/src/constants/routing.ts#L91
// https://github.com/Uniswap/interface/blob/v4.204.5/src/constants/routing.ts#L108
exports.configs = [
    {
        chainId: common.ChainId.mainnet,
        factoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
        quoter: { address: '0x61fFE014bA17989E743c5F6cB21bF9697530B21e', isV2: true },
        swapRouterAddress: '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45',
        feeAmounts: [v3_sdk_1.FeeAmount.LOWEST, v3_sdk_1.FeeAmount.LOW, v3_sdk_1.FeeAmount.MEDIUM, v3_sdk_1.FeeAmount.HIGH],
        bases: [tokens_1.mainnetTokens.DAI, tokens_1.mainnetTokens.USDC, tokens_1.mainnetTokens.USDT, tokens_1.mainnetTokens.WBTC, tokens_1.mainnetTokens.WETH],
        additionalBases: {
            '0xF16E4d813f4DcfDe4c5b44f305c908742De84eF0': [tokens_1.mainnetTokens.ETH2X_FLI],
            [tokens_1.mainnetTokens.rETH2.address]: [tokens_1.mainnetTokens.sETH2],
            [tokens_1.mainnetTokens.SWISE.address]: [tokens_1.mainnetTokens.sETH2],
            [tokens_1.mainnetTokens.FEI.address]: [tokens_1.mainnetTokens.TRIBE],
            [tokens_1.mainnetTokens.TRIBE.address]: [tokens_1.mainnetTokens.FEI],
            [tokens_1.mainnetTokens.FRAX.address]: [tokens_1.mainnetTokens.FXS],
            [tokens_1.mainnetTokens.FXS.address]: [tokens_1.mainnetTokens.FRAX],
            [tokens_1.mainnetTokens.WBTC.address]: [tokens_1.mainnetTokens.renBTC],
            [tokens_1.mainnetTokens.renBTC.address]: [tokens_1.mainnetTokens.WBTC],
        },
    },
    {
        chainId: common.ChainId.optimism,
        factoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
        quoter: { address: '0x61fFE014bA17989E743c5F6cB21bF9697530B21e', isV2: true },
        swapRouterAddress: '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45',
        feeAmounts: [v3_sdk_1.FeeAmount.LOWEST, v3_sdk_1.FeeAmount.LOW, v3_sdk_1.FeeAmount.MEDIUM, v3_sdk_1.FeeAmount.HIGH],
        bases: [tokens_1.optimismTokens.OP, tokens_1.optimismTokens.DAI, tokens_1.optimismTokens['USDC.e'], tokens_1.optimismTokens.USDT, tokens_1.optimismTokens.WBTC],
    },
    {
        chainId: common.ChainId.polygon,
        factoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
        quoter: { address: '0x61fFE014bA17989E743c5F6cB21bF9697530B21e', isV2: true },
        swapRouterAddress: '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45',
        feeAmounts: [v3_sdk_1.FeeAmount.LOWEST, v3_sdk_1.FeeAmount.LOW, v3_sdk_1.FeeAmount.MEDIUM, v3_sdk_1.FeeAmount.HIGH],
        bases: [tokens_1.polygonTokens.WETH, tokens_1.polygonTokens.USDC, tokens_1.polygonTokens.DAI, tokens_1.polygonTokens.USDT, tokens_1.polygonTokens.WBTC],
    },
    {
        chainId: common.ChainId.base,
        factoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',
        quoter: { address: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a', isV2: true },
        swapRouterAddress: '0x2626664c2603336E57B271c5C0b26F421741e481',
        feeAmounts: [v3_sdk_1.FeeAmount.LOWEST, v3_sdk_1.FeeAmount.LOW, v3_sdk_1.FeeAmount.MEDIUM, v3_sdk_1.FeeAmount.HIGH],
        bases: [tokens_1.baseTokens.USDbC, tokens_1.baseTokens.WETH],
    },
    {
        chainId: common.ChainId.arbitrum,
        factoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
        quoter: { address: '0x61fFE014bA17989E743c5F6cB21bF9697530B21e', isV2: true },
        swapRouterAddress: '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45',
        feeAmounts: [v3_sdk_1.FeeAmount.LOWEST, v3_sdk_1.FeeAmount.LOW, v3_sdk_1.FeeAmount.MEDIUM, v3_sdk_1.FeeAmount.HIGH],
        bases: [
            tokens_1.arbitrumTokens.ARB,
            tokens_1.arbitrumTokens.DAI,
            tokens_1.arbitrumTokens.USDC,
            tokens_1.arbitrumTokens.USDT,
            tokens_1.arbitrumTokens.WBTC,
            tokens_1.arbitrumTokens.WETH,
        ],
    },
    {
        chainId: common.ChainId.avalanche,
        factoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',
        quoter: { address: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F', isV2: true },
        swapRouterAddress: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',
        feeAmounts: [v3_sdk_1.FeeAmount.LOWEST, v3_sdk_1.FeeAmount.LOW, v3_sdk_1.FeeAmount.MEDIUM, v3_sdk_1.FeeAmount.HIGH],
        bases: [
            tokens_1.avalancheTokens.WAVAX,
            tokens_1.avalancheTokens['DAI.e'],
            tokens_1.avalancheTokens.USDC,
            tokens_1.avalancheTokens.USDt,
            tokens_1.avalancheTokens['WETH.e'],
        ],
    },
];
_a = exports.configs.reduce((accumulator, config) => {
    accumulator[0].push(config.chainId);
    accumulator[1][config.chainId] = config;
    return accumulator;
}, [[], {}]), exports.supportedChainIds = _a[0], exports.configMap = _a[1];
function getConfig(chainId) {
    return exports.configMap[chainId];
}
exports.getConfig = getConfig;
//# sourceMappingURL=configs.js.map