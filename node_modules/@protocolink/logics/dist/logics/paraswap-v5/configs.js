"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenTransferProxyAddress = exports.getTokenListUrls = exports.configMap = exports.supportedChainIds = exports.configs = void 0;
const tslib_1 = require("tslib");
const common = tslib_1.__importStar(require("@protocolink/common"));
exports.configs = [
    {
        chainId: common.ChainId.mainnet,
        tokenTransferProxyAddress: '0x216B4B4Ba9F3e719726886d34a177484278Bfcae',
        tokenListUrls: [
            'https://raw.githubusercontent.com/paraswap/community-token-list/master/src/sources/paraswap.extralist.json',
            'https://raw.githubusercontent.com/bgd-labs/aave-address-book/main/tokenlist.json',
            'https://tokens.uniswap.org',
        ],
    },
    {
        chainId: common.ChainId.optimism,
        tokenTransferProxyAddress: '0x216B4B4Ba9F3e719726886d34a177484278Bfcae',
        tokenListUrls: [
            'https://static.optimism.io/optimism.tokenlist.json',
            'https://tokens.coingecko.com/optimistic-ethereum/all.json',
            'https://raw.githubusercontent.com/bgd-labs/aave-address-book/main/tokenlist.json',
        ],
    },
    {
        chainId: common.ChainId.bnb,
        tokenTransferProxyAddress: '0x216B4B4Ba9F3e719726886d34a177484278Bfcae',
        tokenListUrls: [
            'https://tokens.pancakeswap.finance/pancakeswap-extended.json',
            'https://raw.githubusercontent.com/bgd-labs/aave-address-book/main/tokenlist.json',
        ],
    },
    {
        chainId: common.ChainId.polygon,
        tokenTransferProxyAddress: '0x216B4B4Ba9F3e719726886d34a177484278Bfcae',
        tokenListUrls: [
            'https://unpkg.com/quickswap-default-token-list@latest/build/quickswap-default.tokenlist.json',
            'https://unpkg.com/@cometh-game/default-token-list@latest/build/comethswap-default.tokenlist.json',
            'https://raw.githubusercontent.com/bgd-labs/aave-address-book/main/tokenlist.json',
            'https://tokens.coingecko.com/polygon-pos/all.json',
        ],
    },
    {
        chainId: common.ChainId.polygonZkevm,
        tokenTransferProxyAddress: '0xC8a21FcD5A100c3ecc037c97e2f9C53a8D3A02A1',
        tokenListUrls: ['https://unpkg.com/quickswap-default-token-list@latest/build/quickswap-default.tokenlist.json'],
    },
    {
        chainId: common.ChainId.base,
        tokenTransferProxyAddress: '0x93aAAe79a53759cD164340E4C8766E4Db5331cD7',
        tokenListUrls: [
            'https://static.optimism.io/optimism.tokenlist.json',
            'https://raw.githubusercontent.com/bgd-labs/aave-address-book/main/tokenlist.json',
        ],
    },
    {
        chainId: common.ChainId.arbitrum,
        tokenTransferProxyAddress: '0x216B4B4Ba9F3e719726886d34a177484278Bfcae',
        tokenListUrls: [
            'https://raw.githubusercontent.com/paraswap/community-token-list/master/src/sources/paraswap.extralist.json',
            'https://bridge.arbitrum.io/token-list-42161.json',
            'https://tokens.coingecko.com/arbitrum-one/all.json',
            'https://raw.githubusercontent.com/bgd-labs/aave-address-book/main/tokenlist.json',
        ],
    },
    {
        chainId: common.ChainId.avalanche,
        tokenTransferProxyAddress: '0x216B4B4Ba9F3e719726886d34a177484278Bfcae',
        tokenListUrls: [
            'https://raw.githubusercontent.com/pangolindex/tokenlists/main/pangolin.tokenlist.json',
            'https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/mc.tokenlist.json',
            'https://tokens.coingecko.com/avalanche/all.json',
            'https://raw.githubusercontent.com/bgd-labs/aave-address-book/main/tokenlist.json',
        ],
    },
];
_a = exports.configs.reduce((accumulator, config) => {
    accumulator[0].push(config.chainId);
    accumulator[1][config.chainId] = config;
    return accumulator;
}, [[], {}]), exports.supportedChainIds = _a[0], exports.configMap = _a[1];
function getTokenListUrls(chainId) {
    return exports.configMap[chainId].tokenListUrls;
}
exports.getTokenListUrls = getTokenListUrls;
function getTokenTransferProxyAddress(chainId) {
    return exports.configMap[chainId].tokenTransferProxyAddress;
}
exports.getTokenTransferProxyAddress = getTokenTransferProxyAddress;
//# sourceMappingURL=configs.js.map