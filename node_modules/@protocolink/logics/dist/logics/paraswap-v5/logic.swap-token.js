"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapTokenLogic = void 0;
const tslib_1 = require("tslib");
const sdk_1 = require("@paraswap/sdk");
const utils_1 = require("../../utils");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const ethers_1 = require("ethers");
const configs_1 = require("./configs");
const tiny_invariant_1 = tslib_1.__importDefault(require("tiny-invariant"));
class SwapTokenLogic extends core.Logic {
    get sdk() {
        return (0, sdk_1.constructSimpleSDK)({ chainId: this.chainId, axios: utils_1.axios });
    }
    async getTokenList() {
        const tokenListUrls = (0, configs_1.getTokenListUrls)(this.chainId);
        const tokenLists = [];
        await Promise.all(tokenListUrls.map(async (tokenListUrl) => {
            try {
                const resp = await utils_1.axios.get(tokenListUrl);
                let data = resp.data;
                if (resp.headers['content-type'].includes('text/plain') && typeof data === 'string') {
                    data = JSON.parse(data);
                }
                tokenLists.push(data);
            }
            catch (_a) { }
        }));
        const tmp = { [this.nativeToken.address]: true };
        const tokenList = [this.nativeToken];
        for (const { tokens } of tokenLists) {
            for (const { chainId, address, decimals, symbol, name, logoURI } of tokens) {
                const lowerCaseAddress = address.toLowerCase();
                if (tmp[lowerCaseAddress] ||
                    chainId !== this.chainId ||
                    !name ||
                    !symbol ||
                    !decimals ||
                    !ethers_1.ethers.utils.isAddress(address))
                    continue;
                tokenList.push(new common.Token(chainId, address, decimals, symbol, name, logoURI));
                tmp[lowerCaseAddress] = true;
            }
        }
        return tokenList;
    }
    // If you wish to exclude quotes from specific DEXs, you can include the corresponding DEX Names
    // in the 'excludeDEXS' parameter. You can retrieve DEX Names from the following API:
    // https://api.paraswap.io/adapters/list?network={chainId}&namesOnly=true
    async quote(params) {
        try {
            const { excludeDEXS } = params;
            let input;
            let output;
            if (core.isTokenToTokenExactInParams(params)) {
                let tokenOut;
                ({ input, tokenOut } = params);
                const { destAmount } = await this.sdk.swap.getRate({
                    srcToken: input.token.elasticAddress,
                    srcDecimals: input.token.decimals,
                    amount: input.amountWei.toString(),
                    destToken: tokenOut.elasticAddress,
                    destDecimals: tokenOut.decimals,
                    side: sdk_1.SwapSide.SELL,
                    options: { excludeDEXS },
                });
                output = new common.TokenAmount(tokenOut).setWei(destAmount);
            }
            else {
                let tokenIn;
                ({ tokenIn, output } = params);
                const { srcAmount } = await this.sdk.swap.getRate({
                    srcToken: tokenIn.elasticAddress,
                    srcDecimals: tokenIn.decimals,
                    amount: output.amountWei.toString(),
                    destToken: output.token.elasticAddress,
                    destDecimals: output.token.decimals,
                    side: sdk_1.SwapSide.BUY,
                    options: { excludeDEXS },
                });
                input = new common.TokenAmount(tokenIn).setWei(srcAmount);
            }
            return { input, output, slippage: params.slippage, excludeDEXS };
        }
        catch (_a) {
            (0, tiny_invariant_1.default)(false, 'no route found or price impact too high');
        }
    }
    async build(fields, options) {
        const { input, output, partner, partnerAddress, takeSurplus, slippage, excludeDEXS } = fields;
        const { account } = options;
        const priceRoute = await this.sdk.swap.getRate({
            srcToken: input.token.elasticAddress,
            srcDecimals: input.token.decimals,
            amount: input.amountWei.toString(),
            destToken: output.token.elasticAddress,
            destDecimals: output.token.decimals,
            options: { excludeDEXS },
        });
        const { srcToken, srcDecimals, srcAmount, destToken, destDecimals, destAmount } = priceRoute;
        output.setWei(destAmount);
        const { to, data } = await this.sdk.swap.buildTx({
            srcToken,
            srcDecimals,
            destToken,
            destDecimals,
            srcAmount,
            userAddress: account,
            partner,
            partnerAddress,
            slippage: slippage !== null && slippage !== void 0 ? slippage : 0,
            deadline: (Math.floor(Date.now() / 1000) + 1200).toString(),
            priceRoute,
            takeSurplus,
        }, { ignoreChecks: true, ignoreGasEstimate: true });
        const inputs = [core.newLogicInput({ input })];
        const approveTo = (0, configs_1.getTokenTransferProxyAddress)(this.chainId);
        return core.newLogic({ to, data, inputs, approveTo });
    }
}
exports.SwapTokenLogic = SwapTokenLogic;
SwapTokenLogic.id = 'swap-token';
SwapTokenLogic.protocolId = 'paraswap-v5';
SwapTokenLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.swap-token.js.map