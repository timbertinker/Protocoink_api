"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepayLogic = void 0;
const tslib_1 = require("tslib");
const contracts_1 = require("./contracts");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
class RepayLogic extends core.Logic {
    getTokenList() {
        return configs_1.underlyingTokens;
    }
    async quote(params) {
        const { borrower, tokenIn } = params;
        const cToken = (0, configs_1.toCToken)(tokenIn);
        const borrowBalanceWei = await contracts_1.CErc20__factory.connect(cToken.address, this.provider).callStatic.borrowBalanceCurrent(borrower);
        const input = new common.TokenAmount(tokenIn).setWei(borrowBalanceWei);
        return { borrower, input };
    }
    async build(fields) {
        const { borrower, input, balanceBps } = fields;
        const cToken = (0, configs_1.toCToken)(input.token);
        const to = cToken.address;
        let data;
        let amountOffset;
        if (input.token.isNative) {
            data = contracts_1.CEther__factory.createInterface().encodeFunctionData('repayBorrowBehalf', [borrower]);
            if (balanceBps)
                amountOffset = core.OFFSET_NOT_USED;
        }
        else {
            data = contracts_1.CErc20__factory.createInterface().encodeFunctionData('repayBorrowBehalf', [borrower, input.amountWei]);
            if (balanceBps)
                amountOffset = common.getParamOffset(1);
        }
        const inputs = [core.newLogicInput({ input, balanceBps, amountOffset })];
        return core.newLogic({ to, data, inputs });
    }
}
exports.RepayLogic = RepayLogic;
RepayLogic.id = 'repay';
RepayLogic.protocolId = 'compound-v2';
RepayLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.repay.js.map