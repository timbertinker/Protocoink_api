"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupplyLogic = void 0;
const tslib_1 = require("tslib");
const ethers_1 = require("ethers");
const contracts_1 = require("./contracts");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
class SupplyLogic extends core.Logic {
    getTokenList() {
        const tokenList = configs_1.tokenPairs.map(({ underlyingToken, cToken }) => [underlyingToken, cToken]);
        return tokenList;
    }
    async quote(params) {
        const { input, tokenOut } = params;
        const exchangeRateCurrent = await contracts_1.CErc20__factory.connect(tokenOut.address, this.provider).callStatic.exchangeRateCurrent();
        const amountOutWei = input.amountWei.mul(ethers_1.BigNumber.from(10).pow(18)).div(exchangeRateCurrent);
        const output = new common.TokenAmount(tokenOut).setWei(amountOutWei);
        return { input, output };
    }
    async build(fields) {
        const { input, output, balanceBps } = fields;
        const to = output.token.address;
        let data;
        let amountOffset;
        if (input.token.isNative) {
            data = contracts_1.CEther__factory.createInterface().encodeFunctionData('mint');
            if (balanceBps)
                amountOffset = core.OFFSET_NOT_USED;
        }
        else {
            data = contracts_1.CErc20__factory.createInterface().encodeFunctionData('mint', [input.amountWei]);
            if (balanceBps)
                amountOffset = common.getParamOffset(0);
        }
        const inputs = [core.newLogicInput({ input, balanceBps, amountOffset })];
        return core.newLogic({ to, data, inputs });
    }
}
exports.SupplyLogic = SupplyLogic;
SupplyLogic.id = 'supply';
SupplyLogic.protocolId = 'compound-v2';
SupplyLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.supply.js.map