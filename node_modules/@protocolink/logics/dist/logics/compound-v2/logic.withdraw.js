"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithdrawLogic = void 0;
const tslib_1 = require("tslib");
const ethers_1 = require("ethers");
const contracts_1 = require("./contracts");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
class WithdrawLogic extends core.Logic {
    getTokenList() {
        const tokenList = configs_1.tokenPairs.map(({ underlyingToken, cToken }) => [
            cToken,
            underlyingToken,
        ]);
        return tokenList;
    }
    async quote(params) {
        const { input, tokenOut } = params;
        const exchangeRateCurrent = await contracts_1.CErc20__factory.connect(input.token.address, this.provider).callStatic.exchangeRateCurrent();
        const amountOutWei = input.amountWei.mul(exchangeRateCurrent).div(ethers_1.BigNumber.from(10).pow(18));
        const output = new common.TokenAmount(tokenOut).setWei(amountOutWei);
        return { input, output };
    }
    async build(fields) {
        const { input, balanceBps } = fields;
        const to = input.token.address;
        const data = contracts_1.CErc20__factory.createInterface().encodeFunctionData('redeem', [input.amountWei]);
        const amountOffset = balanceBps ? common.getParamOffset(0) : undefined;
        const inputs = [core.newLogicInput({ input, balanceBps, amountOffset })];
        return core.newLogic({ to, data, inputs });
    }
}
exports.WithdrawLogic = WithdrawLogic;
WithdrawLogic.id = 'withdraw';
WithdrawLogic.protocolId = 'compound-v2';
WithdrawLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.withdraw.js.map