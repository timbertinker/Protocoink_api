"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithdrawCollateralLogic = void 0;
const tslib_1 = require("tslib");
const service_1 = require("./service");
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
class WithdrawCollateralLogic extends core.Logic {
    async getTokenList() {
        const tokenList = {};
        const service = new service_1.Service(this.chainId, this.provider);
        const markets = (0, configs_1.getMarkets)(this.chainId);
        for (const market of markets) {
            const collateralToken = await service.getCollateralToken(market.id);
            tokenList[market.id] = [];
            if (collateralToken.isWrapped)
                tokenList[market.id].push(collateralToken.unwrapped);
            tokenList[market.id].push(collateralToken);
        }
        return tokenList;
    }
    async build(fields, options) {
        const { marketId, output } = fields;
        const { account } = options;
        const { loanToken, oracle, irm, lltv } = (0, configs_1.getMarket)(this.chainId, marketId);
        const collateralToken = output.token.wrapped;
        const agent = await this.calcAgent(account);
        const service = new service_1.Service(this.chainId, this.provider);
        const to = service.morpho.address;
        const data = service.morphoIface.encodeFunctionData('withdrawCollateral', [
            { loanToken: loanToken.address, collateralToken: collateralToken.address, oracle, irm, lltv },
            output.amountWei,
            account,
            agent, // receiver
        ]);
        const wrapMode = output.token.isNative ? core.WrapMode.unwrapAfter : core.WrapMode.none;
        return core.newLogic({ to, data, wrapMode });
    }
}
exports.WithdrawCollateralLogic = WithdrawCollateralLogic;
WithdrawCollateralLogic.id = 'withdraw-collateral';
WithdrawCollateralLogic.protocolId = 'morphoblue';
WithdrawCollateralLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.withdraw-collateral.js.map