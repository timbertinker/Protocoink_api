"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupplyLogic = void 0;
const tslib_1 = require("tslib");
const service_1 = require("./service");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
class SupplyLogic extends core.Logic {
    async getTokenList() {
        const tokenList = {};
        const service = new service_1.Service(this.chainId, this.provider);
        const markets = (0, configs_1.getMarkets)(this.chainId);
        for (const market of markets) {
            const loanToken = await service.getLoanToken(market.id);
            tokenList[market.id] = [];
            if (loanToken.isWrapped)
                tokenList[market.id].push(loanToken.unwrapped);
            tokenList[market.id].push(loanToken);
        }
        return tokenList;
    }
    async build(fields, options) {
        const { marketId, input, balanceBps } = fields;
        const { account } = options;
        const { collateralToken, oracle, irm, lltv } = (0, configs_1.getMarket)(this.chainId, marketId);
        const loanToken = input.token.wrapped;
        const service = new service_1.Service(this.chainId, this.provider);
        const to = service.morpho.address;
        const data = service.morphoIface.encodeFunctionData('supply', [
            { loanToken: loanToken.address, collateralToken: collateralToken.address, oracle, irm, lltv },
            input.amountWei,
            0,
            account,
            '0x', // data
        ]);
        const amountOffset = balanceBps ? common.getParamOffset(5) : undefined;
        const inputs = [
            core.newLogicInput({ input: new common.TokenAmount(loanToken, input.amount), balanceBps, amountOffset }),
        ];
        const wrapMode = input.token.isNative ? core.WrapMode.wrapBefore : core.WrapMode.none;
        return core.newLogic({ to, data, inputs, wrapMode });
    }
}
exports.SupplyLogic = SupplyLogic;
SupplyLogic.id = 'supply';
SupplyLogic.protocolId = 'morphoblue';
SupplyLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.supply.js.map