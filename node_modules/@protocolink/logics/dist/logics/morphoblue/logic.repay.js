"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepayLogic = void 0;
const tslib_1 = require("tslib");
const service_1 = require("./service");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
class RepayLogic extends core.Logic {
    async getTokenList() {
        const tokenList = {};
        const service = new service_1.Service(this.chainId, this.provider);
        const markets = (0, configs_1.getMarkets)(this.chainId);
        for (const market of markets) {
            const loanToken = await service.getLoanToken(market.id);
            tokenList[market.id] = [];
            if (loanToken.isWrapped)
                tokenList[market.id].push(loanToken.unwrapped);
            tokenList[market.id].push(loanToken);
        }
        return tokenList;
    }
    async quote(params) {
        const { marketId, borrower, tokenIn } = params;
        const service = new service_1.Service(this.chainId, this.provider);
        const borrowBalance = await service.getBorrowBalance(marketId, borrower, tokenIn);
        borrowBalance.setWei(common.calcSlippage(borrowBalance.amountWei, -1)); // slightly higher than borrowed amount
        return { marketId, borrower, input: borrowBalance };
    }
    async build(fields) {
        const { marketId, borrower, input, balanceBps } = fields;
        const { collateralToken, oracle, irm, lltv } = (0, configs_1.getMarket)(this.chainId, marketId);
        const loanToken = input.token.wrapped;
        const service = new service_1.Service(this.chainId, this.provider);
        const borrowShares = await service.getBorrowShares(marketId, borrower);
        const borrowBalance = await service.getBorrowBalance(marketId, borrower, input.token);
        const repayAll = input.gt(borrowBalance); // morpho accrues interests before repay
        const assets = repayAll ? 0 : input.amountWei;
        const shares = repayAll ? borrowShares : 0;
        const to = service.morpho.address;
        const data = service.morphoIface.encodeFunctionData('repay', [
            { loanToken: loanToken.address, collateralToken: collateralToken.address, oracle, irm, lltv },
            assets,
            shares,
            borrower,
            '0x', // data
        ]);
        const options = { input: new common.TokenAmount(loanToken, input.amount) };
        if (balanceBps && !repayAll) {
            options.balanceBps = balanceBps;
            options.amountOffset = common.getParamOffset(5);
        }
        const inputs = [core.newLogicInput(options)];
        const wrapMode = input.token.isNative ? core.WrapMode.wrapBefore : core.WrapMode.none;
        return core.newLogic({ to, data, inputs, wrapMode });
    }
}
exports.RepayLogic = RepayLogic;
RepayLogic.id = 'repay';
RepayLogic.protocolId = 'morphoblue';
RepayLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.repay.js.map