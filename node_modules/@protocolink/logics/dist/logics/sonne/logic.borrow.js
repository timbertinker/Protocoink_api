"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BorrowLogic = void 0;
const tslib_1 = require("tslib");
const contracts_1 = require("./contracts");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const smartAccounts = tslib_1.__importStar(require("@protocolink/smart-accounts"));
const configs_1 = require("./configs");
class BorrowLogic extends core.Logic {
    getTokenList() {
        const tokens = configs_1.underlyingTokens[this.chainId];
        const tokenList = [];
        for (const token of tokens) {
            if (token.isWrapped) {
                tokenList.push(token.unwrapped);
            }
            tokenList.push(token);
        }
        return tokenList;
    }
    async build(fields, options) {
        const { output, smartAccountId } = fields;
        const { account } = options;
        const cToken = (0, configs_1.toCToken)(this.chainId, output.token.wrapped);
        const tos = [];
        const datas = [];
        const values = [];
        // encode borrow token
        tos.push(cToken.address);
        datas.push(contracts_1.CErc20Immutable__factory.createInterface().encodeFunctionData('borrow', [output.amountWei]));
        values.push('0');
        // encode transfer token
        tos.push(output.token.wrapped.address);
        datas.push(common.ERC20__factory.createInterface().encodeFunctionData('transfer', [
            await this.calcAgent(account),
            output.amountWei,
        ]));
        values.push('0');
        const { to, data } = smartAccounts.encodeSmartAccount(this.chainId, smartAccountId, tos, datas, values);
        const wrapMode = output.token.isNative ? core.WrapMode.unwrapAfter : core.WrapMode.none;
        return core.newLogic({ to, data, wrapMode });
    }
}
exports.BorrowLogic = BorrowLogic;
BorrowLogic.id = 'borrow';
BorrowLogic.protocolId = 'sonne';
BorrowLogic.supportedChainIds = configs_1.supportedChainIds;
BorrowLogic.isEoaNotSupported = true;
//# sourceMappingURL=logic.borrow.js.map