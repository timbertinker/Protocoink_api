"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepayLogic = void 0;
const tslib_1 = require("tslib");
const contracts_1 = require("./contracts");
const common = tslib_1.__importStar(require("@protocolink/common"));
const ethers_1 = require("ethers");
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
class RepayLogic extends core.Logic {
    getTokenList() {
        const tokens = configs_1.underlyingTokens[this.chainId];
        const tokenList = [];
        for (const token of tokens) {
            if (token.isWrapped) {
                tokenList.push(token.unwrapped);
            }
            tokenList.push(token);
        }
        return tokenList;
    }
    async quote(params) {
        const { borrower, tokenIn } = params;
        const cToken = (0, configs_1.toCToken)(this.chainId, tokenIn.wrapped);
        const borrowBalanceWei = await contracts_1.CErc20Immutable__factory.connect(cToken.address, this.provider).callStatic.borrowBalanceCurrent(borrower);
        const amountWei = common.calcSlippage(borrowBalanceWei, -1); // slightly higher than the current borrowed amount
        const input = new common.TokenAmount(tokenIn).setWei(amountWei);
        return { borrower, input };
    }
    async build(fields) {
        const { borrower, input, balanceBps } = fields;
        const tokenIn = input.token.wrapped;
        const cToken = (0, configs_1.toCToken)(this.chainId, tokenIn);
        const borrowBalanceWei = await contracts_1.CErc20Immutable__factory.connect(cToken.address, this.provider).callStatic.borrowBalanceCurrent(borrower);
        const repayAll = input.amountWei.gte(borrowBalanceWei);
        const to = cToken.address;
        const data = contracts_1.CErc20Immutable__factory.createInterface().encodeFunctionData('repayBorrowBehalf', [
            borrower,
            repayAll ? ethers_1.constants.MaxUint256 : input.amountWei,
        ]);
        const options = { input: new common.TokenAmount(tokenIn, input.amount) };
        if (balanceBps && !repayAll) {
            options.balanceBps = balanceBps;
            options.amountOffset = common.getParamOffset(1);
        }
        const inputs = [core.newLogicInput(options)];
        const wrapMode = input.token.isNative ? core.WrapMode.wrapBefore : core.WrapMode.none;
        return core.newLogic({ to, data, inputs, wrapMode });
    }
}
exports.RepayLogic = RepayLogic;
RepayLogic.id = 'repay';
RepayLogic.protocolId = 'sonne';
RepayLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.repay.js.map