"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupplyLogic = void 0;
const tslib_1 = require("tslib");
const ethers_1 = require("ethers");
const contracts_1 = require("./contracts");
const common = tslib_1.__importStar(require("@protocolink/common"));
const core = tslib_1.__importStar(require("@protocolink/core"));
const configs_1 = require("./configs");
class SupplyLogic extends core.Logic {
    getTokenList() {
        const tokens = configs_1.tokenPairs[this.chainId];
        const tokenList = [];
        for (const token of tokens) {
            if (token.underlyingToken.isWrapped) {
                tokenList.push([token.underlyingToken.unwrapped, token.cToken]);
            }
            tokenList.push([token.underlyingToken, token.cToken]);
        }
        return tokenList;
    }
    async quote(params) {
        const { input, tokenOut } = params;
        const exchangeRateCurrent = await contracts_1.CErc20Immutable__factory.connect(tokenOut.address, this.provider).callStatic.exchangeRateCurrent();
        const amountOutWei = input.amountWei.mul(ethers_1.BigNumber.from(10).pow(18)).div(exchangeRateCurrent);
        const output = new common.TokenAmount(tokenOut).setWei(amountOutWei);
        return { input, output };
    }
    async build(fields) {
        const { input, output, balanceBps } = fields;
        const tokenIn = input.token.wrapped;
        const to = output.token.address;
        const data = contracts_1.CErc20Immutable__factory.createInterface().encodeFunctionData('mint', [input.amountWei]);
        const amountOffset = balanceBps ? common.getParamOffset(0) : undefined;
        const inputs = [
            core.newLogicInput({
                input: new common.TokenAmount(tokenIn, input.amount),
                balanceBps,
                amountOffset,
            }),
        ];
        const wrapMode = input.token.isNative ? core.WrapMode.wrapBefore : core.WrapMode.none;
        return core.newLogic({ to, data, inputs, wrapMode });
    }
}
exports.SupplyLogic = SupplyLogic;
SupplyLogic.id = 'supply';
SupplyLogic.protocolId = 'sonne';
SupplyLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.supply.js.map