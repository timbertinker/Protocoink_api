import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';
export declare namespace RouteHelper {
    type RoutePoolStruct = {
        pool: string;
        tokenA: string;
        tokenB: string;
        poolType: BigNumberish;
        reserveA: BigNumberish;
        reserveB: BigNumberish;
        swapFeeAB: BigNumberish;
        swapFeeBA: BigNumberish;
    };
    type RoutePoolStructOutput = [string, string, string, number, BigNumber, BigNumber, number, number] & {
        pool: string;
        tokenA: string;
        tokenB: string;
        poolType: number;
        reserveA: BigNumber;
        reserveB: BigNumber;
        swapFeeAB: number;
        swapFeeBA: number;
    };
    type RoutePoolsStruct = {
        poolsDirect: RouteHelper.RoutePoolStruct[];
        poolsA: RouteHelper.RoutePoolStruct[];
        poolsB: RouteHelper.RoutePoolStruct[];
        poolsBase: RouteHelper.RoutePoolStruct[];
    };
    type RoutePoolsStructOutput = [
        RouteHelper.RoutePoolStructOutput[],
        RouteHelper.RoutePoolStructOutput[],
        RouteHelper.RoutePoolStructOutput[],
        RouteHelper.RoutePoolStructOutput[]
    ] & {
        poolsDirect: RouteHelper.RoutePoolStructOutput[];
        poolsA: RouteHelper.RoutePoolStructOutput[];
        poolsB: RouteHelper.RoutePoolStructOutput[];
        poolsBase: RouteHelper.RoutePoolStructOutput[];
    };
}
export interface RouteHelperInterface extends utils.Interface {
    functions: {
        'getRoutePools(address,address,address[],address[],address,address)': FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: 'getRoutePools'): FunctionFragment;
    encodeFunctionData(functionFragment: 'getRoutePools', values: [string, string, string[], string[], string, string]): string;
    decodeFunctionResult(functionFragment: 'getRoutePools', data: BytesLike): Result;
    events: {};
}
export interface RouteHelper extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RouteHelperInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getRoutePools(tokenA: string, tokenB: string, factories: string[], baseTokens: string[], master: string, account: string, overrides?: CallOverrides): Promise<[
            RouteHelper.RoutePoolsStructOutput
        ] & {
            routePools: RouteHelper.RoutePoolsStructOutput;
        }>;
    };
    getRoutePools(tokenA: string, tokenB: string, factories: string[], baseTokens: string[], master: string, account: string, overrides?: CallOverrides): Promise<RouteHelper.RoutePoolsStructOutput>;
    callStatic: {
        getRoutePools(tokenA: string, tokenB: string, factories: string[], baseTokens: string[], master: string, account: string, overrides?: CallOverrides): Promise<RouteHelper.RoutePoolsStructOutput>;
    };
    filters: {};
    estimateGas: {
        getRoutePools(tokenA: string, tokenB: string, factories: string[], baseTokens: string[], master: string, account: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getRoutePools(tokenA: string, tokenB: string, factories: string[], baseTokens: string[], master: string, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
