"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapTokenLogic = void 0;
const tslib_1 = require("tslib");
const ethers_1 = require("ethers");
const contracts_1 = require("./contracts");
const utils_1 = require("../../utils");
const common = tslib_1.__importStar(require("@protocolink/common"));
const configs_1 = require("./configs");
const univ3 = tslib_1.__importStar(require("../../modules/univ3"));
class SwapTokenLogic extends univ3.SwapTokenLogic {
    constructor(chainId, provider) {
        super({ chainId, provider, config: (0, configs_1.getConfig)(chainId) });
    }
    async getTokenList() {
        const { data } = await utils_1.axios.get('https://raw.githubusercontent.com/RealWagmi/tokenlists/main/tokenlist.json');
        const tmp = { [this.nativeToken.address]: true };
        const tokenList = [this.nativeToken];
        for (const { chainId, address, decimals, symbol, name, logoURI } of data.tokens) {
            if (tmp[address] || chainId !== this.chainId)
                continue;
            tokenList.push(new common.Token(chainId, address, decimals, symbol, name, logoURI));
            tmp[address] = true;
        }
        return tokenList;
    }
    async computePoolAddress({ factoryAddress, tokenA, tokenB, fee, }) {
        let poolAddress = ethers_1.constants.AddressZero;
        if (tokenA && tokenB && !tokenA.equals(tokenB)) {
            const tokenIn = univ3.toPTLKToken(tokenA);
            const tokenOut = univ3.toPTLKToken(tokenB);
            const [token0, token1] = tokenIn.sortsBefore(tokenOut) ? [tokenIn, tokenOut] : [tokenOut, tokenIn];
            poolAddress = await contracts_1.UniswapV3Factory__factory.connect(factoryAddress, this.provider).getPool(token0.address, token1.address, ethers_1.BigNumber.from(fee.toString()));
        }
        return poolAddress;
    }
}
exports.SwapTokenLogic = SwapTokenLogic;
SwapTokenLogic.id = 'swap-token';
SwapTokenLogic.protocolId = 'wagmi';
SwapTokenLogic.supportedChainIds = configs_1.supportedChainIds;
//# sourceMappingURL=logic.swap-token.js.map