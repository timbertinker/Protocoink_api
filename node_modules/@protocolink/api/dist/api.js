"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildRouterTransactionRequest = exports.estimateRouterData = exports.quote = exports.getProtocolTokenList = exports.getProtocols = exports.client = exports.init = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const axios_retry_1 = tslib_1.__importDefault(require("axios-retry"));
const common = tslib_1.__importStar(require("@protocolink/common"));
const client = axios_1.default.create({ baseURL: 'https://api.protocolink.com' });
exports.client = client;
(0, axios_retry_1.default)(client, { retries: 3, retryDelay: axios_retry_1.default.exponentialDelay });
function init(options) {
    if (options.baseURL) {
        client.defaults.baseURL = options.baseURL;
    }
}
exports.init = init;
async function getProtocols() {
    const resp = await client.get('/v1/protocols');
    return resp.data.protocols;
}
exports.getProtocols = getProtocols;
async function getProtocolTokenList(chainId, rid) {
    const resp = await client.get(`/v1/protocols/${chainId}/${rid.replace(/:/, '/')}/tokens`);
    return common.classifying(resp.data.tokens);
}
exports.getProtocolTokenList = getProtocolTokenList;
async function quote(chainId, rid, data) {
    const resp = await client.post(`/v1/protocols/${chainId}/${rid.replace(/:/, '/')}/quote`, data);
    return common.classifying(resp.data);
}
exports.quote = quote;
async function estimateRouterData(routerData, options = {}) {
    const resp = await client.post(`/v1/transactions/estimate${options.permit2Type ? `?permit2Type=${options.permit2Type}` : ''}`, routerData, options.apiKey ? { headers: { 'x-api-key': options.apiKey } } : undefined);
    return common.classifying(resp.data);
}
exports.estimateRouterData = estimateRouterData;
async function buildRouterTransactionRequest(routerData, options = {}) {
    const resp = await client.post('/v1/transactions/build', routerData, options.apiKey ? { headers: { 'x-api-key': options.apiKey } } : undefined);
    return resp.data;
}
exports.buildRouterTransactionRequest = buildRouterTransactionRequest;
//# sourceMappingURL=api.js.map